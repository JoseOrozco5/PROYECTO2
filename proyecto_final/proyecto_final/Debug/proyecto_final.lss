
proyecto_final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d6  00800100  0000138c  00001420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000138c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  008001d6  008001d6  000014f6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000014f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001554  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00001594  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001211  00000000  00000000  000016a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000097f  00000000  00000000  000028b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b39  00000000  00000000  00003234  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000264  00000000  00000000  00003d70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000564  00000000  00000000  00003fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000041d  00000000  00000000  00004538  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00004955  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
       4:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
       8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
       c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      14:	0c 94 89 03 	jmp	0x712	; 0x712 <__vector_5>
      18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      2c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      40:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      48:	0c 94 59 03 	jmp	0x6b2	; 0x6b2 <__vector_18>
      4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      54:	0c 94 a0 02 	jmp	0x540	; 0x540 <__vector_21>
      58:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      5c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      60:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      64:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	63 64       	ori	r22, 0x43	; 67
      6a:	69 6e       	ori	r22, 0xE9	; 233
      6c:	6f 70       	andi	r22, 0x0F	; 15
      6e:	73 75       	andi	r23, 0x53	; 83
      70:	78 58       	subi	r23, 0x88	; 136
      72:	5b 00       	.word	0x005b	; ????

00000074 <__ctors_end>:
      74:	11 24       	eor	r1, r1
      76:	1f be       	out	0x3f, r1	; 63
      78:	cf ef       	ldi	r28, 0xFF	; 255
      7a:	d8 e0       	ldi	r29, 0x08	; 8
      7c:	de bf       	out	0x3e, r29	; 62
      7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
      80:	11 e0       	ldi	r17, 0x01	; 1
      82:	a0 e0       	ldi	r26, 0x00	; 0
      84:	b1 e0       	ldi	r27, 0x01	; 1
      86:	ec e8       	ldi	r30, 0x8C	; 140
      88:	f3 e1       	ldi	r31, 0x13	; 19
      8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
      8c:	05 90       	lpm	r0, Z+
      8e:	0d 92       	st	X+, r0
      90:	a6 3d       	cpi	r26, 0xD6	; 214
      92:	b1 07       	cpc	r27, r17
      94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
      96:	21 e0       	ldi	r18, 0x01	; 1
      98:	a6 ed       	ldi	r26, 0xD6	; 214
      9a:	b1 e0       	ldi	r27, 0x01	; 1
      9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
      9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
      a0:	ab 3f       	cpi	r26, 0xFB	; 251
      a2:	b2 07       	cpc	r27, r18
      a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
      a6:	0e 94 a7 00 	call	0x14e	; 0x14e <main>
      aa:	0c 94 c4 09 	jmp	0x1388	; 0x1388 <_exit>

000000ae <__bad_interrupt>:
      ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <writeEEPROM>:
// NON-Interrupt subroutines

void writeEEPROM(uint8_t dato, uint16_t direccion)
{
	// 0b00000010 sigue escribiendo, si 0b00000000 ya termino de escribir
	while (EECR &(1 << EEPE));															// ESPERAMOS A QUE BIT 0b000000X0 sea 0 (osea ya termino de escribir)
      b2:	f9 99       	sbic	0x1f, 1	; 31
      b4:	fe cf       	rjmp	.-4      	; 0xb2 <writeEEPROM>
	// Ya termino entonces ya puede empezar a escribir otra vez (le digo a donde "direccion")
	EEAR = direccion;																	// ar (address)
      b6:	72 bd       	out	0x22, r23	; 34
      b8:	61 bd       	out	0x21, r22	; 33
	// Establecer dato que quiero guardar
	EEDR = dato;																		// dr (data)
      ba:	80 bd       	out	0x20, r24	; 32
	EECR |= (1 << EEMPE);																// Master Write enable
      bc:	8f b3       	in	r24, 0x1f	; 31
      be:	84 60       	ori	r24, 0x04	; 4
      c0:	8f bb       	out	0x1f, r24	; 31
	EECR |= (1 << EEPE);																// habilito escritura
      c2:	8f b3       	in	r24, 0x1f	; 31
      c4:	82 60       	ori	r24, 0x02	; 2
      c6:	8f bb       	out	0x1f, r24	; 31
      c8:	08 95       	ret

000000ca <readEEPROM>:
}

uint8_t	 readEEPROM(uint16_t direccion)
{
	while (EECR &(1 << EEPE));															// ESPERAMOS A QUE BIT 0b000000X0 sea 0 (osea ya termino de escribir)
      ca:	f9 99       	sbic	0x1f, 1	; 31
      cc:	fe cf       	rjmp	.-4      	; 0xca <readEEPROM>
	EEAR = direccion;																	// Le digo donde leer
      ce:	92 bd       	out	0x22, r25	; 34
      d0:	81 bd       	out	0x21, r24	; 33
	EECR |= (1 << EERE);																// empezar lectura
      d2:	8f b3       	in	r24, 0x1f	; 31
      d4:	81 60       	ori	r24, 0x01	; 1
      d6:	8f bb       	out	0x1f, r24	; 31
	return EEDR;																		// regresa lectura
      d8:	80 b5       	in	r24, 0x20	; 32
}
      da:	08 95       	ret

000000dc <init_ADC>:
}

// NON-Interrupt functions
void init_ADC()
{
	ADMUX = 0;																		// LIMPIAR REGISTRO
      dc:	ec e7       	ldi	r30, 0x7C	; 124
      de:	f0 e0       	ldi	r31, 0x00	; 0
      e0:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0);															// utilizar AVcc como referencia (5v)
      e2:	80 81       	ld	r24, Z
      e4:	80 64       	ori	r24, 0x40	; 64
      e6:	80 83       	st	Z, r24
	ADMUX |= (1 << ADLAR);															// justificado a la izquierda (y leo 8 bits mas significativos)
      e8:	80 81       	ld	r24, Z
      ea:	80 62       	ori	r24, 0x20	; 32
      ec:	80 83       	st	Z, r24
	ADMUX |= (1 << MUX0);															// utilizar PC1 para potenciometro
      ee:	80 81       	ld	r24, Z
      f0:	81 60       	ori	r24, 0x01	; 1
      f2:	80 83       	st	Z, r24
	
	ADCSRA = 0;																		// LIMPIAR REGISTRO
      f4:	ea e7       	ldi	r30, 0x7A	; 122
      f6:	f0 e0       	ldi	r31, 0x00	; 0
      f8:	10 82       	st	Z, r1
	ADCSRA |= (1 << ADEN);															// Activar ADC
      fa:	80 81       	ld	r24, Z
      fc:	80 68       	ori	r24, 0x80	; 128
      fe:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);															// Activar interrupcion del ADC
     100:	80 81       	ld	r24, Z
     102:	88 60       	ori	r24, 0x08	; 8
     104:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);							// prescaler 128
     106:	80 81       	ld	r24, Z
     108:	87 60       	ori	r24, 0x07	; 7
     10a:	80 83       	st	Z, r24
     10c:	08 95       	ret

0000010e <setup>:
	//ADCSRA |= (1 << ADSC);															// iniciar primera conversión
}

void setup()
{
	DDRB |= (1 << PORTB5) | (1 << PORTB4) | (1 << PORTB0);							// SALIDA LED´S modos
     10e:	84 b1       	in	r24, 0x04	; 4
     110:	81 63       	ori	r24, 0x31	; 49
     112:	84 b9       	out	0x04, r24	; 4
	
	DDRD &= ~((1 << PORTD4) | (1 << PORTD5) | (1 << PORTD6));						// entradas botones
     114:	8a b1       	in	r24, 0x0a	; 10
     116:	8f 78       	andi	r24, 0x8F	; 143
     118:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PORTD4) | (1 << PORTD5) |(1 << PORTD6);							// pull up internos
     11a:	8b b1       	in	r24, 0x0b	; 11
     11c:	80 67       	ori	r24, 0x70	; 112
     11e:	8b b9       	out	0x0b, r24	; 11
	//-------------LED´S EEPROM---------------//
	DDRC |= (1 << PORTC0) | (1 << PORTC5);
     120:	87 b1       	in	r24, 0x07	; 7
     122:	81 62       	ori	r24, 0x21	; 33
     124:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1 << PORTD7) | (1 << PORTD2);
     126:	8a b1       	in	r24, 0x0a	; 10
     128:	84 68       	ori	r24, 0x84	; 132
     12a:	8a b9       	out	0x0a, r24	; 10
	PORTC &= ~((1 << PORTC0) | (1 << PORTC5));
     12c:	88 b1       	in	r24, 0x08	; 8
     12e:	8e 7d       	andi	r24, 0xDE	; 222
     130:	88 b9       	out	0x08, r24	; 8
	PORTD &= ~((1 << PORTD7) | (1 << PORTD2));
     132:	8b b1       	in	r24, 0x0b	; 11
     134:	8b 77       	andi	r24, 0x7B	; 123
     136:	8b b9       	out	0x0b, r24	; 11
	//-----------Interrupciones--------------//
	PCICR  |= (1<<PCIE2);															// pin-change interrupt puertoD
     138:	e8 e6       	ldi	r30, 0x68	; 104
     13a:	f0 e0       	ldi	r31, 0x00	; 0
     13c:	80 81       	ld	r24, Z
     13e:	84 60       	ori	r24, 0x04	; 4
     140:	80 83       	st	Z, r24
	PCMSK2 |= (1<<PCINT22) | (1 << PCINT21) | (1 << PCINT20);						// BOTON MODO EN PD6, PD5 MOSTRAR Y PD4 GUARDAR
     142:	ed e6       	ldi	r30, 0x6D	; 109
     144:	f0 e0       	ldi	r31, 0x00	; 0
     146:	80 81       	ld	r24, Z
     148:	80 67       	ori	r24, 0x70	; 112
     14a:	80 83       	st	Z, r24
     14c:	08 95       	ret

0000014e <main>:



// Main
int main(void)
{
     14e:	cf 93       	push	r28
     150:	df 93       	push	r29
     152:	00 d0       	rcall	.+0      	; 0x154 <main+0x6>
     154:	cd b7       	in	r28, 0x3d	; 61
     156:	de b7       	in	r29, 0x3e	; 62
	// DIVIDIR PRESCALER PARA 8MHz
	CLKPR |= (1 << CLKPCE);
     158:	e1 e6       	ldi	r30, 0x61	; 97
     15a:	f0 e0       	ldi	r31, 0x00	; 0
     15c:	80 81       	ld	r24, Z
     15e:	80 68       	ori	r24, 0x80	; 128
     160:	80 83       	st	Z, r24
	CLKPR |= (1 << CLKPS0);
     162:	80 81       	ld	r24, Z
     164:	81 60       	ori	r24, 0x01	; 1
     166:	80 83       	st	Z, r24
	
	setup();
     168:	0e 94 87 00 	call	0x10e	; 0x10e <setup>
	init_PWM1(19999);
     16c:	8f e1       	ldi	r24, 0x1F	; 31
     16e:	9e e4       	ldi	r25, 0x4E	; 78
     170:	0e 94 dd 03 	call	0x7ba	; 0x7ba <init_PWM1>
	init_PWM2();
     174:	0e 94 23 04 	call	0x846	; 0x846 <init_PWM2>
	init_ADC();
     178:	0e 94 6e 00 	call	0xdc	; 0xdc <init_ADC>
	init_USART();
     17c:	0e 94 67 04 	call	0x8ce	; 0x8ce <init_USART>
	sei();
     180:	78 94       	sei
	while (1)
	{
		
		switch(modo)
     182:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <modo>
     186:	81 30       	cpi	r24, 0x01	; 1
     188:	99 f0       	breq	.+38     	; 0x1b0 <main+0x62>
     18a:	18 f0       	brcs	.+6      	; 0x192 <main+0x44>
     18c:	82 30       	cpi	r24, 0x02	; 2
     18e:	d1 f0       	breq	.+52     	; 0x1c4 <main+0x76>
     190:	f8 cf       	rjmp	.-16     	; 0x182 <main+0x34>
		{
			case 0:
			//------------LED MODO MANUAL------------------//
			PORTB &= ~(1 << PORTB4);
     192:	85 b1       	in	r24, 0x05	; 5
     194:	8f 7e       	andi	r24, 0xEF	; 239
     196:	85 b9       	out	0x05, r24	; 5
			PORTB &= ~(1 << PORTB0);
     198:	85 b1       	in	r24, 0x05	; 5
     19a:	8e 7f       	andi	r24, 0xFE	; 254
     19c:	85 b9       	out	0x05, r24	; 5
			PORTB |= (1 << PORTB5);
     19e:	85 b1       	in	r24, 0x05	; 5
     1a0:	80 62       	ori	r24, 0x20	; 32
     1a2:	85 b9       	out	0x05, r24	; 5
			//-----------------Iniciar ADC----------------//
			ADCSRA |= (1 << ADSC);																// se hace la lectura del adc (se llama a la interrupcion)
     1a4:	ea e7       	ldi	r30, 0x7A	; 122
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	80 81       	ld	r24, Z
     1aa:	80 64       	ori	r24, 0x40	; 64
     1ac:	80 83       	st	Z, r24
			
			break;
     1ae:	e9 cf       	rjmp	.-46     	; 0x182 <main+0x34>
			
			case 1:
			//------------LED MODO EEPROM--------------//
			PORTB &= ~(1 << PORTB5);
     1b0:	85 b1       	in	r24, 0x05	; 5
     1b2:	8f 7d       	andi	r24, 0xDF	; 223
     1b4:	85 b9       	out	0x05, r24	; 5
			PORTB &= ~(1 << PORTB4);
     1b6:	85 b1       	in	r24, 0x05	; 5
     1b8:	8f 7e       	andi	r24, 0xEF	; 239
     1ba:	85 b9       	out	0x05, r24	; 5
			PORTB |= (1 << PORTB0);																// encender led que indique modo EEPROM
     1bc:	85 b1       	in	r24, 0x05	; 5
     1be:	81 60       	ori	r24, 0x01	; 1
     1c0:	85 b9       	out	0x05, r24	; 5
			break;
     1c2:	df cf       	rjmp	.-66     	; 0x182 <main+0x34>
			
			case 2:
			//--------------LED MODO ADAFRUIT----------//
			PORTB &= ~(1 << PORTB5);
     1c4:	85 b1       	in	r24, 0x05	; 5
     1c6:	8f 7d       	andi	r24, 0xDF	; 223
     1c8:	85 b9       	out	0x05, r24	; 5
			PORTB &= ~(1 << PORTB0);
     1ca:	85 b1       	in	r24, 0x05	; 5
     1cc:	8e 7f       	andi	r24, 0xFE	; 254
     1ce:	85 b9       	out	0x05, r24	; 5
			PORTB |= (1 << PORTB4);
     1d0:	85 b1       	in	r24, 0x05	; 5
     1d2:	80 61       	ori	r24, 0x10	; 16
     1d4:	85 b9       	out	0x05, r24	; 5
			cadena("\n");
     1d6:	8d e7       	ldi	r24, 0x7D	; 125
     1d8:	91 e0       	ldi	r25, 0x01	; 1
     1da:	0e 94 87 04 	call	0x90e	; 0x90e <cadena>
			cadena("Usted esta en modo Adafruit, por favor mueva un slider. \n");
     1de:	80 e0       	ldi	r24, 0x00	; 0
     1e0:	91 e0       	ldi	r25, 0x01	; 1
     1e2:	0e 94 87 04 	call	0x90e	; 0x90e <cadena>
			cadena("Indique que servomotor desea mover e ingrese un valor de 0 a 255.  \n");
     1e6:	8a e3       	ldi	r24, 0x3A	; 58
     1e8:	91 e0       	ldi	r25, 0x01	; 1
     1ea:	0e 94 87 04 	call	0x90e	; 0x90e <cadena>
			cadena("\n");
     1ee:	8d e7       	ldi	r24, 0x7D	; 125
     1f0:	91 e0       	ldi	r25, 0x01	; 1
     1f2:	0e 94 87 04 	call	0x90e	; 0x90e <cadena>
			if (serial == 1)
     1f6:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <serial>
     1fa:	81 30       	cpi	r24, 0x01	; 1
     1fc:	11 f6       	brne	.-124    	; 0x182 <main+0x34>
			{
				serial = 0;														// limpio bandera para proxima interaccion
     1fe:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <serial>
				uint8_t motor, ang;
				if (sscanf(buffer, "%hhu, %hhu", &motor, &ang) == 2)
     202:	ce 01       	movw	r24, r28
     204:	01 96       	adiw	r24, 0x01	; 1
     206:	9f 93       	push	r25
     208:	8f 93       	push	r24
     20a:	01 96       	adiw	r24, 0x01	; 1
     20c:	9f 93       	push	r25
     20e:	8f 93       	push	r24
     210:	8f e7       	ldi	r24, 0x7F	; 127
     212:	91 e0       	ldi	r25, 0x01	; 1
     214:	9f 93       	push	r25
     216:	8f 93       	push	r24
     218:	85 ee       	ldi	r24, 0xE5	; 229
     21a:	91 e0       	ldi	r25, 0x01	; 1
     21c:	9f 93       	push	r25
     21e:	8f 93       	push	r24
     220:	0e 94 59 06 	call	0xcb2	; 0xcb2 <sscanf>
     224:	0f b6       	in	r0, 0x3f	; 63
     226:	f8 94       	cli
     228:	de bf       	out	0x3e, r29	; 62
     22a:	0f be       	out	0x3f, r0	; 63
     22c:	cd bf       	out	0x3d, r28	; 61
     22e:	02 97       	sbiw	r24, 0x02	; 2
     230:	f1 f4       	brne	.+60     	; 0x26e <main+0x120>
				{
					switch(motor)
     232:	8a 81       	ldd	r24, Y+2	; 0x02
     234:	82 30       	cpi	r24, 0x02	; 2
     236:	71 f0       	breq	.+28     	; 0x254 <main+0x106>
     238:	18 f4       	brcc	.+6      	; 0x240 <main+0xf2>
     23a:	81 30       	cpi	r24, 0x01	; 1
     23c:	31 f0       	breq	.+12     	; 0x24a <main+0xfc>
     23e:	a1 cf       	rjmp	.-190    	; 0x182 <main+0x34>
     240:	83 30       	cpi	r24, 0x03	; 3
     242:	69 f0       	breq	.+26     	; 0x25e <main+0x110>
     244:	84 30       	cpi	r24, 0x04	; 4
     246:	79 f0       	breq	.+30     	; 0x266 <main+0x118>
     248:	9c cf       	rjmp	.-200    	; 0x182 <main+0x34>
					{
						case 1:
						pulso_PWM1(ang);
     24a:	89 81       	ldd	r24, Y+1	; 0x01
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <pulso_PWM1>
						break;
     252:	97 cf       	rjmp	.-210    	; 0x182 <main+0x34>
						case 2:
						pulso2_PWM1(ang);
     254:	89 81       	ldd	r24, Y+1	; 0x01
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	0e 94 0b 04 	call	0x816	; 0x816 <pulso2_PWM1>
						break;
     25c:	92 cf       	rjmp	.-220    	; 0x182 <main+0x34>
						case 3:
						pulse_PWM2(ang);
     25e:	89 81       	ldd	r24, Y+1	; 0x01
     260:	0e 94 39 04 	call	0x872	; 0x872 <pulse_PWM2>
						break;
     264:	8e cf       	rjmp	.-228    	; 0x182 <main+0x34>
						case 4:
						pulse2_PWM2(ang);
     266:	89 81       	ldd	r24, Y+1	; 0x01
     268:	0e 94 50 04 	call	0x8a0	; 0x8a0 <pulse2_PWM2>
						break;
     26c:	8a cf       	rjmp	.-236    	; 0x182 <main+0x34>
					}
				}
				else
				{
					cadena("Opción no valida, por favor ingrese el servomotor y angulo como \"1,180\". \n ");
     26e:	8a e8       	ldi	r24, 0x8A	; 138
     270:	91 e0       	ldi	r25, 0x01	; 1
     272:	0e 94 87 04 	call	0x90e	; 0x90e <cadena>
     276:	85 cf       	rjmp	.-246    	; 0x182 <main+0x34>

00000278 <guardar>:
}

void guardar()
{
	
	switch (contador_pos)
     278:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <contador_pos>
     27c:	81 30       	cpi	r24, 0x01	; 1
     27e:	69 f1       	breq	.+90     	; 0x2da <guardar+0x62>
     280:	38 f0       	brcs	.+14     	; 0x290 <guardar+0x18>
     282:	82 30       	cpi	r24, 0x02	; 2
     284:	09 f4       	brne	.+2      	; 0x288 <guardar+0x10>
     286:	4e c0       	rjmp	.+156    	; 0x324 <guardar+0xac>
     288:	83 30       	cpi	r24, 0x03	; 3
     28a:	09 f4       	brne	.+2      	; 0x28e <guardar+0x16>
     28c:	70 c0       	rjmp	.+224    	; 0x36e <guardar+0xf6>
     28e:	93 c0       	rjmp	.+294    	; 0x3b6 <guardar+0x13e>
	{
		case 0:
		PORTC &= ~(1 << PORTC0);
     290:	88 b1       	in	r24, 0x08	; 8
     292:	8e 7f       	andi	r24, 0xFE	; 254
     294:	88 b9       	out	0x08, r24	; 8
		PORTC |= (1 << PORTC5);
     296:	88 b1       	in	r24, 0x08	; 8
     298:	80 62       	ori	r24, 0x20	; 32
     29a:	88 b9       	out	0x08, r24	; 8
		PORTD &= ~(1 << PORTD7);
     29c:	8b b1       	in	r24, 0x0b	; 11
     29e:	8f 77       	andi	r24, 0x7F	; 127
     2a0:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1 << PORTD2);
     2a2:	8b b1       	in	r24, 0x0b	; 11
     2a4:	8b 7f       	andi	r24, 0xFB	; 251
     2a6:	8b b9       	out	0x0b, r24	; 11
		writeEEPROM(servo1, 0);													// registro de memoria (0, 4, 8 y 12)
     2a8:	60 e0       	ldi	r22, 0x00	; 0
     2aa:	70 e0       	ldi	r23, 0x00	; 0
     2ac:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <servo1>
     2b0:	0e 94 59 00 	call	0xb2	; 0xb2 <writeEEPROM>
		writeEEPROM(servo2, 1);													// registro de memoria (1, 5, 9 y 13)
     2b4:	61 e0       	ldi	r22, 0x01	; 1
     2b6:	70 e0       	ldi	r23, 0x00	; 0
     2b8:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <servo2>
     2bc:	0e 94 59 00 	call	0xb2	; 0xb2 <writeEEPROM>
		writeEEPROM(servo3, 2);													// registro de memoria (2, 6, 10 y 14)
     2c0:	62 e0       	ldi	r22, 0x02	; 2
     2c2:	70 e0       	ldi	r23, 0x00	; 0
     2c4:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <servo3>
     2c8:	0e 94 59 00 	call	0xb2	; 0xb2 <writeEEPROM>
		writeEEPROM(servo4, 3);
     2cc:	63 e0       	ldi	r22, 0x03	; 3
     2ce:	70 e0       	ldi	r23, 0x00	; 0
     2d0:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <servo4>
     2d4:	0e 94 59 00 	call	0xb2	; 0xb2 <writeEEPROM>
		break;
     2d8:	6e c0       	rjmp	.+220    	; 0x3b6 <guardar+0x13e>
		case 1:
		PORTC |= (1 << PORTC0);
     2da:	88 b1       	in	r24, 0x08	; 8
     2dc:	81 60       	ori	r24, 0x01	; 1
     2de:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC5);
     2e0:	88 b1       	in	r24, 0x08	; 8
     2e2:	8f 7d       	andi	r24, 0xDF	; 223
     2e4:	88 b9       	out	0x08, r24	; 8
		PORTD &= ~(1 << PORTD7);
     2e6:	8b b1       	in	r24, 0x0b	; 11
     2e8:	8f 77       	andi	r24, 0x7F	; 127
     2ea:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1 << PORTD2);
     2ec:	8b b1       	in	r24, 0x0b	; 11
     2ee:	8b 7f       	andi	r24, 0xFB	; 251
     2f0:	8b b9       	out	0x0b, r24	; 11
		writeEEPROM(servo1, 4);													// registro de memoria (0, 4, 8 y 12)
     2f2:	64 e0       	ldi	r22, 0x04	; 4
     2f4:	70 e0       	ldi	r23, 0x00	; 0
     2f6:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <servo1>
     2fa:	0e 94 59 00 	call	0xb2	; 0xb2 <writeEEPROM>
		writeEEPROM(servo2, 5);													// registro de memoria (1, 5, 9 y 13)
     2fe:	65 e0       	ldi	r22, 0x05	; 5
     300:	70 e0       	ldi	r23, 0x00	; 0
     302:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <servo2>
     306:	0e 94 59 00 	call	0xb2	; 0xb2 <writeEEPROM>
		writeEEPROM(servo3, 6);													// registro de memoria (2, 6, 10 y 14)
     30a:	66 e0       	ldi	r22, 0x06	; 6
     30c:	70 e0       	ldi	r23, 0x00	; 0
     30e:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <servo3>
     312:	0e 94 59 00 	call	0xb2	; 0xb2 <writeEEPROM>
		writeEEPROM(servo4, 7);
     316:	67 e0       	ldi	r22, 0x07	; 7
     318:	70 e0       	ldi	r23, 0x00	; 0
     31a:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <servo4>
     31e:	0e 94 59 00 	call	0xb2	; 0xb2 <writeEEPROM>
		break;
     322:	49 c0       	rjmp	.+146    	; 0x3b6 <guardar+0x13e>
		case 2:
		PORTC &= ~(1 << PORTC0);
     324:	88 b1       	in	r24, 0x08	; 8
     326:	8e 7f       	andi	r24, 0xFE	; 254
     328:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC5);
     32a:	88 b1       	in	r24, 0x08	; 8
     32c:	8f 7d       	andi	r24, 0xDF	; 223
     32e:	88 b9       	out	0x08, r24	; 8
		PORTD |= (1 << PORTD7);
     330:	8b b1       	in	r24, 0x0b	; 11
     332:	80 68       	ori	r24, 0x80	; 128
     334:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1 << PORTD2);
     336:	8b b1       	in	r24, 0x0b	; 11
     338:	8b 7f       	andi	r24, 0xFB	; 251
     33a:	8b b9       	out	0x0b, r24	; 11
		writeEEPROM(servo1, 8);													// registro de memoria (0, 4, 8 y 12)
     33c:	68 e0       	ldi	r22, 0x08	; 8
     33e:	70 e0       	ldi	r23, 0x00	; 0
     340:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <servo1>
     344:	0e 94 59 00 	call	0xb2	; 0xb2 <writeEEPROM>
		writeEEPROM(servo2, 9);													// registro de memoria (1, 5, 9 y 13)
     348:	69 e0       	ldi	r22, 0x09	; 9
     34a:	70 e0       	ldi	r23, 0x00	; 0
     34c:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <servo2>
     350:	0e 94 59 00 	call	0xb2	; 0xb2 <writeEEPROM>
		writeEEPROM(servo3, 10);													// registro de memoria (2, 6, 10 y 14)
     354:	6a e0       	ldi	r22, 0x0A	; 10
     356:	70 e0       	ldi	r23, 0x00	; 0
     358:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <servo3>
     35c:	0e 94 59 00 	call	0xb2	; 0xb2 <writeEEPROM>
		writeEEPROM(servo4, 11);
     360:	6b e0       	ldi	r22, 0x0B	; 11
     362:	70 e0       	ldi	r23, 0x00	; 0
     364:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <servo4>
     368:	0e 94 59 00 	call	0xb2	; 0xb2 <writeEEPROM>
		break;
     36c:	24 c0       	rjmp	.+72     	; 0x3b6 <guardar+0x13e>
		case 3:
		PORTC &= ~(1 << PORTC0);
     36e:	88 b1       	in	r24, 0x08	; 8
     370:	8e 7f       	andi	r24, 0xFE	; 254
     372:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC5);
     374:	88 b1       	in	r24, 0x08	; 8
     376:	8f 7d       	andi	r24, 0xDF	; 223
     378:	88 b9       	out	0x08, r24	; 8
		PORTD &= ~(1 << PORTD7);
     37a:	8b b1       	in	r24, 0x0b	; 11
     37c:	8f 77       	andi	r24, 0x7F	; 127
     37e:	8b b9       	out	0x0b, r24	; 11
		PORTD |= (1 << PORTD2);
     380:	8b b1       	in	r24, 0x0b	; 11
     382:	84 60       	ori	r24, 0x04	; 4
     384:	8b b9       	out	0x0b, r24	; 11
		writeEEPROM(servo1, 12);													// registro de memoria (0, 4, 8 y 12)
     386:	6c e0       	ldi	r22, 0x0C	; 12
     388:	70 e0       	ldi	r23, 0x00	; 0
     38a:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <servo1>
     38e:	0e 94 59 00 	call	0xb2	; 0xb2 <writeEEPROM>
		writeEEPROM(servo2, 13);													// registro de memoria (1, 5, 9 y 13)
     392:	6d e0       	ldi	r22, 0x0D	; 13
     394:	70 e0       	ldi	r23, 0x00	; 0
     396:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <servo2>
     39a:	0e 94 59 00 	call	0xb2	; 0xb2 <writeEEPROM>
		writeEEPROM(servo3, 14);													// registro de memoria (2, 6, 10 y 14)
     39e:	6e e0       	ldi	r22, 0x0E	; 14
     3a0:	70 e0       	ldi	r23, 0x00	; 0
     3a2:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <servo3>
     3a6:	0e 94 59 00 	call	0xb2	; 0xb2 <writeEEPROM>
		writeEEPROM(servo4, 15);
     3aa:	6f e0       	ldi	r22, 0x0F	; 15
     3ac:	70 e0       	ldi	r23, 0x00	; 0
     3ae:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <servo4>
     3b2:	0e 94 59 00 	call	0xb2	; 0xb2 <writeEEPROM>
		break;
	}
	contador_pos = (contador_pos + 1) % 4;
     3b6:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <contador_pos>
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	01 96       	adiw	r24, 0x01	; 1
     3be:	83 70       	andi	r24, 0x03	; 3
     3c0:	90 78       	andi	r25, 0x80	; 128
     3c2:	99 23       	and	r25, r25
     3c4:	24 f4       	brge	.+8      	; 0x3ce <guardar+0x156>
     3c6:	01 97       	sbiw	r24, 0x01	; 1
     3c8:	8c 6f       	ori	r24, 0xFC	; 252
     3ca:	9f 6f       	ori	r25, 0xFF	; 255
     3cc:	01 96       	adiw	r24, 0x01	; 1
     3ce:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <contador_pos>
     3d2:	08 95       	ret

000003d4 <mostrar>:
}

void mostrar()
{
	
	switch(pos_actual)
     3d4:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <pos_actual>
     3d8:	81 30       	cpi	r24, 0x01	; 1
     3da:	79 f1       	breq	.+94     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
     3dc:	38 f0       	brcs	.+14     	; 0x3ec <mostrar+0x18>
     3de:	82 30       	cpi	r24, 0x02	; 2
     3e0:	09 f4       	brne	.+2      	; 0x3e4 <mostrar+0x10>
     3e2:	52 c0       	rjmp	.+164    	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
     3e4:	83 30       	cpi	r24, 0x03	; 3
     3e6:	09 f4       	brne	.+2      	; 0x3ea <mostrar+0x16>
     3e8:	76 c0       	rjmp	.+236    	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
     3ea:	9b c0       	rjmp	.+310    	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>
	{
		case 0:
		PORTC &= ~(1 << PORTC0);
     3ec:	88 b1       	in	r24, 0x08	; 8
     3ee:	8e 7f       	andi	r24, 0xFE	; 254
     3f0:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC5);
     3f2:	88 b1       	in	r24, 0x08	; 8
     3f4:	8f 7d       	andi	r24, 0xDF	; 223
     3f6:	88 b9       	out	0x08, r24	; 8
		PORTD &= ~(1 << PORTD7);
     3f8:	8b b1       	in	r24, 0x0b	; 11
     3fa:	8f 77       	andi	r24, 0x7F	; 127
     3fc:	8b b9       	out	0x0b, r24	; 11
		PORTD |= (1 << PORTD2);
     3fe:	8b b1       	in	r24, 0x0b	; 11
     400:	84 60       	ori	r24, 0x04	; 4
     402:	8b b9       	out	0x0b, r24	; 11
		pulso_PWM1(readEEPROM(0));												// Posiciones 0, 4, 8 y 12 para servo1
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	0e 94 65 00 	call	0xca	; 0xca <readEEPROM>
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <pulso_PWM1>
		pulso2_PWM1(readEEPROM(1));
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	0e 94 65 00 	call	0xca	; 0xca <readEEPROM>
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	0e 94 0b 04 	call	0x816	; 0x816 <pulso2_PWM1>
		pulse_PWM2(readEEPROM(2));
     420:	82 e0       	ldi	r24, 0x02	; 2
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	0e 94 65 00 	call	0xca	; 0xca <readEEPROM>
     428:	0e 94 39 04 	call	0x872	; 0x872 <pulse_PWM2>
		pulse2_PWM2(readEEPROM(3));
     42c:	83 e0       	ldi	r24, 0x03	; 3
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	0e 94 65 00 	call	0xca	; 0xca <readEEPROM>
     434:	0e 94 50 04 	call	0x8a0	; 0x8a0 <pulse2_PWM2>
		break;
     438:	74 c0       	rjmp	.+232    	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>
		case 1:
		PORTC &= ~(1 << PORTC0);
     43a:	88 b1       	in	r24, 0x08	; 8
     43c:	8e 7f       	andi	r24, 0xFE	; 254
     43e:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC5);
     440:	88 b1       	in	r24, 0x08	; 8
     442:	8f 7d       	andi	r24, 0xDF	; 223
     444:	88 b9       	out	0x08, r24	; 8
		PORTD |= (1 << PORTD7);
     446:	8b b1       	in	r24, 0x0b	; 11
     448:	80 68       	ori	r24, 0x80	; 128
     44a:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1 << PORTD2);
     44c:	8b b1       	in	r24, 0x0b	; 11
     44e:	8b 7f       	andi	r24, 0xFB	; 251
     450:	8b b9       	out	0x0b, r24	; 11
		pulso_PWM1(readEEPROM(4));
     452:	84 e0       	ldi	r24, 0x04	; 4
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	0e 94 65 00 	call	0xca	; 0xca <readEEPROM>
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <pulso_PWM1>
		pulso2_PWM1(readEEPROM(5));												// Posiciones 1, 5, 9 y 13 para servo2
     460:	85 e0       	ldi	r24, 0x05	; 5
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	0e 94 65 00 	call	0xca	; 0xca <readEEPROM>
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	0e 94 0b 04 	call	0x816	; 0x816 <pulso2_PWM1>
		pulse_PWM2(readEEPROM(6));
     46e:	86 e0       	ldi	r24, 0x06	; 6
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	0e 94 65 00 	call	0xca	; 0xca <readEEPROM>
     476:	0e 94 39 04 	call	0x872	; 0x872 <pulse_PWM2>
		pulse2_PWM2(readEEPROM(7));
     47a:	87 e0       	ldi	r24, 0x07	; 7
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	0e 94 65 00 	call	0xca	; 0xca <readEEPROM>
     482:	0e 94 50 04 	call	0x8a0	; 0x8a0 <pulse2_PWM2>
		break;
     486:	4d c0       	rjmp	.+154    	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>
		case 2:
		PORTC |= (1 << PORTC0);
     488:	88 b1       	in	r24, 0x08	; 8
     48a:	81 60       	ori	r24, 0x01	; 1
     48c:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC5);
     48e:	88 b1       	in	r24, 0x08	; 8
     490:	8f 7d       	andi	r24, 0xDF	; 223
     492:	88 b9       	out	0x08, r24	; 8
		PORTD &= ~(1 << PORTD7);
     494:	8b b1       	in	r24, 0x0b	; 11
     496:	8f 77       	andi	r24, 0x7F	; 127
     498:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1 << PORTD2);
     49a:	8b b1       	in	r24, 0x0b	; 11
     49c:	8b 7f       	andi	r24, 0xFB	; 251
     49e:	8b b9       	out	0x0b, r24	; 11
		pulso_PWM1(readEEPROM(8));
     4a0:	88 e0       	ldi	r24, 0x08	; 8
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	0e 94 65 00 	call	0xca	; 0xca <readEEPROM>
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <pulso_PWM1>
		pulso2_PWM1(readEEPROM(9));
     4ae:	89 e0       	ldi	r24, 0x09	; 9
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	0e 94 65 00 	call	0xca	; 0xca <readEEPROM>
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	0e 94 0b 04 	call	0x816	; 0x816 <pulso2_PWM1>
		pulse_PWM2(readEEPROM(10));												// Posiciones 2, 6, 10 y 14 para servo3
     4bc:	8a e0       	ldi	r24, 0x0A	; 10
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	0e 94 65 00 	call	0xca	; 0xca <readEEPROM>
     4c4:	0e 94 39 04 	call	0x872	; 0x872 <pulse_PWM2>
		pulse2_PWM2(readEEPROM(11));
     4c8:	8b e0       	ldi	r24, 0x0B	; 11
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	0e 94 65 00 	call	0xca	; 0xca <readEEPROM>
     4d0:	0e 94 50 04 	call	0x8a0	; 0x8a0 <pulse2_PWM2>
		break;
     4d4:	26 c0       	rjmp	.+76     	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>
		case 3:
		PORTC &= ~(1 << PORTC0);
     4d6:	88 b1       	in	r24, 0x08	; 8
     4d8:	8e 7f       	andi	r24, 0xFE	; 254
     4da:	88 b9       	out	0x08, r24	; 8
		PORTC |= (1 << PORTC5);
     4dc:	88 b1       	in	r24, 0x08	; 8
     4de:	80 62       	ori	r24, 0x20	; 32
     4e0:	88 b9       	out	0x08, r24	; 8
		PORTD &= ~(1 << PORTD7);
     4e2:	8b b1       	in	r24, 0x0b	; 11
     4e4:	8f 77       	andi	r24, 0x7F	; 127
     4e6:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1 << PORTD2);
     4e8:	8b b1       	in	r24, 0x0b	; 11
     4ea:	8b 7f       	andi	r24, 0xFB	; 251
     4ec:	8b b9       	out	0x0b, r24	; 11
		pulso_PWM1(readEEPROM(12));
     4ee:	8c e0       	ldi	r24, 0x0C	; 12
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	0e 94 65 00 	call	0xca	; 0xca <readEEPROM>
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <pulso_PWM1>
		pulso2_PWM1(readEEPROM(13));
     4fc:	8d e0       	ldi	r24, 0x0D	; 13
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	0e 94 65 00 	call	0xca	; 0xca <readEEPROM>
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	0e 94 0b 04 	call	0x816	; 0x816 <pulso2_PWM1>
		pulse_PWM2(readEEPROM(14));
     50a:	8e e0       	ldi	r24, 0x0E	; 14
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	0e 94 65 00 	call	0xca	; 0xca <readEEPROM>
     512:	0e 94 39 04 	call	0x872	; 0x872 <pulse_PWM2>
		pulse2_PWM2(readEEPROM(15));												// Posiciones 3, 7, 11 y 15 para servo4
     516:	8f e0       	ldi	r24, 0x0F	; 15
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	0e 94 65 00 	call	0xca	; 0xca <readEEPROM>
     51e:	0e 94 50 04 	call	0x8a0	; 0x8a0 <pulse2_PWM2>
		break;
	}
	
	pos_actual = (pos_actual + 1) % 4;
     522:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <pos_actual>
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	01 96       	adiw	r24, 0x01	; 1
     52a:	83 70       	andi	r24, 0x03	; 3
     52c:	90 78       	andi	r25, 0x80	; 128
     52e:	99 23       	and	r25, r25
     530:	24 f4       	brge	.+8      	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
     532:	01 97       	sbiw	r24, 0x01	; 1
     534:	8c 6f       	ori	r24, 0xFC	; 252
     536:	9f 6f       	ori	r25, 0xFF	; 255
     538:	01 96       	adiw	r24, 0x01	; 1
     53a:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <pos_actual>
     53e:	08 95       	ret

00000540 <__vector_21>:
}

// Interrupt routines
ISR(ADC_vect)
{
     540:	1f 92       	push	r1
     542:	0f 92       	push	r0
     544:	0f b6       	in	r0, 0x3f	; 63
     546:	0f 92       	push	r0
     548:	11 24       	eor	r1, r1
     54a:	2f 93       	push	r18
     54c:	3f 93       	push	r19
     54e:	4f 93       	push	r20
     550:	5f 93       	push	r21
     552:	6f 93       	push	r22
     554:	7f 93       	push	r23
     556:	8f 93       	push	r24
     558:	9f 93       	push	r25
     55a:	af 93       	push	r26
     55c:	bf 93       	push	r27
     55e:	ef 93       	push	r30
     560:	ff 93       	push	r31

	adc_value = ADCH;																	// le cargo el valor del ADCH a adc_value
     562:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     566:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <adc_value>
	
	switch (alternador)
     56a:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <alternador>
     56e:	81 30       	cpi	r24, 0x01	; 1
     570:	51 f1       	breq	.+84     	; 0x5c6 <__vector_21+0x86>
     572:	38 f0       	brcs	.+14     	; 0x582 <__vector_21+0x42>
     574:	82 30       	cpi	r24, 0x02	; 2
     576:	09 f4       	brne	.+2      	; 0x57a <__vector_21+0x3a>
     578:	4b c0       	rjmp	.+150    	; 0x610 <__vector_21+0xd0>
     57a:	83 30       	cpi	r24, 0x03	; 3
     57c:	09 f4       	brne	.+2      	; 0x580 <__vector_21+0x40>
     57e:	69 c0       	rjmp	.+210    	; 0x652 <__vector_21+0x112>
     580:	87 c0       	rjmp	.+270    	; 0x690 <__vector_21+0x150>
	{
		
		case 0:

		alternador = 1;																	// Servo1 en PB1
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <alternador>
		ADMUX = 0;																		// LIMPIAR REGISTRO
     588:	ec e7       	ldi	r30, 0x7C	; 124
     58a:	f0 e0       	ldi	r31, 0x00	; 0
     58c:	10 82       	st	Z, r1
		ADMUX |= (1 << REFS0);															// utilizar AVcc como referencia (5v)
     58e:	80 81       	ld	r24, Z
     590:	80 64       	ori	r24, 0x40	; 64
     592:	80 83       	st	Z, r24
		ADMUX |= (1 << ADLAR);															// justificado a la izquierda (y leo 8 bits mas significativos)
     594:	80 81       	ld	r24, Z
     596:	80 62       	ori	r24, 0x20	; 32
     598:	80 83       	st	Z, r24
		ADMUX |= (1 << MUX1);															// utilizar PC2 para potenciometro 2 (MUX1)
     59a:	80 81       	ld	r24, Z
     59c:	82 60       	ori	r24, 0x02	; 2
     59e:	80 83       	st	Z, r24
		
		pot1 = adc_value;
     5a0:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <adc_value>
     5a4:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <pot1>
		servo1 = (pot1 * 180 / 255);													// convertir adc en angulo
     5a8:	24 eb       	ldi	r18, 0xB4	; 180
     5aa:	82 9f       	mul	r24, r18
     5ac:	c0 01       	movw	r24, r0
     5ae:	11 24       	eor	r1, r1
     5b0:	6f ef       	ldi	r22, 0xFF	; 255
     5b2:	70 e0       	ldi	r23, 0x00	; 0
     5b4:	0e 94 31 06 	call	0xc62	; 0xc62 <__divmodhi4>
     5b8:	60 93 f5 01 	sts	0x01F5, r22	; 0x8001f5 <servo1>
		pulso_PWM1(servo1);																// ajustar ancho de pulso
     5bc:	86 2f       	mov	r24, r22
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <pulso_PWM1>
		
		break;
     5c4:	65 c0       	rjmp	.+202    	; 0x690 <__vector_21+0x150>
		
		case 1:
		alternador = 2;																	// Servo2 en PB2
     5c6:	82 e0       	ldi	r24, 0x02	; 2
     5c8:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <alternador>
		
		ADMUX = 0;																		// LIMPIAR REGISTRO
     5cc:	ec e7       	ldi	r30, 0x7C	; 124
     5ce:	f0 e0       	ldi	r31, 0x00	; 0
     5d0:	10 82       	st	Z, r1
		ADMUX |= (1 << REFS0);															// utilizar AVcc como referencia (5v)
     5d2:	80 81       	ld	r24, Z
     5d4:	80 64       	ori	r24, 0x40	; 64
     5d6:	80 83       	st	Z, r24
		ADMUX |= (1 << ADLAR);
     5d8:	80 81       	ld	r24, Z
     5da:	80 62       	ori	r24, 0x20	; 32
     5dc:	80 83       	st	Z, r24
		ADMUX |= (1 << MUX0);															// PC3 como entrada (MUX0 y MUX1)
     5de:	80 81       	ld	r24, Z
     5e0:	81 60       	ori	r24, 0x01	; 1
     5e2:	80 83       	st	Z, r24
		ADMUX |= (1 << MUX1);
     5e4:	80 81       	ld	r24, Z
     5e6:	82 60       	ori	r24, 0x02	; 2
     5e8:	80 83       	st	Z, r24
		
		pot2 = adc_value;
     5ea:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <adc_value>
     5ee:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <pot2>
		servo2 = (pot2 * 180 / 255);
     5f2:	24 eb       	ldi	r18, 0xB4	; 180
     5f4:	82 9f       	mul	r24, r18
     5f6:	c0 01       	movw	r24, r0
     5f8:	11 24       	eor	r1, r1
     5fa:	6f ef       	ldi	r22, 0xFF	; 255
     5fc:	70 e0       	ldi	r23, 0x00	; 0
     5fe:	0e 94 31 06 	call	0xc62	; 0xc62 <__divmodhi4>
     602:	60 93 fa 01 	sts	0x01FA, r22	; 0x8001fa <servo2>
		pulso2_PWM1(servo2);
     606:	86 2f       	mov	r24, r22
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	0e 94 0b 04 	call	0x816	; 0x816 <pulso2_PWM1>
		
		break;
     60e:	40 c0       	rjmp	.+128    	; 0x690 <__vector_21+0x150>
		
		case 2:
		alternador = 3;																	// Servo3 en PB3
     610:	83 e0       	ldi	r24, 0x03	; 3
     612:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <alternador>
		
		ADMUX = 0;																		// LIMPIAR REGISTRO
     616:	ec e7       	ldi	r30, 0x7C	; 124
     618:	f0 e0       	ldi	r31, 0x00	; 0
     61a:	10 82       	st	Z, r1
		ADMUX |= (1 << REFS0);															// utilizar AVcc como referencia (5v)
     61c:	80 81       	ld	r24, Z
     61e:	80 64       	ori	r24, 0x40	; 64
     620:	80 83       	st	Z, r24
		ADMUX |= (1 << ADLAR);
     622:	80 81       	ld	r24, Z
     624:	80 62       	ori	r24, 0x20	; 32
     626:	80 83       	st	Z, r24
		ADMUX |= (1 << MUX2);															// PC4 como entrada (pot4)
     628:	80 81       	ld	r24, Z
     62a:	84 60       	ori	r24, 0x04	; 4
     62c:	80 83       	st	Z, r24
		
		pot3 = adc_value;
     62e:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <adc_value>
     632:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <pot3>
		servo3 = (pot3 * 180 / 255);
     636:	24 eb       	ldi	r18, 0xB4	; 180
     638:	82 9f       	mul	r24, r18
     63a:	c0 01       	movw	r24, r0
     63c:	11 24       	eor	r1, r1
     63e:	6f ef       	ldi	r22, 0xFF	; 255
     640:	70 e0       	ldi	r23, 0x00	; 0
     642:	0e 94 31 06 	call	0xc62	; 0xc62 <__divmodhi4>
     646:	86 2f       	mov	r24, r22
     648:	60 93 e2 01 	sts	0x01E2, r22	; 0x8001e2 <servo3>
		pulse_PWM2(servo3);
     64c:	0e 94 39 04 	call	0x872	; 0x872 <pulse_PWM2>
		
		break;
     650:	1f c0       	rjmp	.+62     	; 0x690 <__vector_21+0x150>
		
		case 3:
		alternador = 0;																	// Servo4 en PD3
     652:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <alternador>
		
		ADMUX = 0;																		// LIMPIAR REGISTRO
     656:	ec e7       	ldi	r30, 0x7C	; 124
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	10 82       	st	Z, r1
		ADMUX |= (1 << REFS0);															// utilizar AVcc como referencia (5v)
     65c:	80 81       	ld	r24, Z
     65e:	80 64       	ori	r24, 0x40	; 64
     660:	80 83       	st	Z, r24
		ADMUX |= (1 << ADLAR);
     662:	80 81       	ld	r24, Z
     664:	80 62       	ori	r24, 0x20	; 32
     666:	80 83       	st	Z, r24
		ADMUX |= (1 << MUX0);															// Regresamos a pot1 (PC1)
     668:	80 81       	ld	r24, Z
     66a:	81 60       	ori	r24, 0x01	; 1
     66c:	80 83       	st	Z, r24
		
		pot4 =  adc_value;
     66e:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <adc_value>
     672:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <pot4>
		servo4 = (pot4 * 180 / 255);
     676:	24 eb       	ldi	r18, 0xB4	; 180
     678:	82 9f       	mul	r24, r18
     67a:	c0 01       	movw	r24, r0
     67c:	11 24       	eor	r1, r1
     67e:	6f ef       	ldi	r22, 0xFF	; 255
     680:	70 e0       	ldi	r23, 0x00	; 0
     682:	0e 94 31 06 	call	0xc62	; 0xc62 <__divmodhi4>
     686:	86 2f       	mov	r24, r22
     688:	60 93 f6 01 	sts	0x01F6, r22	; 0x8001f6 <servo4>
		pulse2_PWM2(servo4);
     68c:	0e 94 50 04 	call	0x8a0	; 0x8a0 <pulse2_PWM2>
		
		break;
		
	}
	
}
     690:	ff 91       	pop	r31
     692:	ef 91       	pop	r30
     694:	bf 91       	pop	r27
     696:	af 91       	pop	r26
     698:	9f 91       	pop	r25
     69a:	8f 91       	pop	r24
     69c:	7f 91       	pop	r23
     69e:	6f 91       	pop	r22
     6a0:	5f 91       	pop	r21
     6a2:	4f 91       	pop	r20
     6a4:	3f 91       	pop	r19
     6a6:	2f 91       	pop	r18
     6a8:	0f 90       	pop	r0
     6aa:	0f be       	out	0x3f, r0	; 63
     6ac:	0f 90       	pop	r0
     6ae:	1f 90       	pop	r1
     6b0:	18 95       	reti

000006b2 <__vector_18>:

ISR(USART_RX_vect)
{
     6b2:	1f 92       	push	r1
     6b4:	0f 92       	push	r0
     6b6:	0f b6       	in	r0, 0x3f	; 63
     6b8:	0f 92       	push	r0
     6ba:	11 24       	eor	r1, r1
     6bc:	8f 93       	push	r24
     6be:	9f 93       	push	r25
     6c0:	ef 93       	push	r30
     6c2:	ff 93       	push	r31
	signal = UDR0;																		// leer caracter enviado a la terminal
     6c4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     6c8:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <signal>
	
	if (signal != '\n' && caracteres < 15)												// si no presiono enter ni escribo mas de 15 caracteres pasa lo de abajo
     6cc:	8a 30       	cpi	r24, 0x0A	; 10
     6ce:	69 f0       	breq	.+26     	; 0x6ea <__vector_18+0x38>
     6d0:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <__data_end>
     6d4:	ef 30       	cpi	r30, 0x0F	; 15
     6d6:	48 f4       	brcc	.+18     	; 0x6ea <__vector_18+0x38>
	{
		buffer[caracteres++] = signal;													// guardo los datos que meti a la terminal en el buffer/string
     6d8:	91 e0       	ldi	r25, 0x01	; 1
     6da:	9e 0f       	add	r25, r30
     6dc:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <__data_end>
     6e0:	f0 e0       	ldi	r31, 0x00	; 0
     6e2:	eb 51       	subi	r30, 0x1B	; 27
     6e4:	fe 4f       	sbci	r31, 0xFE	; 254
     6e6:	80 83       	st	Z, r24
     6e8:	0b c0       	rjmp	.+22     	; 0x700 <__vector_18+0x4e>
	}
	else
	{
		serial = 1;																		// enciendo flag para el main
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <serial>
		buffer[caracteres] = '\0';														// cierro cadena (es como poner . al final de la oracion)
     6f0:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <__data_end>
     6f4:	f0 e0       	ldi	r31, 0x00	; 0
     6f6:	eb 51       	subi	r30, 0x1B	; 27
     6f8:	fe 4f       	sbci	r31, 0xFE	; 254
     6fa:	10 82       	st	Z, r1
		caracteres = 0;																	// limpio variable para proxima vez
     6fc:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <__data_end>
	}
}
     700:	ff 91       	pop	r31
     702:	ef 91       	pop	r30
     704:	9f 91       	pop	r25
     706:	8f 91       	pop	r24
     708:	0f 90       	pop	r0
     70a:	0f be       	out	0x3f, r0	; 63
     70c:	0f 90       	pop	r0
     70e:	1f 90       	pop	r1
     710:	18 95       	reti

00000712 <__vector_5>:

ISR(PCINT2_vect)
{
     712:	1f 92       	push	r1
     714:	0f 92       	push	r0
     716:	0f b6       	in	r0, 0x3f	; 63
     718:	0f 92       	push	r0
     71a:	11 24       	eor	r1, r1
     71c:	2f 93       	push	r18
     71e:	3f 93       	push	r19
     720:	4f 93       	push	r20
     722:	5f 93       	push	r21
     724:	6f 93       	push	r22
     726:	7f 93       	push	r23
     728:	8f 93       	push	r24
     72a:	9f 93       	push	r25
     72c:	af 93       	push	r26
     72e:	bf 93       	push	r27
     730:	ef 93       	push	r30
     732:	ff 93       	push	r31
	//---------Guardar posicion EEPROM----------//
	if (!(PIND & (1 << PORTD4)) && bandera_guardar == 0)									// Si se presiona el boton y todavia no se ha terminado de procesar la pulsación
     734:	4c 99       	sbic	0x09, 4	; 9
     736:	0a c0       	rjmp	.+20     	; 0x74c <__vector_5+0x3a>
     738:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <bandera_guardar>
     73c:	81 11       	cpse	r24, r1
     73e:	06 c0       	rjmp	.+12     	; 0x74c <__vector_5+0x3a>
	{
		bandera_guardar = 1;
     740:	81 e0       	ldi	r24, 0x01	; 1
     742:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <bandera_guardar>
		guardar();
     746:	0e 94 3c 01 	call	0x278	; 0x278 <guardar>
     74a:	02 c0       	rjmp	.+4      	; 0x750 <__vector_5+0x3e>
		} else {
		bandera_guardar = 0;
     74c:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <bandera_guardar>
	}
	
	//---------Mostrar posicion EEPROM----------//
	if (!(PIND & (1 << PORTD5)) && bandera_mostrar == 0)
     750:	4d 99       	sbic	0x09, 5	; 9
     752:	0a c0       	rjmp	.+20     	; 0x768 <__vector_5+0x56>
     754:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <bandera_mostrar>
     758:	81 11       	cpse	r24, r1
     75a:	06 c0       	rjmp	.+12     	; 0x768 <__vector_5+0x56>
	{
		bandera_mostrar = 1;
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <bandera_mostrar>
		mostrar();
     762:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <mostrar>
     766:	02 c0       	rjmp	.+4      	; 0x76c <__vector_5+0x5a>
		} else{
		bandera_mostrar = 0;
     768:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <bandera_mostrar>
	}
	
	//------------Cambio de modo--------------//
	if (!(PIND &(1 << PORTD6)) && antonio_banderas == 0)														// Si se apacha PD4 se le suma 1 a modo (es decir cambia de modo)
     76c:	4e 99       	sbic	0x09, 6	; 9
     76e:	12 c0       	rjmp	.+36     	; 0x794 <__vector_5+0x82>
     770:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <antonio_banderas>
     774:	81 11       	cpse	r24, r1
     776:	0e c0       	rjmp	.+28     	; 0x794 <__vector_5+0x82>
	{
		antonio_banderas = 1;
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <antonio_banderas>
		modo = (modo + 1) %3;
     77e:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <modo>
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	01 96       	adiw	r24, 0x01	; 1
     786:	63 e0       	ldi	r22, 0x03	; 3
     788:	70 e0       	ldi	r23, 0x00	; 0
     78a:	0e 94 31 06 	call	0xc62	; 0xc62 <__divmodhi4>
     78e:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <modo>
     792:	02 c0       	rjmp	.+4      	; 0x798 <__vector_5+0x86>
		} else{
		antonio_banderas = 0;
     794:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <antonio_banderas>
	}
}
     798:	ff 91       	pop	r31
     79a:	ef 91       	pop	r30
     79c:	bf 91       	pop	r27
     79e:	af 91       	pop	r26
     7a0:	9f 91       	pop	r25
     7a2:	8f 91       	pop	r24
     7a4:	7f 91       	pop	r23
     7a6:	6f 91       	pop	r22
     7a8:	5f 91       	pop	r21
     7aa:	4f 91       	pop	r20
     7ac:	3f 91       	pop	r19
     7ae:	2f 91       	pop	r18
     7b0:	0f 90       	pop	r0
     7b2:	0f be       	out	0x3f, r0	; 63
     7b4:	0f 90       	pop	r0
     7b6:	1f 90       	pop	r1
     7b8:	18 95       	reti

000007ba <init_PWM1>:
// Librerias
#include "pwm1.h"

// NON-Interrupt subroutines
// El PWM sirve para el servomotor, este genera una señal que hace que se mueva
void init_PWM1(uint16_t TOP){
     7ba:	9c 01       	movw	r18, r24
	DDRB |= (1 << PORTB1) | (1 << PORTB2);										// Salida para servo1 (PB1) Y servo 2 (PB2)
     7bc:	94 b1       	in	r25, 0x04	; 4
     7be:	96 60       	ori	r25, 0x06	; 6
     7c0:	94 b9       	out	0x04, r25	; 4
	TCCR1A = 0;																	// LIMPIAR TCCRA
     7c2:	e0 e8       	ldi	r30, 0x80	; 128
     7c4:	f0 e0       	ldi	r31, 0x00	; 0
     7c6:	10 82       	st	Z, r1
	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11);						// Polaridad no invertido (OC1A para servo1 y OC1B para servo2) y fast pwm (parte baja)
     7c8:	82 ea       	ldi	r24, 0xA2	; 162
     7ca:	80 83       	st	Z, r24
	TCCR1B = 0;																	// LIMPIAR TCCRB
     7cc:	e1 e8       	ldi	r30, 0x81	; 129
     7ce:	f0 e0       	ldi	r31, 0x00	; 0
     7d0:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM13) | (1 << WGM12);										// MODO FAST PWM (parte alta)
     7d2:	88 e1       	ldi	r24, 0x18	; 24
     7d4:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS11);														// PRESCALER PWM 8
     7d6:	90 81       	ld	r25, Z
     7d8:	92 60       	ori	r25, 0x02	; 2
     7da:	90 83       	st	Z, r25
	//TCCR1B |= (1 << ICNC1);														// noise canceler
	ICR1 = TOP;																	// valor maximo para ICR1 "19999"
     7dc:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     7e0:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     7e4:	08 95       	ret

000007e6 <pulso_PWM1>:
}

// El registro OCR1A revisa cuanto dura el pulso en PB1 (servo) en cada ciclo PWM, el servo lee el pulso y se mueve segun la posicion que le diga
void pulso_PWM1(uint16_t pulso){
	//OCR1A = 1000 + ((uint32_t)pulso * 4000 / 180);
	OCR1A = 20.05 * (float)pulso + 1200.0;
     7e6:	bc 01       	movw	r22, r24
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	0e 94 36 05 	call	0xa6c	; 0xa6c <__floatunsisf>
     7f0:	26 e6       	ldi	r18, 0x66	; 102
     7f2:	36 e6       	ldi	r19, 0x66	; 102
     7f4:	40 ea       	ldi	r20, 0xA0	; 160
     7f6:	51 e4       	ldi	r21, 0x41	; 65
     7f8:	0e 94 c4 05 	call	0xb88	; 0xb88 <__mulsf3>
     7fc:	20 e0       	ldi	r18, 0x00	; 0
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	46 e9       	ldi	r20, 0x96	; 150
     802:	54 e4       	ldi	r21, 0x44	; 68
     804:	0e 94 9b 04 	call	0x936	; 0x936 <__addsf3>
     808:	0e 94 07 05 	call	0xa0e	; 0xa0e <__fixunssfsi>
     80c:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     810:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     814:	08 95       	ret

00000816 <pulso2_PWM1>:
}

void pulso2_PWM1(uint16_t angle)
{
	//OCR1B = 1000 + ((uint32_t)angle * 4000 / 180);
	OCR1B = 19.05 * (float)angle + 1200.0;
     816:	bc 01       	movw	r22, r24
     818:	80 e0       	ldi	r24, 0x00	; 0
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	0e 94 36 05 	call	0xa6c	; 0xa6c <__floatunsisf>
     820:	26 e6       	ldi	r18, 0x66	; 102
     822:	36 e6       	ldi	r19, 0x66	; 102
     824:	48 e9       	ldi	r20, 0x98	; 152
     826:	51 e4       	ldi	r21, 0x41	; 65
     828:	0e 94 c4 05 	call	0xb88	; 0xb88 <__mulsf3>
     82c:	20 e0       	ldi	r18, 0x00	; 0
     82e:	30 e0       	ldi	r19, 0x00	; 0
     830:	46 e9       	ldi	r20, 0x96	; 150
     832:	54 e4       	ldi	r21, 0x44	; 68
     834:	0e 94 9b 04 	call	0x936	; 0x936 <__addsf3>
     838:	0e 94 07 05 	call	0xa0e	; 0xa0e <__fixunssfsi>
     83c:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     840:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
     844:	08 95       	ret

00000846 <init_PWM2>:
uint8_t servo3;
uint8_t servo4;

// NON-Interrupt subroutines
void init_PWM2(void){
	DDRB |= (1 << PORTB3);																// Salida servo3
     846:	84 b1       	in	r24, 0x04	; 4
     848:	88 60       	ori	r24, 0x08	; 8
     84a:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << PORTD3);																// salida servo4
     84c:	8a b1       	in	r24, 0x0a	; 10
     84e:	88 60       	ori	r24, 0x08	; 8
     850:	8a b9       	out	0x0a, r24	; 10
	TCCR2A = 0;																			// LIMPIAR TCCR2A
     852:	e0 eb       	ldi	r30, 0xB0	; 176
     854:	f0 e0       	ldi	r31, 0x00	; 0
     856:	10 82       	st	Z, r1
	TCCR2A |= (1 << COM2A1) | (1 << COM2B1);											// non inverting fast pwm (COM2A1 para servo3 y COM2B1 para servo4)
     858:	80 81       	ld	r24, Z
     85a:	80 6a       	ori	r24, 0xA0	; 160
     85c:	80 83       	st	Z, r24
	TCCR2A |= (1 << WGM20) | (1 << WGM21);												// fast pwm
     85e:	80 81       	ld	r24, Z
     860:	83 60       	ori	r24, 0x03	; 3
     862:	80 83       	st	Z, r24
	TCCR2B = 0;																			// LIMPIAR TCCR2B
     864:	e1 eb       	ldi	r30, 0xB1	; 177
     866:	f0 e0       	ldi	r31, 0x00	; 0
     868:	10 82       	st	Z, r1
	TCCR2B |= (1 << CS22) | (1 << CS21)	|(1 << CS20);									// PRESCALER 1024
     86a:	80 81       	ld	r24, Z
     86c:	87 60       	ori	r24, 0x07	; 7
     86e:	80 83       	st	Z, r24
     870:	08 95       	ret

00000872 <pulse_PWM2>:
	
}

void pulse_PWM2(uint8_t angle3)
{
	OCR2A = 0.19 * (float)angle3 + 5.0;												// 0.19 - 180
     872:	68 2f       	mov	r22, r24
     874:	70 e0       	ldi	r23, 0x00	; 0
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	0e 94 36 05 	call	0xa6c	; 0xa6c <__floatunsisf>
     87e:	2c e5       	ldi	r18, 0x5C	; 92
     880:	3f e8       	ldi	r19, 0x8F	; 143
     882:	42 e4       	ldi	r20, 0x42	; 66
     884:	5e e3       	ldi	r21, 0x3E	; 62
     886:	0e 94 c4 05 	call	0xb88	; 0xb88 <__mulsf3>
     88a:	20 e0       	ldi	r18, 0x00	; 0
     88c:	30 e0       	ldi	r19, 0x00	; 0
     88e:	40 ea       	ldi	r20, 0xA0	; 160
     890:	50 e4       	ldi	r21, 0x40	; 64
     892:	0e 94 9b 04 	call	0x936	; 0x936 <__addsf3>
     896:	0e 94 07 05 	call	0xa0e	; 0xa0e <__fixunssfsi>
     89a:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     89e:	08 95       	ret

000008a0 <pulse2_PWM2>:
}

void pulse2_PWM2(uint8_t angle4)
{
	OCR2B = 0.19 * (float)angle4 + 5.0;
     8a0:	68 2f       	mov	r22, r24
     8a2:	70 e0       	ldi	r23, 0x00	; 0
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	0e 94 36 05 	call	0xa6c	; 0xa6c <__floatunsisf>
     8ac:	2c e5       	ldi	r18, 0x5C	; 92
     8ae:	3f e8       	ldi	r19, 0x8F	; 143
     8b0:	42 e4       	ldi	r20, 0x42	; 66
     8b2:	5e e3       	ldi	r21, 0x3E	; 62
     8b4:	0e 94 c4 05 	call	0xb88	; 0xb88 <__mulsf3>
     8b8:	20 e0       	ldi	r18, 0x00	; 0
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	40 ea       	ldi	r20, 0xA0	; 160
     8be:	50 e4       	ldi	r21, 0x40	; 64
     8c0:	0e 94 9b 04 	call	0x936	; 0x936 <__addsf3>
     8c4:	0e 94 07 05 	call	0xa0e	; 0xa0e <__fixunssfsi>
     8c8:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     8cc:	08 95       	ret

000008ce <init_USART>:
//char signal;
// NON-Interrupt subroutines

void init_USART()
{
	DDRD |= (1 << DDD1);															// Tx como salida
     8ce:	8a b1       	in	r24, 0x0a	; 10
     8d0:	82 60       	ori	r24, 0x02	; 2
     8d2:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << DDD0);															// Rx como entrada
     8d4:	8a b1       	in	r24, 0x0a	; 10
     8d6:	8e 7f       	andi	r24, 0xFE	; 254
     8d8:	8a b9       	out	0x0a, r24	; 10
	
	UCSR0A = 0;																		// Configurar UCSR0A
     8da:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	
	UCSR0B |=  (1 << TXEN0) | (1 << RXEN0 ) | (1 << RXCIE0);						// habilitar bit para recibir, transmitir y habilitar interrupción
     8de:	e1 ec       	ldi	r30, 0xC1	; 193
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	80 81       	ld	r24, Z
     8e4:	88 69       	ori	r24, 0x98	; 152
     8e6:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);										// CHARACTER SIZE 8 BITS Y 1 STOP BIT
     8e8:	e2 ec       	ldi	r30, 0xC2	; 194
     8ea:	f0 e0       	ldi	r31, 0x00	; 0
     8ec:	80 81       	ld	r24, Z
     8ee:	86 60       	ori	r24, 0x06	; 6
     8f0:	80 83       	st	Z, r24
	UBRR0 = 51;																		// BAUD RATE 9600 0.2% DE ERROR
     8f2:	83 e3       	ldi	r24, 0x33	; 51
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     8fa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     8fe:	08 95       	ret

00000900 <WriteChar>:
}

void WriteChar(char j)
{
	//while((UCSR0A & (1 << UDRE0)) == 0);
	while(!(UCSR0A &(1 << UDRE0)));							// esperar a que se vacie el buffer (!= es no sea)
     900:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     904:	95 ff       	sbrs	r25, 5
     906:	fc cf       	rjmp	.-8      	; 0x900 <WriteChar>
	UDR0 = j;												// meter valor
     908:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     90c:	08 95       	ret

0000090e <cadena>:
}

void cadena(char* txt)												// el char* sirve para representar cadenas de texto
{
     90e:	0f 93       	push	r16
     910:	1f 93       	push	r17
     912:	cf 93       	push	r28
     914:	8c 01       	movw	r16, r24
	for (uint8_t i = 0; txt[i] != '\0'; i++)
     916:	c0 e0       	ldi	r28, 0x00	; 0
     918:	03 c0       	rjmp	.+6      	; 0x920 <cadena+0x12>
	{
		WriteChar(txt[i]);									// es como leer cada letra
     91a:	0e 94 80 04 	call	0x900	; 0x900 <WriteChar>
	UDR0 = j;												// meter valor
}

void cadena(char* txt)												// el char* sirve para representar cadenas de texto
{
	for (uint8_t i = 0; txt[i] != '\0'; i++)
     91e:	cf 5f       	subi	r28, 0xFF	; 255
     920:	f8 01       	movw	r30, r16
     922:	ec 0f       	add	r30, r28
     924:	f1 1d       	adc	r31, r1
     926:	80 81       	ld	r24, Z
     928:	81 11       	cpse	r24, r1
     92a:	f7 cf       	rjmp	.-18     	; 0x91a <cadena+0xc>
	{
		WriteChar(txt[i]);									// es como leer cada letra
	}
}
     92c:	cf 91       	pop	r28
     92e:	1f 91       	pop	r17
     930:	0f 91       	pop	r16
     932:	08 95       	ret

00000934 <__subsf3>:
     934:	50 58       	subi	r21, 0x80	; 128

00000936 <__addsf3>:
     936:	bb 27       	eor	r27, r27
     938:	aa 27       	eor	r26, r26
     93a:	0e 94 b2 04 	call	0x964	; 0x964 <__addsf3x>
     93e:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <__fp_round>
     942:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__fp_pscA>
     946:	38 f0       	brcs	.+14     	; 0x956 <__addsf3+0x20>
     948:	0e 94 83 05 	call	0xb06	; 0xb06 <__fp_pscB>
     94c:	20 f0       	brcs	.+8      	; 0x956 <__addsf3+0x20>
     94e:	39 f4       	brne	.+14     	; 0x95e <__addsf3+0x28>
     950:	9f 3f       	cpi	r25, 0xFF	; 255
     952:	19 f4       	brne	.+6      	; 0x95a <__addsf3+0x24>
     954:	26 f4       	brtc	.+8      	; 0x95e <__addsf3+0x28>
     956:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <__fp_nan>
     95a:	0e f4       	brtc	.+2      	; 0x95e <__addsf3+0x28>
     95c:	e0 95       	com	r30
     95e:	e7 fb       	bst	r30, 7
     960:	0c 94 73 05 	jmp	0xae6	; 0xae6 <__fp_inf>

00000964 <__addsf3x>:
     964:	e9 2f       	mov	r30, r25
     966:	0e 94 9b 05 	call	0xb36	; 0xb36 <__fp_split3>
     96a:	58 f3       	brcs	.-42     	; 0x942 <__addsf3+0xc>
     96c:	ba 17       	cp	r27, r26
     96e:	62 07       	cpc	r22, r18
     970:	73 07       	cpc	r23, r19
     972:	84 07       	cpc	r24, r20
     974:	95 07       	cpc	r25, r21
     976:	20 f0       	brcs	.+8      	; 0x980 <__addsf3x+0x1c>
     978:	79 f4       	brne	.+30     	; 0x998 <__addsf3x+0x34>
     97a:	a6 f5       	brtc	.+104    	; 0x9e4 <__addsf3x+0x80>
     97c:	0c 94 bd 05 	jmp	0xb7a	; 0xb7a <__fp_zero>
     980:	0e f4       	brtc	.+2      	; 0x984 <__addsf3x+0x20>
     982:	e0 95       	com	r30
     984:	0b 2e       	mov	r0, r27
     986:	ba 2f       	mov	r27, r26
     988:	a0 2d       	mov	r26, r0
     98a:	0b 01       	movw	r0, r22
     98c:	b9 01       	movw	r22, r18
     98e:	90 01       	movw	r18, r0
     990:	0c 01       	movw	r0, r24
     992:	ca 01       	movw	r24, r20
     994:	a0 01       	movw	r20, r0
     996:	11 24       	eor	r1, r1
     998:	ff 27       	eor	r31, r31
     99a:	59 1b       	sub	r21, r25
     99c:	99 f0       	breq	.+38     	; 0x9c4 <__addsf3x+0x60>
     99e:	59 3f       	cpi	r21, 0xF9	; 249
     9a0:	50 f4       	brcc	.+20     	; 0x9b6 <__addsf3x+0x52>
     9a2:	50 3e       	cpi	r21, 0xE0	; 224
     9a4:	68 f1       	brcs	.+90     	; 0xa00 <__addsf3x+0x9c>
     9a6:	1a 16       	cp	r1, r26
     9a8:	f0 40       	sbci	r31, 0x00	; 0
     9aa:	a2 2f       	mov	r26, r18
     9ac:	23 2f       	mov	r18, r19
     9ae:	34 2f       	mov	r19, r20
     9b0:	44 27       	eor	r20, r20
     9b2:	58 5f       	subi	r21, 0xF8	; 248
     9b4:	f3 cf       	rjmp	.-26     	; 0x99c <__addsf3x+0x38>
     9b6:	46 95       	lsr	r20
     9b8:	37 95       	ror	r19
     9ba:	27 95       	ror	r18
     9bc:	a7 95       	ror	r26
     9be:	f0 40       	sbci	r31, 0x00	; 0
     9c0:	53 95       	inc	r21
     9c2:	c9 f7       	brne	.-14     	; 0x9b6 <__addsf3x+0x52>
     9c4:	7e f4       	brtc	.+30     	; 0x9e4 <__addsf3x+0x80>
     9c6:	1f 16       	cp	r1, r31
     9c8:	ba 0b       	sbc	r27, r26
     9ca:	62 0b       	sbc	r22, r18
     9cc:	73 0b       	sbc	r23, r19
     9ce:	84 0b       	sbc	r24, r20
     9d0:	ba f0       	brmi	.+46     	; 0xa00 <__addsf3x+0x9c>
     9d2:	91 50       	subi	r25, 0x01	; 1
     9d4:	a1 f0       	breq	.+40     	; 0x9fe <__addsf3x+0x9a>
     9d6:	ff 0f       	add	r31, r31
     9d8:	bb 1f       	adc	r27, r27
     9da:	66 1f       	adc	r22, r22
     9dc:	77 1f       	adc	r23, r23
     9de:	88 1f       	adc	r24, r24
     9e0:	c2 f7       	brpl	.-16     	; 0x9d2 <__addsf3x+0x6e>
     9e2:	0e c0       	rjmp	.+28     	; 0xa00 <__addsf3x+0x9c>
     9e4:	ba 0f       	add	r27, r26
     9e6:	62 1f       	adc	r22, r18
     9e8:	73 1f       	adc	r23, r19
     9ea:	84 1f       	adc	r24, r20
     9ec:	48 f4       	brcc	.+18     	; 0xa00 <__addsf3x+0x9c>
     9ee:	87 95       	ror	r24
     9f0:	77 95       	ror	r23
     9f2:	67 95       	ror	r22
     9f4:	b7 95       	ror	r27
     9f6:	f7 95       	ror	r31
     9f8:	9e 3f       	cpi	r25, 0xFE	; 254
     9fa:	08 f0       	brcs	.+2      	; 0x9fe <__addsf3x+0x9a>
     9fc:	b0 cf       	rjmp	.-160    	; 0x95e <__addsf3+0x28>
     9fe:	93 95       	inc	r25
     a00:	88 0f       	add	r24, r24
     a02:	08 f0       	brcs	.+2      	; 0xa06 <__addsf3x+0xa2>
     a04:	99 27       	eor	r25, r25
     a06:	ee 0f       	add	r30, r30
     a08:	97 95       	ror	r25
     a0a:	87 95       	ror	r24
     a0c:	08 95       	ret

00000a0e <__fixunssfsi>:
     a0e:	0e 94 a3 05 	call	0xb46	; 0xb46 <__fp_splitA>
     a12:	88 f0       	brcs	.+34     	; 0xa36 <__fixunssfsi+0x28>
     a14:	9f 57       	subi	r25, 0x7F	; 127
     a16:	98 f0       	brcs	.+38     	; 0xa3e <__fixunssfsi+0x30>
     a18:	b9 2f       	mov	r27, r25
     a1a:	99 27       	eor	r25, r25
     a1c:	b7 51       	subi	r27, 0x17	; 23
     a1e:	b0 f0       	brcs	.+44     	; 0xa4c <__fixunssfsi+0x3e>
     a20:	e1 f0       	breq	.+56     	; 0xa5a <__fixunssfsi+0x4c>
     a22:	66 0f       	add	r22, r22
     a24:	77 1f       	adc	r23, r23
     a26:	88 1f       	adc	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	1a f0       	brmi	.+6      	; 0xa32 <__fixunssfsi+0x24>
     a2c:	ba 95       	dec	r27
     a2e:	c9 f7       	brne	.-14     	; 0xa22 <__fixunssfsi+0x14>
     a30:	14 c0       	rjmp	.+40     	; 0xa5a <__fixunssfsi+0x4c>
     a32:	b1 30       	cpi	r27, 0x01	; 1
     a34:	91 f0       	breq	.+36     	; 0xa5a <__fixunssfsi+0x4c>
     a36:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__fp_zero>
     a3a:	b1 e0       	ldi	r27, 0x01	; 1
     a3c:	08 95       	ret
     a3e:	0c 94 bd 05 	jmp	0xb7a	; 0xb7a <__fp_zero>
     a42:	67 2f       	mov	r22, r23
     a44:	78 2f       	mov	r23, r24
     a46:	88 27       	eor	r24, r24
     a48:	b8 5f       	subi	r27, 0xF8	; 248
     a4a:	39 f0       	breq	.+14     	; 0xa5a <__fixunssfsi+0x4c>
     a4c:	b9 3f       	cpi	r27, 0xF9	; 249
     a4e:	cc f3       	brlt	.-14     	; 0xa42 <__fixunssfsi+0x34>
     a50:	86 95       	lsr	r24
     a52:	77 95       	ror	r23
     a54:	67 95       	ror	r22
     a56:	b3 95       	inc	r27
     a58:	d9 f7       	brne	.-10     	; 0xa50 <__fixunssfsi+0x42>
     a5a:	3e f4       	brtc	.+14     	; 0xa6a <__fixunssfsi+0x5c>
     a5c:	90 95       	com	r25
     a5e:	80 95       	com	r24
     a60:	70 95       	com	r23
     a62:	61 95       	neg	r22
     a64:	7f 4f       	sbci	r23, 0xFF	; 255
     a66:	8f 4f       	sbci	r24, 0xFF	; 255
     a68:	9f 4f       	sbci	r25, 0xFF	; 255
     a6a:	08 95       	ret

00000a6c <__floatunsisf>:
     a6c:	e8 94       	clt
     a6e:	09 c0       	rjmp	.+18     	; 0xa82 <__floatsisf+0x12>

00000a70 <__floatsisf>:
     a70:	97 fb       	bst	r25, 7
     a72:	3e f4       	brtc	.+14     	; 0xa82 <__floatsisf+0x12>
     a74:	90 95       	com	r25
     a76:	80 95       	com	r24
     a78:	70 95       	com	r23
     a7a:	61 95       	neg	r22
     a7c:	7f 4f       	sbci	r23, 0xFF	; 255
     a7e:	8f 4f       	sbci	r24, 0xFF	; 255
     a80:	9f 4f       	sbci	r25, 0xFF	; 255
     a82:	99 23       	and	r25, r25
     a84:	a9 f0       	breq	.+42     	; 0xab0 <__floatsisf+0x40>
     a86:	f9 2f       	mov	r31, r25
     a88:	96 e9       	ldi	r25, 0x96	; 150
     a8a:	bb 27       	eor	r27, r27
     a8c:	93 95       	inc	r25
     a8e:	f6 95       	lsr	r31
     a90:	87 95       	ror	r24
     a92:	77 95       	ror	r23
     a94:	67 95       	ror	r22
     a96:	b7 95       	ror	r27
     a98:	f1 11       	cpse	r31, r1
     a9a:	f8 cf       	rjmp	.-16     	; 0xa8c <__floatsisf+0x1c>
     a9c:	fa f4       	brpl	.+62     	; 0xadc <__floatsisf+0x6c>
     a9e:	bb 0f       	add	r27, r27
     aa0:	11 f4       	brne	.+4      	; 0xaa6 <__floatsisf+0x36>
     aa2:	60 ff       	sbrs	r22, 0
     aa4:	1b c0       	rjmp	.+54     	; 0xadc <__floatsisf+0x6c>
     aa6:	6f 5f       	subi	r22, 0xFF	; 255
     aa8:	7f 4f       	sbci	r23, 0xFF	; 255
     aaa:	8f 4f       	sbci	r24, 0xFF	; 255
     aac:	9f 4f       	sbci	r25, 0xFF	; 255
     aae:	16 c0       	rjmp	.+44     	; 0xadc <__floatsisf+0x6c>
     ab0:	88 23       	and	r24, r24
     ab2:	11 f0       	breq	.+4      	; 0xab8 <__floatsisf+0x48>
     ab4:	96 e9       	ldi	r25, 0x96	; 150
     ab6:	11 c0       	rjmp	.+34     	; 0xada <__floatsisf+0x6a>
     ab8:	77 23       	and	r23, r23
     aba:	21 f0       	breq	.+8      	; 0xac4 <__floatsisf+0x54>
     abc:	9e e8       	ldi	r25, 0x8E	; 142
     abe:	87 2f       	mov	r24, r23
     ac0:	76 2f       	mov	r23, r22
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__floatsisf+0x5e>
     ac4:	66 23       	and	r22, r22
     ac6:	71 f0       	breq	.+28     	; 0xae4 <__floatsisf+0x74>
     ac8:	96 e8       	ldi	r25, 0x86	; 134
     aca:	86 2f       	mov	r24, r22
     acc:	70 e0       	ldi	r23, 0x00	; 0
     ace:	60 e0       	ldi	r22, 0x00	; 0
     ad0:	2a f0       	brmi	.+10     	; 0xadc <__floatsisf+0x6c>
     ad2:	9a 95       	dec	r25
     ad4:	66 0f       	add	r22, r22
     ad6:	77 1f       	adc	r23, r23
     ad8:	88 1f       	adc	r24, r24
     ada:	da f7       	brpl	.-10     	; 0xad2 <__floatsisf+0x62>
     adc:	88 0f       	add	r24, r24
     ade:	96 95       	lsr	r25
     ae0:	87 95       	ror	r24
     ae2:	97 f9       	bld	r25, 7
     ae4:	08 95       	ret

00000ae6 <__fp_inf>:
     ae6:	97 f9       	bld	r25, 7
     ae8:	9f 67       	ori	r25, 0x7F	; 127
     aea:	80 e8       	ldi	r24, 0x80	; 128
     aec:	70 e0       	ldi	r23, 0x00	; 0
     aee:	60 e0       	ldi	r22, 0x00	; 0
     af0:	08 95       	ret

00000af2 <__fp_nan>:
     af2:	9f ef       	ldi	r25, 0xFF	; 255
     af4:	80 ec       	ldi	r24, 0xC0	; 192
     af6:	08 95       	ret

00000af8 <__fp_pscA>:
     af8:	00 24       	eor	r0, r0
     afa:	0a 94       	dec	r0
     afc:	16 16       	cp	r1, r22
     afe:	17 06       	cpc	r1, r23
     b00:	18 06       	cpc	r1, r24
     b02:	09 06       	cpc	r0, r25
     b04:	08 95       	ret

00000b06 <__fp_pscB>:
     b06:	00 24       	eor	r0, r0
     b08:	0a 94       	dec	r0
     b0a:	12 16       	cp	r1, r18
     b0c:	13 06       	cpc	r1, r19
     b0e:	14 06       	cpc	r1, r20
     b10:	05 06       	cpc	r0, r21
     b12:	08 95       	ret

00000b14 <__fp_round>:
     b14:	09 2e       	mov	r0, r25
     b16:	03 94       	inc	r0
     b18:	00 0c       	add	r0, r0
     b1a:	11 f4       	brne	.+4      	; 0xb20 <__fp_round+0xc>
     b1c:	88 23       	and	r24, r24
     b1e:	52 f0       	brmi	.+20     	; 0xb34 <__fp_round+0x20>
     b20:	bb 0f       	add	r27, r27
     b22:	40 f4       	brcc	.+16     	; 0xb34 <__fp_round+0x20>
     b24:	bf 2b       	or	r27, r31
     b26:	11 f4       	brne	.+4      	; 0xb2c <__fp_round+0x18>
     b28:	60 ff       	sbrs	r22, 0
     b2a:	04 c0       	rjmp	.+8      	; 0xb34 <__fp_round+0x20>
     b2c:	6f 5f       	subi	r22, 0xFF	; 255
     b2e:	7f 4f       	sbci	r23, 0xFF	; 255
     b30:	8f 4f       	sbci	r24, 0xFF	; 255
     b32:	9f 4f       	sbci	r25, 0xFF	; 255
     b34:	08 95       	ret

00000b36 <__fp_split3>:
     b36:	57 fd       	sbrc	r21, 7
     b38:	90 58       	subi	r25, 0x80	; 128
     b3a:	44 0f       	add	r20, r20
     b3c:	55 1f       	adc	r21, r21
     b3e:	59 f0       	breq	.+22     	; 0xb56 <__fp_splitA+0x10>
     b40:	5f 3f       	cpi	r21, 0xFF	; 255
     b42:	71 f0       	breq	.+28     	; 0xb60 <__fp_splitA+0x1a>
     b44:	47 95       	ror	r20

00000b46 <__fp_splitA>:
     b46:	88 0f       	add	r24, r24
     b48:	97 fb       	bst	r25, 7
     b4a:	99 1f       	adc	r25, r25
     b4c:	61 f0       	breq	.+24     	; 0xb66 <__fp_splitA+0x20>
     b4e:	9f 3f       	cpi	r25, 0xFF	; 255
     b50:	79 f0       	breq	.+30     	; 0xb70 <__fp_splitA+0x2a>
     b52:	87 95       	ror	r24
     b54:	08 95       	ret
     b56:	12 16       	cp	r1, r18
     b58:	13 06       	cpc	r1, r19
     b5a:	14 06       	cpc	r1, r20
     b5c:	55 1f       	adc	r21, r21
     b5e:	f2 cf       	rjmp	.-28     	; 0xb44 <__fp_split3+0xe>
     b60:	46 95       	lsr	r20
     b62:	f1 df       	rcall	.-30     	; 0xb46 <__fp_splitA>
     b64:	08 c0       	rjmp	.+16     	; 0xb76 <__fp_splitA+0x30>
     b66:	16 16       	cp	r1, r22
     b68:	17 06       	cpc	r1, r23
     b6a:	18 06       	cpc	r1, r24
     b6c:	99 1f       	adc	r25, r25
     b6e:	f1 cf       	rjmp	.-30     	; 0xb52 <__fp_splitA+0xc>
     b70:	86 95       	lsr	r24
     b72:	71 05       	cpc	r23, r1
     b74:	61 05       	cpc	r22, r1
     b76:	08 94       	sec
     b78:	08 95       	ret

00000b7a <__fp_zero>:
     b7a:	e8 94       	clt

00000b7c <__fp_szero>:
     b7c:	bb 27       	eor	r27, r27
     b7e:	66 27       	eor	r22, r22
     b80:	77 27       	eor	r23, r23
     b82:	cb 01       	movw	r24, r22
     b84:	97 f9       	bld	r25, 7
     b86:	08 95       	ret

00000b88 <__mulsf3>:
     b88:	0e 94 d7 05 	call	0xbae	; 0xbae <__mulsf3x>
     b8c:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <__fp_round>
     b90:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__fp_pscA>
     b94:	38 f0       	brcs	.+14     	; 0xba4 <__mulsf3+0x1c>
     b96:	0e 94 83 05 	call	0xb06	; 0xb06 <__fp_pscB>
     b9a:	20 f0       	brcs	.+8      	; 0xba4 <__mulsf3+0x1c>
     b9c:	95 23       	and	r25, r21
     b9e:	11 f0       	breq	.+4      	; 0xba4 <__mulsf3+0x1c>
     ba0:	0c 94 73 05 	jmp	0xae6	; 0xae6 <__fp_inf>
     ba4:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <__fp_nan>
     ba8:	11 24       	eor	r1, r1
     baa:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__fp_szero>

00000bae <__mulsf3x>:
     bae:	0e 94 9b 05 	call	0xb36	; 0xb36 <__fp_split3>
     bb2:	70 f3       	brcs	.-36     	; 0xb90 <__mulsf3+0x8>

00000bb4 <__mulsf3_pse>:
     bb4:	95 9f       	mul	r25, r21
     bb6:	c1 f3       	breq	.-16     	; 0xba8 <__mulsf3+0x20>
     bb8:	95 0f       	add	r25, r21
     bba:	50 e0       	ldi	r21, 0x00	; 0
     bbc:	55 1f       	adc	r21, r21
     bbe:	62 9f       	mul	r22, r18
     bc0:	f0 01       	movw	r30, r0
     bc2:	72 9f       	mul	r23, r18
     bc4:	bb 27       	eor	r27, r27
     bc6:	f0 0d       	add	r31, r0
     bc8:	b1 1d       	adc	r27, r1
     bca:	63 9f       	mul	r22, r19
     bcc:	aa 27       	eor	r26, r26
     bce:	f0 0d       	add	r31, r0
     bd0:	b1 1d       	adc	r27, r1
     bd2:	aa 1f       	adc	r26, r26
     bd4:	64 9f       	mul	r22, r20
     bd6:	66 27       	eor	r22, r22
     bd8:	b0 0d       	add	r27, r0
     bda:	a1 1d       	adc	r26, r1
     bdc:	66 1f       	adc	r22, r22
     bde:	82 9f       	mul	r24, r18
     be0:	22 27       	eor	r18, r18
     be2:	b0 0d       	add	r27, r0
     be4:	a1 1d       	adc	r26, r1
     be6:	62 1f       	adc	r22, r18
     be8:	73 9f       	mul	r23, r19
     bea:	b0 0d       	add	r27, r0
     bec:	a1 1d       	adc	r26, r1
     bee:	62 1f       	adc	r22, r18
     bf0:	83 9f       	mul	r24, r19
     bf2:	a0 0d       	add	r26, r0
     bf4:	61 1d       	adc	r22, r1
     bf6:	22 1f       	adc	r18, r18
     bf8:	74 9f       	mul	r23, r20
     bfa:	33 27       	eor	r19, r19
     bfc:	a0 0d       	add	r26, r0
     bfe:	61 1d       	adc	r22, r1
     c00:	23 1f       	adc	r18, r19
     c02:	84 9f       	mul	r24, r20
     c04:	60 0d       	add	r22, r0
     c06:	21 1d       	adc	r18, r1
     c08:	82 2f       	mov	r24, r18
     c0a:	76 2f       	mov	r23, r22
     c0c:	6a 2f       	mov	r22, r26
     c0e:	11 24       	eor	r1, r1
     c10:	9f 57       	subi	r25, 0x7F	; 127
     c12:	50 40       	sbci	r21, 0x00	; 0
     c14:	9a f0       	brmi	.+38     	; 0xc3c <__mulsf3_pse+0x88>
     c16:	f1 f0       	breq	.+60     	; 0xc54 <__mulsf3_pse+0xa0>
     c18:	88 23       	and	r24, r24
     c1a:	4a f0       	brmi	.+18     	; 0xc2e <__mulsf3_pse+0x7a>
     c1c:	ee 0f       	add	r30, r30
     c1e:	ff 1f       	adc	r31, r31
     c20:	bb 1f       	adc	r27, r27
     c22:	66 1f       	adc	r22, r22
     c24:	77 1f       	adc	r23, r23
     c26:	88 1f       	adc	r24, r24
     c28:	91 50       	subi	r25, 0x01	; 1
     c2a:	50 40       	sbci	r21, 0x00	; 0
     c2c:	a9 f7       	brne	.-22     	; 0xc18 <__mulsf3_pse+0x64>
     c2e:	9e 3f       	cpi	r25, 0xFE	; 254
     c30:	51 05       	cpc	r21, r1
     c32:	80 f0       	brcs	.+32     	; 0xc54 <__mulsf3_pse+0xa0>
     c34:	0c 94 73 05 	jmp	0xae6	; 0xae6 <__fp_inf>
     c38:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__fp_szero>
     c3c:	5f 3f       	cpi	r21, 0xFF	; 255
     c3e:	e4 f3       	brlt	.-8      	; 0xc38 <__mulsf3_pse+0x84>
     c40:	98 3e       	cpi	r25, 0xE8	; 232
     c42:	d4 f3       	brlt	.-12     	; 0xc38 <__mulsf3_pse+0x84>
     c44:	86 95       	lsr	r24
     c46:	77 95       	ror	r23
     c48:	67 95       	ror	r22
     c4a:	b7 95       	ror	r27
     c4c:	f7 95       	ror	r31
     c4e:	e7 95       	ror	r30
     c50:	9f 5f       	subi	r25, 0xFF	; 255
     c52:	c1 f7       	brne	.-16     	; 0xc44 <__mulsf3_pse+0x90>
     c54:	fe 2b       	or	r31, r30
     c56:	88 0f       	add	r24, r24
     c58:	91 1d       	adc	r25, r1
     c5a:	96 95       	lsr	r25
     c5c:	87 95       	ror	r24
     c5e:	97 f9       	bld	r25, 7
     c60:	08 95       	ret

00000c62 <__divmodhi4>:
     c62:	97 fb       	bst	r25, 7
     c64:	07 2e       	mov	r0, r23
     c66:	16 f4       	brtc	.+4      	; 0xc6c <__divmodhi4+0xa>
     c68:	00 94       	com	r0
     c6a:	07 d0       	rcall	.+14     	; 0xc7a <__divmodhi4_neg1>
     c6c:	77 fd       	sbrc	r23, 7
     c6e:	09 d0       	rcall	.+18     	; 0xc82 <__divmodhi4_neg2>
     c70:	0e 94 45 06 	call	0xc8a	; 0xc8a <__udivmodhi4>
     c74:	07 fc       	sbrc	r0, 7
     c76:	05 d0       	rcall	.+10     	; 0xc82 <__divmodhi4_neg2>
     c78:	3e f4       	brtc	.+14     	; 0xc88 <__divmodhi4_exit>

00000c7a <__divmodhi4_neg1>:
     c7a:	90 95       	com	r25
     c7c:	81 95       	neg	r24
     c7e:	9f 4f       	sbci	r25, 0xFF	; 255
     c80:	08 95       	ret

00000c82 <__divmodhi4_neg2>:
     c82:	70 95       	com	r23
     c84:	61 95       	neg	r22
     c86:	7f 4f       	sbci	r23, 0xFF	; 255

00000c88 <__divmodhi4_exit>:
     c88:	08 95       	ret

00000c8a <__udivmodhi4>:
     c8a:	aa 1b       	sub	r26, r26
     c8c:	bb 1b       	sub	r27, r27
     c8e:	51 e1       	ldi	r21, 0x11	; 17
     c90:	07 c0       	rjmp	.+14     	; 0xca0 <__udivmodhi4_ep>

00000c92 <__udivmodhi4_loop>:
     c92:	aa 1f       	adc	r26, r26
     c94:	bb 1f       	adc	r27, r27
     c96:	a6 17       	cp	r26, r22
     c98:	b7 07       	cpc	r27, r23
     c9a:	10 f0       	brcs	.+4      	; 0xca0 <__udivmodhi4_ep>
     c9c:	a6 1b       	sub	r26, r22
     c9e:	b7 0b       	sbc	r27, r23

00000ca0 <__udivmodhi4_ep>:
     ca0:	88 1f       	adc	r24, r24
     ca2:	99 1f       	adc	r25, r25
     ca4:	5a 95       	dec	r21
     ca6:	a9 f7       	brne	.-22     	; 0xc92 <__udivmodhi4_loop>
     ca8:	80 95       	com	r24
     caa:	90 95       	com	r25
     cac:	bc 01       	movw	r22, r24
     cae:	cd 01       	movw	r24, r26
     cb0:	08 95       	ret

00000cb2 <sscanf>:
     cb2:	ae e0       	ldi	r26, 0x0E	; 14
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	ef e5       	ldi	r30, 0x5F	; 95
     cb8:	f6 e0       	ldi	r31, 0x06	; 6
     cba:	0c 94 9d 09 	jmp	0x133a	; 0x133a <__prologue_saves__+0x20>
     cbe:	85 e0       	ldi	r24, 0x05	; 5
     cc0:	8c 83       	std	Y+4, r24	; 0x04
     cc2:	8b 89       	ldd	r24, Y+19	; 0x13
     cc4:	9c 89       	ldd	r25, Y+20	; 0x14
     cc6:	9a 83       	std	Y+2, r25	; 0x02
     cc8:	89 83       	std	Y+1, r24	; 0x01
     cca:	ae 01       	movw	r20, r28
     ccc:	49 5e       	subi	r20, 0xE9	; 233
     cce:	5f 4f       	sbci	r21, 0xFF	; 255
     cd0:	6d 89       	ldd	r22, Y+21	; 0x15
     cd2:	7e 89       	ldd	r23, Y+22	; 0x16
     cd4:	ce 01       	movw	r24, r28
     cd6:	01 96       	adiw	r24, 0x01	; 1
     cd8:	0e 94 0e 08 	call	0x101c	; 0x101c <vfscanf>
     cdc:	2e 96       	adiw	r28, 0x0e	; 14
     cde:	e2 e0       	ldi	r30, 0x02	; 2
     ce0:	0c 94 b9 09 	jmp	0x1372	; 0x1372 <__epilogue_restores__+0x20>

00000ce4 <putval>:
     ce4:	20 fd       	sbrc	r18, 0
     ce6:	09 c0       	rjmp	.+18     	; 0xcfa <putval+0x16>
     ce8:	fc 01       	movw	r30, r24
     cea:	23 fd       	sbrc	r18, 3
     cec:	05 c0       	rjmp	.+10     	; 0xcf8 <putval+0x14>
     cee:	22 ff       	sbrs	r18, 2
     cf0:	02 c0       	rjmp	.+4      	; 0xcf6 <putval+0x12>
     cf2:	73 83       	std	Z+3, r23	; 0x03
     cf4:	62 83       	std	Z+2, r22	; 0x02
     cf6:	51 83       	std	Z+1, r21	; 0x01
     cf8:	40 83       	st	Z, r20
     cfa:	08 95       	ret

00000cfc <mulacc>:
     cfc:	44 fd       	sbrc	r20, 4
     cfe:	17 c0       	rjmp	.+46     	; 0xd2e <mulacc+0x32>
     d00:	46 fd       	sbrc	r20, 6
     d02:	17 c0       	rjmp	.+46     	; 0xd32 <mulacc+0x36>
     d04:	ab 01       	movw	r20, r22
     d06:	bc 01       	movw	r22, r24
     d08:	da 01       	movw	r26, r20
     d0a:	fb 01       	movw	r30, r22
     d0c:	aa 0f       	add	r26, r26
     d0e:	bb 1f       	adc	r27, r27
     d10:	ee 1f       	adc	r30, r30
     d12:	ff 1f       	adc	r31, r31
     d14:	10 94       	com	r1
     d16:	d1 f7       	brne	.-12     	; 0xd0c <mulacc+0x10>
     d18:	4a 0f       	add	r20, r26
     d1a:	5b 1f       	adc	r21, r27
     d1c:	6e 1f       	adc	r22, r30
     d1e:	7f 1f       	adc	r23, r31
     d20:	cb 01       	movw	r24, r22
     d22:	ba 01       	movw	r22, r20
     d24:	66 0f       	add	r22, r22
     d26:	77 1f       	adc	r23, r23
     d28:	88 1f       	adc	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	09 c0       	rjmp	.+18     	; 0xd40 <mulacc+0x44>
     d2e:	33 e0       	ldi	r19, 0x03	; 3
     d30:	01 c0       	rjmp	.+2      	; 0xd34 <mulacc+0x38>
     d32:	34 e0       	ldi	r19, 0x04	; 4
     d34:	66 0f       	add	r22, r22
     d36:	77 1f       	adc	r23, r23
     d38:	88 1f       	adc	r24, r24
     d3a:	99 1f       	adc	r25, r25
     d3c:	31 50       	subi	r19, 0x01	; 1
     d3e:	d1 f7       	brne	.-12     	; 0xd34 <mulacc+0x38>
     d40:	62 0f       	add	r22, r18
     d42:	71 1d       	adc	r23, r1
     d44:	81 1d       	adc	r24, r1
     d46:	91 1d       	adc	r25, r1
     d48:	08 95       	ret

00000d4a <skip_spaces>:
     d4a:	0f 93       	push	r16
     d4c:	1f 93       	push	r17
     d4e:	cf 93       	push	r28
     d50:	df 93       	push	r29
     d52:	8c 01       	movw	r16, r24
     d54:	c8 01       	movw	r24, r16
     d56:	0e 94 33 09 	call	0x1266	; 0x1266 <fgetc>
     d5a:	ec 01       	movw	r28, r24
     d5c:	97 fd       	sbrc	r25, 7
     d5e:	08 c0       	rjmp	.+16     	; 0xd70 <skip_spaces+0x26>
     d60:	0e 94 1f 09 	call	0x123e	; 0x123e <isspace>
     d64:	89 2b       	or	r24, r25
     d66:	b1 f7       	brne	.-20     	; 0xd54 <skip_spaces+0xa>
     d68:	b8 01       	movw	r22, r16
     d6a:	ce 01       	movw	r24, r28
     d6c:	0e 94 71 09 	call	0x12e2	; 0x12e2 <ungetc>
     d70:	ce 01       	movw	r24, r28
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	1f 91       	pop	r17
     d78:	0f 91       	pop	r16
     d7a:	08 95       	ret

00000d7c <conv_int>:
     d7c:	8f 92       	push	r8
     d7e:	9f 92       	push	r9
     d80:	af 92       	push	r10
     d82:	bf 92       	push	r11
     d84:	ef 92       	push	r14
     d86:	ff 92       	push	r15
     d88:	0f 93       	push	r16
     d8a:	1f 93       	push	r17
     d8c:	cf 93       	push	r28
     d8e:	df 93       	push	r29
     d90:	8c 01       	movw	r16, r24
     d92:	d6 2f       	mov	r29, r22
     d94:	7a 01       	movw	r14, r20
     d96:	b2 2e       	mov	r11, r18
     d98:	0e 94 33 09 	call	0x1266	; 0x1266 <fgetc>
     d9c:	9c 01       	movw	r18, r24
     d9e:	33 27       	eor	r19, r19
     da0:	2b 32       	cpi	r18, 0x2B	; 43
     da2:	31 05       	cpc	r19, r1
     da4:	31 f0       	breq	.+12     	; 0xdb2 <conv_int+0x36>
     da6:	2d 32       	cpi	r18, 0x2D	; 45
     da8:	31 05       	cpc	r19, r1
     daa:	61 f4       	brne	.+24     	; 0xdc4 <conv_int+0x48>
     dac:	8b 2d       	mov	r24, r11
     dae:	80 68       	ori	r24, 0x80	; 128
     db0:	b8 2e       	mov	r11, r24
     db2:	d1 50       	subi	r29, 0x01	; 1
     db4:	11 f4       	brne	.+4      	; 0xdba <conv_int+0x3e>
     db6:	80 e0       	ldi	r24, 0x00	; 0
     db8:	68 c0       	rjmp	.+208    	; 0xe8a <conv_int+0x10e>
     dba:	c8 01       	movw	r24, r16
     dbc:	0e 94 33 09 	call	0x1266	; 0x1266 <fgetc>
     dc0:	97 fd       	sbrc	r25, 7
     dc2:	f9 cf       	rjmp	.-14     	; 0xdb6 <conv_int+0x3a>
     dc4:	cb 2d       	mov	r28, r11
     dc6:	cd 7f       	andi	r28, 0xFD	; 253
     dc8:	2b 2d       	mov	r18, r11
     dca:	20 73       	andi	r18, 0x30	; 48
     dcc:	09 f5       	brne	.+66     	; 0xe10 <conv_int+0x94>
     dce:	80 33       	cpi	r24, 0x30	; 48
     dd0:	f9 f4       	brne	.+62     	; 0xe10 <conv_int+0x94>
     dd2:	aa 24       	eor	r10, r10
     dd4:	aa 94       	dec	r10
     dd6:	ad 0e       	add	r10, r29
     dd8:	09 f4       	brne	.+2      	; 0xddc <conv_int+0x60>
     dda:	43 c0       	rjmp	.+134    	; 0xe62 <conv_int+0xe6>
     ddc:	c8 01       	movw	r24, r16
     dde:	0e 94 33 09 	call	0x1266	; 0x1266 <fgetc>
     de2:	97 fd       	sbrc	r25, 7
     de4:	3e c0       	rjmp	.+124    	; 0xe62 <conv_int+0xe6>
     de6:	9c 01       	movw	r18, r24
     de8:	2f 7d       	andi	r18, 0xDF	; 223
     dea:	33 27       	eor	r19, r19
     dec:	28 35       	cpi	r18, 0x58	; 88
     dee:	31 05       	cpc	r19, r1
     df0:	49 f4       	brne	.+18     	; 0xe04 <conv_int+0x88>
     df2:	c2 64       	ori	r28, 0x42	; 66
     df4:	d2 50       	subi	r29, 0x02	; 2
     df6:	a9 f1       	breq	.+106    	; 0xe62 <conv_int+0xe6>
     df8:	c8 01       	movw	r24, r16
     dfa:	0e 94 33 09 	call	0x1266	; 0x1266 <fgetc>
     dfe:	97 ff       	sbrs	r25, 7
     e00:	07 c0       	rjmp	.+14     	; 0xe10 <conv_int+0x94>
     e02:	2f c0       	rjmp	.+94     	; 0xe62 <conv_int+0xe6>
     e04:	b6 fe       	sbrs	r11, 6
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <conv_int+0x90>
     e08:	c2 60       	ori	r28, 0x02	; 2
     e0a:	01 c0       	rjmp	.+2      	; 0xe0e <conv_int+0x92>
     e0c:	c2 61       	ori	r28, 0x12	; 18
     e0e:	da 2d       	mov	r29, r10
     e10:	81 2c       	mov	r8, r1
     e12:	91 2c       	mov	r9, r1
     e14:	54 01       	movw	r10, r8
     e16:	20 ed       	ldi	r18, 0xD0	; 208
     e18:	28 0f       	add	r18, r24
     e1a:	28 30       	cpi	r18, 0x08	; 8
     e1c:	80 f0       	brcs	.+32     	; 0xe3e <conv_int+0xc2>
     e1e:	c4 ff       	sbrs	r28, 4
     e20:	04 c0       	rjmp	.+8      	; 0xe2a <conv_int+0xae>
     e22:	b8 01       	movw	r22, r16
     e24:	0e 94 71 09 	call	0x12e2	; 0x12e2 <ungetc>
     e28:	19 c0       	rjmp	.+50     	; 0xe5c <conv_int+0xe0>
     e2a:	2a 30       	cpi	r18, 0x0A	; 10
     e2c:	40 f0       	brcs	.+16     	; 0xe3e <conv_int+0xc2>
     e2e:	c6 ff       	sbrs	r28, 6
     e30:	f8 cf       	rjmp	.-16     	; 0xe22 <conv_int+0xa6>
     e32:	2f 7d       	andi	r18, 0xDF	; 223
     e34:	3f ee       	ldi	r19, 0xEF	; 239
     e36:	32 0f       	add	r19, r18
     e38:	36 30       	cpi	r19, 0x06	; 6
     e3a:	98 f7       	brcc	.-26     	; 0xe22 <conv_int+0xa6>
     e3c:	27 50       	subi	r18, 0x07	; 7
     e3e:	4c 2f       	mov	r20, r28
     e40:	c5 01       	movw	r24, r10
     e42:	b4 01       	movw	r22, r8
     e44:	0e 94 7e 06 	call	0xcfc	; 0xcfc <mulacc>
     e48:	4b 01       	movw	r8, r22
     e4a:	5c 01       	movw	r10, r24
     e4c:	c2 60       	ori	r28, 0x02	; 2
     e4e:	d1 50       	subi	r29, 0x01	; 1
     e50:	59 f0       	breq	.+22     	; 0xe68 <conv_int+0xec>
     e52:	c8 01       	movw	r24, r16
     e54:	0e 94 33 09 	call	0x1266	; 0x1266 <fgetc>
     e58:	97 ff       	sbrs	r25, 7
     e5a:	dd cf       	rjmp	.-70     	; 0xe16 <conv_int+0x9a>
     e5c:	c1 fd       	sbrc	r28, 1
     e5e:	04 c0       	rjmp	.+8      	; 0xe68 <conv_int+0xec>
     e60:	aa cf       	rjmp	.-172    	; 0xdb6 <conv_int+0x3a>
     e62:	81 2c       	mov	r8, r1
     e64:	91 2c       	mov	r9, r1
     e66:	54 01       	movw	r10, r8
     e68:	c7 ff       	sbrs	r28, 7
     e6a:	08 c0       	rjmp	.+16     	; 0xe7c <conv_int+0x100>
     e6c:	b0 94       	com	r11
     e6e:	a0 94       	com	r10
     e70:	90 94       	com	r9
     e72:	80 94       	com	r8
     e74:	81 1c       	adc	r8, r1
     e76:	91 1c       	adc	r9, r1
     e78:	a1 1c       	adc	r10, r1
     e7a:	b1 1c       	adc	r11, r1
     e7c:	2c 2f       	mov	r18, r28
     e7e:	b5 01       	movw	r22, r10
     e80:	a4 01       	movw	r20, r8
     e82:	c7 01       	movw	r24, r14
     e84:	0e 94 72 06 	call	0xce4	; 0xce4 <putval>
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	df 91       	pop	r29
     e8c:	cf 91       	pop	r28
     e8e:	1f 91       	pop	r17
     e90:	0f 91       	pop	r16
     e92:	ff 90       	pop	r15
     e94:	ef 90       	pop	r14
     e96:	bf 90       	pop	r11
     e98:	af 90       	pop	r10
     e9a:	9f 90       	pop	r9
     e9c:	8f 90       	pop	r8
     e9e:	08 95       	ret

00000ea0 <conv_brk>:
     ea0:	a0 e2       	ldi	r26, 0x20	; 32
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	e6 e5       	ldi	r30, 0x56	; 86
     ea6:	f7 e0       	ldi	r31, 0x07	; 7
     ea8:	0c 94 90 09 	jmp	0x1320	; 0x1320 <__prologue_saves__+0x6>
     eac:	5c 01       	movw	r10, r24
     eae:	96 2e       	mov	r9, r22
     eb0:	7a 01       	movw	r14, r20
     eb2:	f9 01       	movw	r30, r18
     eb4:	8e 01       	movw	r16, r28
     eb6:	0f 5f       	subi	r16, 0xFF	; 255
     eb8:	1f 4f       	sbci	r17, 0xFF	; 255
     eba:	68 01       	movw	r12, r16
     ebc:	80 e2       	ldi	r24, 0x20	; 32
     ebe:	d8 01       	movw	r26, r16
     ec0:	1d 92       	st	X+, r1
     ec2:	8a 95       	dec	r24
     ec4:	e9 f7       	brne	.-6      	; 0xec0 <conv_brk+0x20>
     ec6:	d5 01       	movw	r26, r10
     ec8:	13 96       	adiw	r26, 0x03	; 3
     eca:	8c 90       	ld	r8, X
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	61 2c       	mov	r6, r1
     ed2:	71 2c       	mov	r7, r1
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	61 e0       	ldi	r22, 0x01	; 1
     ed8:	70 e0       	ldi	r23, 0x00	; 0
     eda:	83 fc       	sbrc	r8, 3
     edc:	25 91       	lpm	r18, Z+
     ede:	83 fe       	sbrs	r8, 3
     ee0:	21 91       	ld	r18, Z+
     ee2:	8f 01       	movw	r16, r30
     ee4:	52 2e       	mov	r5, r18
     ee6:	21 11       	cpse	r18, r1
     ee8:	03 c0       	rjmp	.+6      	; 0xef0 <conv_brk+0x50>
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	92 c0       	rjmp	.+292    	; 0x1014 <conv_brk+0x174>
     ef0:	2e 35       	cpi	r18, 0x5E	; 94
     ef2:	11 f4       	brne	.+4      	; 0xef8 <conv_brk+0x58>
     ef4:	00 97       	sbiw	r24, 0x00	; 0
     ef6:	51 f1       	breq	.+84     	; 0xf4c <conv_brk+0xac>
     ef8:	43 2f       	mov	r20, r19
     efa:	50 e0       	ldi	r21, 0x00	; 0
     efc:	48 17       	cp	r20, r24
     efe:	59 07       	cpc	r21, r25
     f00:	3c f4       	brge	.+14     	; 0xf10 <conv_brk+0x70>
     f02:	2d 35       	cpi	r18, 0x5D	; 93
     f04:	59 f1       	breq	.+86     	; 0xf5c <conv_brk+0xbc>
     f06:	2d 32       	cpi	r18, 0x2D	; 45
     f08:	19 f4       	brne	.+6      	; 0xf10 <conv_brk+0x70>
     f0a:	77 20       	and	r7, r7
     f0c:	09 f1       	breq	.+66     	; 0xf50 <conv_brk+0xb0>
     f0e:	03 c0       	rjmp	.+6      	; 0xf16 <conv_brk+0x76>
     f10:	77 20       	and	r7, r7
     f12:	09 f4       	brne	.+2      	; 0xf16 <conv_brk+0x76>
     f14:	6a c0       	rjmp	.+212    	; 0xfea <conv_brk+0x14a>
     f16:	45 2d       	mov	r20, r5
     f18:	46 95       	lsr	r20
     f1a:	46 95       	lsr	r20
     f1c:	46 95       	lsr	r20
     f1e:	d6 01       	movw	r26, r12
     f20:	a4 0f       	add	r26, r20
     f22:	b1 1d       	adc	r27, r1
     f24:	45 2d       	mov	r20, r5
     f26:	47 70       	andi	r20, 0x07	; 7
     f28:	8b 01       	movw	r16, r22
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <conv_brk+0x90>
     f2c:	00 0f       	add	r16, r16
     f2e:	11 1f       	adc	r17, r17
     f30:	4a 95       	dec	r20
     f32:	e2 f7       	brpl	.-8      	; 0xf2c <conv_brk+0x8c>
     f34:	a8 01       	movw	r20, r16
     f36:	5c 91       	ld	r21, X
     f38:	45 2b       	or	r20, r21
     f3a:	4c 93       	st	X, r20
     f3c:	65 14       	cp	r6, r5
     f3e:	59 f0       	breq	.+22     	; 0xf56 <conv_brk+0xb6>
     f40:	56 14       	cp	r5, r6
     f42:	10 f4       	brcc	.+4      	; 0xf48 <conv_brk+0xa8>
     f44:	53 94       	inc	r5
     f46:	e7 cf       	rjmp	.-50     	; 0xf16 <conv_brk+0x76>
     f48:	5a 94       	dec	r5
     f4a:	e5 cf       	rjmp	.-54     	; 0xf16 <conv_brk+0x76>
     f4c:	31 e0       	ldi	r19, 0x01	; 1
     f4e:	04 c0       	rjmp	.+8      	; 0xf58 <conv_brk+0xb8>
     f50:	77 24       	eor	r7, r7
     f52:	73 94       	inc	r7
     f54:	01 c0       	rjmp	.+2      	; 0xf58 <conv_brk+0xb8>
     f56:	71 2c       	mov	r7, r1
     f58:	01 96       	adiw	r24, 0x01	; 1
     f5a:	bf cf       	rjmp	.-130    	; 0xeda <conv_brk+0x3a>
     f5c:	77 20       	and	r7, r7
     f5e:	19 f0       	breq	.+6      	; 0xf66 <conv_brk+0xc6>
     f60:	8e 81       	ldd	r24, Y+6	; 0x06
     f62:	80 62       	ori	r24, 0x20	; 32
     f64:	8e 83       	std	Y+6, r24	; 0x06
     f66:	31 11       	cpse	r19, r1
     f68:	03 c0       	rjmp	.+6      	; 0xf70 <conv_brk+0xd0>
     f6a:	88 24       	eor	r8, r8
     f6c:	83 94       	inc	r8
     f6e:	17 c0       	rjmp	.+46     	; 0xf9e <conv_brk+0xfe>
     f70:	f6 01       	movw	r30, r12
     f72:	9e 01       	movw	r18, r28
     f74:	2f 5d       	subi	r18, 0xDF	; 223
     f76:	3f 4f       	sbci	r19, 0xFF	; 255
     f78:	80 81       	ld	r24, Z
     f7a:	80 95       	com	r24
     f7c:	81 93       	st	Z+, r24
     f7e:	2e 17       	cp	r18, r30
     f80:	3f 07       	cpc	r19, r31
     f82:	d1 f7       	brne	.-12     	; 0xf78 <conv_brk+0xd8>
     f84:	f2 cf       	rjmp	.-28     	; 0xf6a <conv_brk+0xca>
     f86:	e1 14       	cp	r14, r1
     f88:	f1 04       	cpc	r15, r1
     f8a:	29 f0       	breq	.+10     	; 0xf96 <conv_brk+0xf6>
     f8c:	d7 01       	movw	r26, r14
     f8e:	8c 93       	st	X, r24
     f90:	f7 01       	movw	r30, r14
     f92:	31 96       	adiw	r30, 0x01	; 1
     f94:	7f 01       	movw	r14, r30
     f96:	9a 94       	dec	r9
     f98:	81 2c       	mov	r8, r1
     f9a:	99 20       	and	r9, r9
     f9c:	f9 f0       	breq	.+62     	; 0xfdc <conv_brk+0x13c>
     f9e:	c5 01       	movw	r24, r10
     fa0:	0e 94 33 09 	call	0x1266	; 0x1266 <fgetc>
     fa4:	97 fd       	sbrc	r25, 7
     fa6:	18 c0       	rjmp	.+48     	; 0xfd8 <conv_brk+0x138>
     fa8:	fc 01       	movw	r30, r24
     faa:	ff 27       	eor	r31, r31
     fac:	23 e0       	ldi	r18, 0x03	; 3
     fae:	f5 95       	asr	r31
     fb0:	e7 95       	ror	r30
     fb2:	2a 95       	dec	r18
     fb4:	e1 f7       	brne	.-8      	; 0xfae <conv_brk+0x10e>
     fb6:	ec 0d       	add	r30, r12
     fb8:	fd 1d       	adc	r31, r13
     fba:	20 81       	ld	r18, Z
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	ac 01       	movw	r20, r24
     fc0:	47 70       	andi	r20, 0x07	; 7
     fc2:	55 27       	eor	r21, r21
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <conv_brk+0x12a>
     fc6:	35 95       	asr	r19
     fc8:	27 95       	ror	r18
     fca:	4a 95       	dec	r20
     fcc:	e2 f7       	brpl	.-8      	; 0xfc6 <conv_brk+0x126>
     fce:	20 fd       	sbrc	r18, 0
     fd0:	da cf       	rjmp	.-76     	; 0xf86 <conv_brk+0xe6>
     fd2:	b5 01       	movw	r22, r10
     fd4:	0e 94 71 09 	call	0x12e2	; 0x12e2 <ungetc>
     fd8:	81 10       	cpse	r8, r1
     fda:	87 cf       	rjmp	.-242    	; 0xeea <conv_brk+0x4a>
     fdc:	e1 14       	cp	r14, r1
     fde:	f1 04       	cpc	r15, r1
     fe0:	11 f0       	breq	.+4      	; 0xfe6 <conv_brk+0x146>
     fe2:	d7 01       	movw	r26, r14
     fe4:	1c 92       	st	X, r1
     fe6:	c8 01       	movw	r24, r16
     fe8:	15 c0       	rjmp	.+42     	; 0x1014 <conv_brk+0x174>
     fea:	42 2f       	mov	r20, r18
     fec:	46 95       	lsr	r20
     fee:	46 95       	lsr	r20
     ff0:	46 95       	lsr	r20
     ff2:	d6 01       	movw	r26, r12
     ff4:	a4 0f       	add	r26, r20
     ff6:	b1 1d       	adc	r27, r1
     ff8:	42 2f       	mov	r20, r18
     ffa:	47 70       	andi	r20, 0x07	; 7
     ffc:	8b 01       	movw	r16, r22
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <conv_brk+0x164>
    1000:	00 0f       	add	r16, r16
    1002:	11 1f       	adc	r17, r17
    1004:	4a 95       	dec	r20
    1006:	e2 f7       	brpl	.-8      	; 0x1000 <conv_brk+0x160>
    1008:	a8 01       	movw	r20, r16
    100a:	5c 91       	ld	r21, X
    100c:	45 2b       	or	r20, r21
    100e:	4c 93       	st	X, r20
    1010:	62 2e       	mov	r6, r18
    1012:	a2 cf       	rjmp	.-188    	; 0xf58 <conv_brk+0xb8>
    1014:	a0 96       	adiw	r28, 0x20	; 32
    1016:	ef e0       	ldi	r30, 0x0F	; 15
    1018:	0c 94 ac 09 	jmp	0x1358	; 0x1358 <__epilogue_restores__+0x6>

0000101c <vfscanf>:
    101c:	a0 e0       	ldi	r26, 0x00	; 0
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e4 e1       	ldi	r30, 0x14	; 20
    1022:	f8 e0       	ldi	r31, 0x08	; 8
    1024:	0c 94 90 09 	jmp	0x1320	; 0x1320 <__prologue_saves__+0x6>
    1028:	6c 01       	movw	r12, r24
    102a:	eb 01       	movw	r28, r22
    102c:	5a 01       	movw	r10, r20
    102e:	fc 01       	movw	r30, r24
    1030:	17 82       	std	Z+7, r1	; 0x07
    1032:	16 82       	std	Z+6, r1	; 0x06
    1034:	51 2c       	mov	r5, r1
    1036:	f6 01       	movw	r30, r12
    1038:	e3 80       	ldd	r14, Z+3	; 0x03
    103a:	fe 01       	movw	r30, r28
    103c:	e3 fc       	sbrc	r14, 3
    103e:	85 91       	lpm	r24, Z+
    1040:	e3 fe       	sbrs	r14, 3
    1042:	81 91       	ld	r24, Z+
    1044:	18 2f       	mov	r17, r24
    1046:	ef 01       	movw	r28, r30
    1048:	88 23       	and	r24, r24
    104a:	09 f4       	brne	.+2      	; 0x104e <vfscanf+0x32>
    104c:	ee c0       	rjmp	.+476    	; 0x122a <vfscanf+0x20e>
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	0e 94 1f 09 	call	0x123e	; 0x123e <isspace>
    1054:	89 2b       	or	r24, r25
    1056:	21 f0       	breq	.+8      	; 0x1060 <vfscanf+0x44>
    1058:	c6 01       	movw	r24, r12
    105a:	0e 94 a5 06 	call	0xd4a	; 0xd4a <skip_spaces>
    105e:	eb cf       	rjmp	.-42     	; 0x1036 <vfscanf+0x1a>
    1060:	15 32       	cpi	r17, 0x25	; 37
    1062:	41 f4       	brne	.+16     	; 0x1074 <vfscanf+0x58>
    1064:	fe 01       	movw	r30, r28
    1066:	e3 fc       	sbrc	r14, 3
    1068:	15 91       	lpm	r17, Z+
    106a:	e3 fe       	sbrs	r14, 3
    106c:	11 91       	ld	r17, Z+
    106e:	ef 01       	movw	r28, r30
    1070:	15 32       	cpi	r17, 0x25	; 37
    1072:	81 f4       	brne	.+32     	; 0x1094 <vfscanf+0x78>
    1074:	c6 01       	movw	r24, r12
    1076:	0e 94 33 09 	call	0x1266	; 0x1266 <fgetc>
    107a:	97 fd       	sbrc	r25, 7
    107c:	d4 c0       	rjmp	.+424    	; 0x1226 <vfscanf+0x20a>
    107e:	41 2f       	mov	r20, r17
    1080:	50 e0       	ldi	r21, 0x00	; 0
    1082:	9c 01       	movw	r18, r24
    1084:	33 27       	eor	r19, r19
    1086:	24 17       	cp	r18, r20
    1088:	35 07       	cpc	r19, r21
    108a:	a9 f2       	breq	.-86     	; 0x1036 <vfscanf+0x1a>
    108c:	b6 01       	movw	r22, r12
    108e:	0e 94 71 09 	call	0x12e2	; 0x12e2 <ungetc>
    1092:	cb c0       	rjmp	.+406    	; 0x122a <vfscanf+0x20e>
    1094:	1a 32       	cpi	r17, 0x2A	; 42
    1096:	39 f4       	brne	.+14     	; 0x10a6 <vfscanf+0x8a>
    1098:	e3 fc       	sbrc	r14, 3
    109a:	15 91       	lpm	r17, Z+
    109c:	e3 fe       	sbrs	r14, 3
    109e:	11 91       	ld	r17, Z+
    10a0:	ef 01       	movw	r28, r30
    10a2:	01 e0       	ldi	r16, 0x01	; 1
    10a4:	01 c0       	rjmp	.+2      	; 0x10a8 <vfscanf+0x8c>
    10a6:	00 e0       	ldi	r16, 0x00	; 0
    10a8:	f1 2c       	mov	r15, r1
    10aa:	20 ed       	ldi	r18, 0xD0	; 208
    10ac:	21 0f       	add	r18, r17
    10ae:	2a 30       	cpi	r18, 0x0A	; 10
    10b0:	80 f4       	brcc	.+32     	; 0x10d2 <vfscanf+0xb6>
    10b2:	02 60       	ori	r16, 0x02	; 2
    10b4:	6f 2d       	mov	r22, r15
    10b6:	70 e0       	ldi	r23, 0x00	; 0
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	40 e2       	ldi	r20, 0x20	; 32
    10be:	0e 94 7e 06 	call	0xcfc	; 0xcfc <mulacc>
    10c2:	f6 2e       	mov	r15, r22
    10c4:	fe 01       	movw	r30, r28
    10c6:	e3 fc       	sbrc	r14, 3
    10c8:	15 91       	lpm	r17, Z+
    10ca:	e3 fe       	sbrs	r14, 3
    10cc:	11 91       	ld	r17, Z+
    10ce:	ef 01       	movw	r28, r30
    10d0:	ec cf       	rjmp	.-40     	; 0x10aa <vfscanf+0x8e>
    10d2:	01 ff       	sbrs	r16, 1
    10d4:	03 c0       	rjmp	.+6      	; 0x10dc <vfscanf+0xc0>
    10d6:	f1 10       	cpse	r15, r1
    10d8:	03 c0       	rjmp	.+6      	; 0x10e0 <vfscanf+0xc4>
    10da:	a7 c0       	rjmp	.+334    	; 0x122a <vfscanf+0x20e>
    10dc:	ff 24       	eor	r15, r15
    10de:	fa 94       	dec	r15
    10e0:	18 36       	cpi	r17, 0x68	; 104
    10e2:	19 f0       	breq	.+6      	; 0x10ea <vfscanf+0xce>
    10e4:	1c 36       	cpi	r17, 0x6C	; 108
    10e6:	51 f0       	breq	.+20     	; 0x10fc <vfscanf+0xe0>
    10e8:	10 c0       	rjmp	.+32     	; 0x110a <vfscanf+0xee>
    10ea:	fe 01       	movw	r30, r28
    10ec:	e3 fc       	sbrc	r14, 3
    10ee:	15 91       	lpm	r17, Z+
    10f0:	e3 fe       	sbrs	r14, 3
    10f2:	11 91       	ld	r17, Z+
    10f4:	ef 01       	movw	r28, r30
    10f6:	18 36       	cpi	r17, 0x68	; 104
    10f8:	41 f4       	brne	.+16     	; 0x110a <vfscanf+0xee>
    10fa:	08 60       	ori	r16, 0x08	; 8
    10fc:	04 60       	ori	r16, 0x04	; 4
    10fe:	fe 01       	movw	r30, r28
    1100:	e3 fc       	sbrc	r14, 3
    1102:	15 91       	lpm	r17, Z+
    1104:	e3 fe       	sbrs	r14, 3
    1106:	11 91       	ld	r17, Z+
    1108:	ef 01       	movw	r28, r30
    110a:	11 23       	and	r17, r17
    110c:	09 f4       	brne	.+2      	; 0x1110 <vfscanf+0xf4>
    110e:	8d c0       	rjmp	.+282    	; 0x122a <vfscanf+0x20e>
    1110:	61 2f       	mov	r22, r17
    1112:	70 e0       	ldi	r23, 0x00	; 0
    1114:	88 e6       	ldi	r24, 0x68	; 104
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	0e 94 28 09 	call	0x1250	; 0x1250 <strchr_P>
    111c:	89 2b       	or	r24, r25
    111e:	09 f4       	brne	.+2      	; 0x1122 <vfscanf+0x106>
    1120:	84 c0       	rjmp	.+264    	; 0x122a <vfscanf+0x20e>
    1122:	00 fd       	sbrc	r16, 0
    1124:	07 c0       	rjmp	.+14     	; 0x1134 <vfscanf+0x118>
    1126:	f5 01       	movw	r30, r10
    1128:	80 80       	ld	r8, Z
    112a:	91 80       	ldd	r9, Z+1	; 0x01
    112c:	c5 01       	movw	r24, r10
    112e:	02 96       	adiw	r24, 0x02	; 2
    1130:	5c 01       	movw	r10, r24
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <vfscanf+0x11c>
    1134:	81 2c       	mov	r8, r1
    1136:	91 2c       	mov	r9, r1
    1138:	1e 36       	cpi	r17, 0x6E	; 110
    113a:	51 f4       	brne	.+20     	; 0x1150 <vfscanf+0x134>
    113c:	f6 01       	movw	r30, r12
    113e:	46 81       	ldd	r20, Z+6	; 0x06
    1140:	57 81       	ldd	r21, Z+7	; 0x07
    1142:	60 e0       	ldi	r22, 0x00	; 0
    1144:	70 e0       	ldi	r23, 0x00	; 0
    1146:	20 2f       	mov	r18, r16
    1148:	c4 01       	movw	r24, r8
    114a:	0e 94 72 06 	call	0xce4	; 0xce4 <putval>
    114e:	73 cf       	rjmp	.-282    	; 0x1036 <vfscanf+0x1a>
    1150:	13 36       	cpi	r17, 0x63	; 99
    1152:	a9 f4       	brne	.+42     	; 0x117e <vfscanf+0x162>
    1154:	01 fd       	sbrc	r16, 1
    1156:	02 c0       	rjmp	.+4      	; 0x115c <vfscanf+0x140>
    1158:	ff 24       	eor	r15, r15
    115a:	f3 94       	inc	r15
    115c:	c6 01       	movw	r24, r12
    115e:	0e 94 33 09 	call	0x1266	; 0x1266 <fgetc>
    1162:	97 fd       	sbrc	r25, 7
    1164:	60 c0       	rjmp	.+192    	; 0x1226 <vfscanf+0x20a>
    1166:	81 14       	cp	r8, r1
    1168:	91 04       	cpc	r9, r1
    116a:	29 f0       	breq	.+10     	; 0x1176 <vfscanf+0x15a>
    116c:	f4 01       	movw	r30, r8
    116e:	80 83       	st	Z, r24
    1170:	c4 01       	movw	r24, r8
    1172:	01 96       	adiw	r24, 0x01	; 1
    1174:	4c 01       	movw	r8, r24
    1176:	fa 94       	dec	r15
    1178:	f1 10       	cpse	r15, r1
    117a:	f0 cf       	rjmp	.-32     	; 0x115c <vfscanf+0x140>
    117c:	50 c0       	rjmp	.+160    	; 0x121e <vfscanf+0x202>
    117e:	1b 35       	cpi	r17, 0x5B	; 91
    1180:	59 f4       	brne	.+22     	; 0x1198 <vfscanf+0x17c>
    1182:	9e 01       	movw	r18, r28
    1184:	a4 01       	movw	r20, r8
    1186:	6f 2d       	mov	r22, r15
    1188:	c6 01       	movw	r24, r12
    118a:	0e 94 50 07 	call	0xea0	; 0xea0 <conv_brk>
    118e:	ec 01       	movw	r28, r24
    1190:	89 2b       	or	r24, r25
    1192:	09 f0       	breq	.+2      	; 0x1196 <vfscanf+0x17a>
    1194:	44 c0       	rjmp	.+136    	; 0x121e <vfscanf+0x202>
    1196:	3e c0       	rjmp	.+124    	; 0x1214 <vfscanf+0x1f8>
    1198:	c6 01       	movw	r24, r12
    119a:	0e 94 a5 06 	call	0xd4a	; 0xd4a <skip_spaces>
    119e:	97 fd       	sbrc	r25, 7
    11a0:	42 c0       	rjmp	.+132    	; 0x1226 <vfscanf+0x20a>
    11a2:	1f 36       	cpi	r17, 0x6F	; 111
    11a4:	61 f1       	breq	.+88     	; 0x11fe <vfscanf+0x1e2>
    11a6:	28 f4       	brcc	.+10     	; 0x11b2 <vfscanf+0x196>
    11a8:	14 36       	cpi	r17, 0x64	; 100
    11aa:	39 f1       	breq	.+78     	; 0x11fa <vfscanf+0x1de>
    11ac:	19 36       	cpi	r17, 0x69	; 105
    11ae:	51 f1       	breq	.+84     	; 0x1204 <vfscanf+0x1e8>
    11b0:	28 c0       	rjmp	.+80     	; 0x1202 <vfscanf+0x1e6>
    11b2:	13 37       	cpi	r17, 0x73	; 115
    11b4:	71 f0       	breq	.+28     	; 0x11d2 <vfscanf+0x1b6>
    11b6:	15 37       	cpi	r17, 0x75	; 117
    11b8:	01 f1       	breq	.+64     	; 0x11fa <vfscanf+0x1de>
    11ba:	23 c0       	rjmp	.+70     	; 0x1202 <vfscanf+0x1e6>
    11bc:	81 14       	cp	r8, r1
    11be:	91 04       	cpc	r9, r1
    11c0:	29 f0       	breq	.+10     	; 0x11cc <vfscanf+0x1b0>
    11c2:	f4 01       	movw	r30, r8
    11c4:	60 82       	st	Z, r6
    11c6:	c4 01       	movw	r24, r8
    11c8:	01 96       	adiw	r24, 0x01	; 1
    11ca:	4c 01       	movw	r8, r24
    11cc:	fa 94       	dec	r15
    11ce:	ff 20       	and	r15, r15
    11d0:	71 f0       	breq	.+28     	; 0x11ee <vfscanf+0x1d2>
    11d2:	c6 01       	movw	r24, r12
    11d4:	0e 94 33 09 	call	0x1266	; 0x1266 <fgetc>
    11d8:	3c 01       	movw	r6, r24
    11da:	97 fd       	sbrc	r25, 7
    11dc:	08 c0       	rjmp	.+16     	; 0x11ee <vfscanf+0x1d2>
    11de:	0e 94 1f 09 	call	0x123e	; 0x123e <isspace>
    11e2:	89 2b       	or	r24, r25
    11e4:	59 f3       	breq	.-42     	; 0x11bc <vfscanf+0x1a0>
    11e6:	b6 01       	movw	r22, r12
    11e8:	c3 01       	movw	r24, r6
    11ea:	0e 94 71 09 	call	0x12e2	; 0x12e2 <ungetc>
    11ee:	81 14       	cp	r8, r1
    11f0:	91 04       	cpc	r9, r1
    11f2:	a9 f0       	breq	.+42     	; 0x121e <vfscanf+0x202>
    11f4:	f4 01       	movw	r30, r8
    11f6:	10 82       	st	Z, r1
    11f8:	12 c0       	rjmp	.+36     	; 0x121e <vfscanf+0x202>
    11fa:	00 62       	ori	r16, 0x20	; 32
    11fc:	03 c0       	rjmp	.+6      	; 0x1204 <vfscanf+0x1e8>
    11fe:	00 61       	ori	r16, 0x10	; 16
    1200:	01 c0       	rjmp	.+2      	; 0x1204 <vfscanf+0x1e8>
    1202:	00 64       	ori	r16, 0x40	; 64
    1204:	20 2f       	mov	r18, r16
    1206:	a4 01       	movw	r20, r8
    1208:	6f 2d       	mov	r22, r15
    120a:	c6 01       	movw	r24, r12
    120c:	0e 94 be 06 	call	0xd7c	; 0xd7c <conv_int>
    1210:	81 11       	cpse	r24, r1
    1212:	05 c0       	rjmp	.+10     	; 0x121e <vfscanf+0x202>
    1214:	f6 01       	movw	r30, r12
    1216:	83 81       	ldd	r24, Z+3	; 0x03
    1218:	80 73       	andi	r24, 0x30	; 48
    121a:	29 f4       	brne	.+10     	; 0x1226 <vfscanf+0x20a>
    121c:	06 c0       	rjmp	.+12     	; 0x122a <vfscanf+0x20e>
    121e:	00 fd       	sbrc	r16, 0
    1220:	0a cf       	rjmp	.-492    	; 0x1036 <vfscanf+0x1a>
    1222:	53 94       	inc	r5
    1224:	08 cf       	rjmp	.-496    	; 0x1036 <vfscanf+0x1a>
    1226:	55 20       	and	r5, r5
    1228:	19 f0       	breq	.+6      	; 0x1230 <vfscanf+0x214>
    122a:	85 2d       	mov	r24, r5
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <vfscanf+0x218>
    1230:	8f ef       	ldi	r24, 0xFF	; 255
    1232:	9f ef       	ldi	r25, 0xFF	; 255
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
    1238:	ef e0       	ldi	r30, 0x0F	; 15
    123a:	0c 94 ac 09 	jmp	0x1358	; 0x1358 <__epilogue_restores__+0x6>

0000123e <isspace>:
    123e:	91 11       	cpse	r25, r1
    1240:	0c 94 8a 09 	jmp	0x1314	; 0x1314 <__ctype_isfalse>
    1244:	80 32       	cpi	r24, 0x20	; 32
    1246:	19 f0       	breq	.+6      	; 0x124e <isspace+0x10>
    1248:	89 50       	subi	r24, 0x09	; 9
    124a:	85 50       	subi	r24, 0x05	; 5
    124c:	c8 f7       	brcc	.-14     	; 0x1240 <isspace+0x2>
    124e:	08 95       	ret

00001250 <strchr_P>:
    1250:	fc 01       	movw	r30, r24
    1252:	05 90       	lpm	r0, Z+
    1254:	06 16       	cp	r0, r22
    1256:	21 f0       	breq	.+8      	; 0x1260 <strchr_P+0x10>
    1258:	00 20       	and	r0, r0
    125a:	d9 f7       	brne	.-10     	; 0x1252 <strchr_P+0x2>
    125c:	c0 01       	movw	r24, r0
    125e:	08 95       	ret
    1260:	31 97       	sbiw	r30, 0x01	; 1
    1262:	cf 01       	movw	r24, r30
    1264:	08 95       	ret

00001266 <fgetc>:
    1266:	cf 93       	push	r28
    1268:	df 93       	push	r29
    126a:	ec 01       	movw	r28, r24
    126c:	2b 81       	ldd	r18, Y+3	; 0x03
    126e:	20 ff       	sbrs	r18, 0
    1270:	33 c0       	rjmp	.+102    	; 0x12d8 <fgetc+0x72>
    1272:	26 ff       	sbrs	r18, 6
    1274:	0a c0       	rjmp	.+20     	; 0x128a <fgetc+0x24>
    1276:	2f 7b       	andi	r18, 0xBF	; 191
    1278:	2b 83       	std	Y+3, r18	; 0x03
    127a:	8e 81       	ldd	r24, Y+6	; 0x06
    127c:	9f 81       	ldd	r25, Y+7	; 0x07
    127e:	01 96       	adiw	r24, 0x01	; 1
    1280:	9f 83       	std	Y+7, r25	; 0x07
    1282:	8e 83       	std	Y+6, r24	; 0x06
    1284:	8a 81       	ldd	r24, Y+2	; 0x02
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	29 c0       	rjmp	.+82     	; 0x12dc <fgetc+0x76>
    128a:	22 ff       	sbrs	r18, 2
    128c:	0f c0       	rjmp	.+30     	; 0x12ac <fgetc+0x46>
    128e:	e8 81       	ld	r30, Y
    1290:	f9 81       	ldd	r31, Y+1	; 0x01
    1292:	80 81       	ld	r24, Z
    1294:	08 2e       	mov	r0, r24
    1296:	00 0c       	add	r0, r0
    1298:	99 0b       	sbc	r25, r25
    129a:	00 97       	sbiw	r24, 0x00	; 0
    129c:	19 f4       	brne	.+6      	; 0x12a4 <fgetc+0x3e>
    129e:	20 62       	ori	r18, 0x20	; 32
    12a0:	2b 83       	std	Y+3, r18	; 0x03
    12a2:	1a c0       	rjmp	.+52     	; 0x12d8 <fgetc+0x72>
    12a4:	31 96       	adiw	r30, 0x01	; 1
    12a6:	f9 83       	std	Y+1, r31	; 0x01
    12a8:	e8 83       	st	Y, r30
    12aa:	0e c0       	rjmp	.+28     	; 0x12c8 <fgetc+0x62>
    12ac:	ea 85       	ldd	r30, Y+10	; 0x0a
    12ae:	fb 85       	ldd	r31, Y+11	; 0x0b
    12b0:	09 95       	icall
    12b2:	97 ff       	sbrs	r25, 7
    12b4:	09 c0       	rjmp	.+18     	; 0x12c8 <fgetc+0x62>
    12b6:	2b 81       	ldd	r18, Y+3	; 0x03
    12b8:	01 96       	adiw	r24, 0x01	; 1
    12ba:	11 f0       	breq	.+4      	; 0x12c0 <fgetc+0x5a>
    12bc:	80 e2       	ldi	r24, 0x20	; 32
    12be:	01 c0       	rjmp	.+2      	; 0x12c2 <fgetc+0x5c>
    12c0:	80 e1       	ldi	r24, 0x10	; 16
    12c2:	82 2b       	or	r24, r18
    12c4:	8b 83       	std	Y+3, r24	; 0x03
    12c6:	08 c0       	rjmp	.+16     	; 0x12d8 <fgetc+0x72>
    12c8:	2e 81       	ldd	r18, Y+6	; 0x06
    12ca:	3f 81       	ldd	r19, Y+7	; 0x07
    12cc:	2f 5f       	subi	r18, 0xFF	; 255
    12ce:	3f 4f       	sbci	r19, 0xFF	; 255
    12d0:	3f 83       	std	Y+7, r19	; 0x07
    12d2:	2e 83       	std	Y+6, r18	; 0x06
    12d4:	99 27       	eor	r25, r25
    12d6:	02 c0       	rjmp	.+4      	; 0x12dc <fgetc+0x76>
    12d8:	8f ef       	ldi	r24, 0xFF	; 255
    12da:	9f ef       	ldi	r25, 0xFF	; 255
    12dc:	df 91       	pop	r29
    12de:	cf 91       	pop	r28
    12e0:	08 95       	ret

000012e2 <ungetc>:
    12e2:	fb 01       	movw	r30, r22
    12e4:	23 81       	ldd	r18, Z+3	; 0x03
    12e6:	20 ff       	sbrs	r18, 0
    12e8:	12 c0       	rjmp	.+36     	; 0x130e <ungetc+0x2c>
    12ea:	26 fd       	sbrc	r18, 6
    12ec:	10 c0       	rjmp	.+32     	; 0x130e <ungetc+0x2c>
    12ee:	8f 3f       	cpi	r24, 0xFF	; 255
    12f0:	3f ef       	ldi	r19, 0xFF	; 255
    12f2:	93 07       	cpc	r25, r19
    12f4:	61 f0       	breq	.+24     	; 0x130e <ungetc+0x2c>
    12f6:	82 83       	std	Z+2, r24	; 0x02
    12f8:	2f 7d       	andi	r18, 0xDF	; 223
    12fa:	20 64       	ori	r18, 0x40	; 64
    12fc:	23 83       	std	Z+3, r18	; 0x03
    12fe:	26 81       	ldd	r18, Z+6	; 0x06
    1300:	37 81       	ldd	r19, Z+7	; 0x07
    1302:	21 50       	subi	r18, 0x01	; 1
    1304:	31 09       	sbc	r19, r1
    1306:	37 83       	std	Z+7, r19	; 0x07
    1308:	26 83       	std	Z+6, r18	; 0x06
    130a:	99 27       	eor	r25, r25
    130c:	08 95       	ret
    130e:	8f ef       	ldi	r24, 0xFF	; 255
    1310:	9f ef       	ldi	r25, 0xFF	; 255
    1312:	08 95       	ret

00001314 <__ctype_isfalse>:
    1314:	99 27       	eor	r25, r25
    1316:	88 27       	eor	r24, r24

00001318 <__ctype_istrue>:
    1318:	08 95       	ret

0000131a <__prologue_saves__>:
    131a:	2f 92       	push	r2
    131c:	3f 92       	push	r3
    131e:	4f 92       	push	r4
    1320:	5f 92       	push	r5
    1322:	6f 92       	push	r6
    1324:	7f 92       	push	r7
    1326:	8f 92       	push	r8
    1328:	9f 92       	push	r9
    132a:	af 92       	push	r10
    132c:	bf 92       	push	r11
    132e:	cf 92       	push	r12
    1330:	df 92       	push	r13
    1332:	ef 92       	push	r14
    1334:	ff 92       	push	r15
    1336:	0f 93       	push	r16
    1338:	1f 93       	push	r17
    133a:	cf 93       	push	r28
    133c:	df 93       	push	r29
    133e:	cd b7       	in	r28, 0x3d	; 61
    1340:	de b7       	in	r29, 0x3e	; 62
    1342:	ca 1b       	sub	r28, r26
    1344:	db 0b       	sbc	r29, r27
    1346:	0f b6       	in	r0, 0x3f	; 63
    1348:	f8 94       	cli
    134a:	de bf       	out	0x3e, r29	; 62
    134c:	0f be       	out	0x3f, r0	; 63
    134e:	cd bf       	out	0x3d, r28	; 61
    1350:	09 94       	ijmp

00001352 <__epilogue_restores__>:
    1352:	2a 88       	ldd	r2, Y+18	; 0x12
    1354:	39 88       	ldd	r3, Y+17	; 0x11
    1356:	48 88       	ldd	r4, Y+16	; 0x10
    1358:	5f 84       	ldd	r5, Y+15	; 0x0f
    135a:	6e 84       	ldd	r6, Y+14	; 0x0e
    135c:	7d 84       	ldd	r7, Y+13	; 0x0d
    135e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1360:	9b 84       	ldd	r9, Y+11	; 0x0b
    1362:	aa 84       	ldd	r10, Y+10	; 0x0a
    1364:	b9 84       	ldd	r11, Y+9	; 0x09
    1366:	c8 84       	ldd	r12, Y+8	; 0x08
    1368:	df 80       	ldd	r13, Y+7	; 0x07
    136a:	ee 80       	ldd	r14, Y+6	; 0x06
    136c:	fd 80       	ldd	r15, Y+5	; 0x05
    136e:	0c 81       	ldd	r16, Y+4	; 0x04
    1370:	1b 81       	ldd	r17, Y+3	; 0x03
    1372:	aa 81       	ldd	r26, Y+2	; 0x02
    1374:	b9 81       	ldd	r27, Y+1	; 0x01
    1376:	ce 0f       	add	r28, r30
    1378:	d1 1d       	adc	r29, r1
    137a:	0f b6       	in	r0, 0x3f	; 63
    137c:	f8 94       	cli
    137e:	de bf       	out	0x3e, r29	; 62
    1380:	0f be       	out	0x3f, r0	; 63
    1382:	cd bf       	out	0x3d, r28	; 61
    1384:	ed 01       	movw	r28, r26
    1386:	08 95       	ret

00001388 <_exit>:
    1388:	f8 94       	cli

0000138a <__stop_program>:
    138a:	ff cf       	rjmp	.-2      	; 0x138a <__stop_program>
