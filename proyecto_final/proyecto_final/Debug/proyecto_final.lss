
proyecto_final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000013ec  00001480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  0080010a  0080010a  0000148a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000148a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000014e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00001528  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001386  00000000  00000000  00001640  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a16  00000000  00000000  000029c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c9a  00000000  00000000  000033dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ac  00000000  00000000  00004078  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f5  00000000  00000000  00004324  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005e8  00000000  00000000  00004919  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00004f01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 2f 04 	jmp	0x85e	; 0x85e <__vector_5>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 b1 03 	jmp	0x762	; 0x762 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec ee       	ldi	r30, 0xEC	; 236
      7c:	f3 e1       	ldi	r31, 0x13	; 19
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 30       	cpi	r26, 0x0A	; 10
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	aa e0       	ldi	r26, 0x0A	; 10
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a1 33       	cpi	r26, 0x31	; 49
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 33 02 	call	0x466	; 0x466 <main>
      9e:	0c 94 f4 09 	jmp	0x13e8	; 0x13e8 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <writeEEPROM>:
// NON-Interrupt subroutines

void writeEEPROM(uint8_t dato, uint16_t direccion)
{
	// 0b00000010 sigue escribiendo, si 0b00000000 ya termino de escribir
	while (EECR &(1 << EEPE));															// ESPERAMOS A QUE BIT 0b000000X0 sea 0 (osea ya termino de escribir)
      a6:	f9 99       	sbic	0x1f, 1	; 31
      a8:	fe cf       	rjmp	.-4      	; 0xa6 <writeEEPROM>
	// Ya termino entonces ya puede empezar a escribir otra vez (le digo a donde "direccion")
	EEAR = direccion;																	// ar (address)
      aa:	72 bd       	out	0x22, r23	; 34
      ac:	61 bd       	out	0x21, r22	; 33
	// Establecer dato que quiero guardar
	EEDR = dato;																		// dr (data)
      ae:	80 bd       	out	0x20, r24	; 32
	EECR |= (1 << EEMPE);																// Master Write enable
      b0:	8f b3       	in	r24, 0x1f	; 31
      b2:	84 60       	ori	r24, 0x04	; 4
      b4:	8f bb       	out	0x1f, r24	; 31
	EECR |= (1 << EEPE);																// habilito escritura
      b6:	8f b3       	in	r24, 0x1f	; 31
      b8:	82 60       	ori	r24, 0x02	; 2
      ba:	8f bb       	out	0x1f, r24	; 31
      bc:	08 95       	ret

000000be <readEEPROM>:
}

uint8_t	 readEEPROM(uint16_t direccion)
{
	while (EECR &(1 << EEPE));															// ESPERAMOS A QUE BIT 0b000000X0 sea 0 (osea ya termino de escribir)
      be:	f9 99       	sbic	0x1f, 1	; 31
      c0:	fe cf       	rjmp	.-4      	; 0xbe <readEEPROM>
	EEAR = direccion;																	// Le digo donde leer
      c2:	92 bd       	out	0x22, r25	; 34
      c4:	81 bd       	out	0x21, r24	; 33
	EECR |= (1 << EERE);																// empezar lectura
      c6:	8f b3       	in	r24, 0x1f	; 31
      c8:	81 60       	ori	r24, 0x01	; 1
      ca:	8f bb       	out	0x1f, r24	; 31
	return EEDR;																		// regresa lectura
      cc:	80 b5       	in	r24, 0x20	; 32
}
      ce:	08 95       	ret

000000d0 <init_ADC>:
}

// NON-Interrupt functions
void init_ADC()
{
	ADMUX = 0;																		// LIMPIAR REGISTRO
      d0:	ec e7       	ldi	r30, 0x7C	; 124
      d2:	f0 e0       	ldi	r31, 0x00	; 0
      d4:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0);															// utilizar AVcc como referencia (5v)
      d6:	80 81       	ld	r24, Z
      d8:	80 64       	ori	r24, 0x40	; 64
      da:	80 83       	st	Z, r24
	ADMUX |= (1 << ADLAR);															// justificado a la izquierda (y leo 8 bits mas significativos)
      dc:	80 81       	ld	r24, Z
      de:	80 62       	ori	r24, 0x20	; 32
      e0:	80 83       	st	Z, r24
	ADMUX |= (1 << MUX0);															// utilizar PC1 para potenciometro
      e2:	80 81       	ld	r24, Z
      e4:	81 60       	ori	r24, 0x01	; 1
      e6:	80 83       	st	Z, r24
	
	ADCSRA = 0;																		// LIMPIAR REGISTRO
      e8:	ea e7       	ldi	r30, 0x7A	; 122
      ea:	f0 e0       	ldi	r31, 0x00	; 0
      ec:	10 82       	st	Z, r1
	ADCSRA |= (1 << ADEN);															// Activar ADC
      ee:	80 81       	ld	r24, Z
      f0:	80 68       	ori	r24, 0x80	; 128
      f2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);															// Activar interrupcion del ADC
      f4:	80 81       	ld	r24, Z
      f6:	88 60       	ori	r24, 0x08	; 8
      f8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);							// prescaler 128
      fa:	80 81       	ld	r24, Z
      fc:	87 60       	ori	r24, 0x07	; 7
      fe:	80 83       	st	Z, r24
     100:	08 95       	ret

00000102 <setup>:
	//ADCSRA |= (1 << ADSC);															// iniciar primera conversión
}

void setup()
{
	DDRB |= (1 << PORTB5) | (1 << PORTB4) | (1 << PORTB0);							// SALIDA LED´S modos
     102:	84 b1       	in	r24, 0x04	; 4
     104:	81 63       	ori	r24, 0x31	; 49
     106:	84 b9       	out	0x04, r24	; 4
	
	DDRD &= ~((1 << PORTD4) | (1 << PORTD5) | (1 << PORTD6));						// entradas botones
     108:	8a b1       	in	r24, 0x0a	; 10
     10a:	8f 78       	andi	r24, 0x8F	; 143
     10c:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PORTD4) | (1 << PORTD5) |(1 << PORTD6);							// pull up internos
     10e:	8b b1       	in	r24, 0x0b	; 11
     110:	80 67       	ori	r24, 0x70	; 112
     112:	8b b9       	out	0x0b, r24	; 11
	//-------------LED´S EEPROM---------------//
	DDRC |= (1 << PORTC0) | (1 << PORTC5);
     114:	87 b1       	in	r24, 0x07	; 7
     116:	81 62       	ori	r24, 0x21	; 33
     118:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1 << PORTD7) | (1 << PORTD2);
     11a:	8a b1       	in	r24, 0x0a	; 10
     11c:	84 68       	ori	r24, 0x84	; 132
     11e:	8a b9       	out	0x0a, r24	; 10
	PORTC &= ~((1 << PORTC0) | (1 << PORTC5));
     120:	88 b1       	in	r24, 0x08	; 8
     122:	8e 7d       	andi	r24, 0xDE	; 222
     124:	88 b9       	out	0x08, r24	; 8
	PORTD &= ~((1 << PORTD7) | (1 << PORTD2));
     126:	8b b1       	in	r24, 0x0b	; 11
     128:	8b 77       	andi	r24, 0x7B	; 123
     12a:	8b b9       	out	0x0b, r24	; 11
	//-----------Interrupciones--------------//
	PCICR  |= (1<<PCIE2);															// pin-change interrupt puertoD
     12c:	e8 e6       	ldi	r30, 0x68	; 104
     12e:	f0 e0       	ldi	r31, 0x00	; 0
     130:	80 81       	ld	r24, Z
     132:	84 60       	ori	r24, 0x04	; 4
     134:	80 83       	st	Z, r24
	PCMSK2 |= (1<<PCINT22) | (1 << PCINT21) | (1 << PCINT20);						// BOTON MODO EN PD6, PD5 MOSTRAR Y PD4 GUARDAR
     136:	ed e6       	ldi	r30, 0x6D	; 109
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	80 81       	ld	r24, Z
     13c:	80 67       	ori	r24, 0x70	; 112
     13e:	80 83       	st	Z, r24
     140:	08 95       	ret

00000142 <guardar>:
}

void guardar()
{
	
	switch (contador_pos)
     142:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <contador_pos>
     146:	81 30       	cpi	r24, 0x01	; 1
     148:	69 f1       	breq	.+90     	; 0x1a4 <guardar+0x62>
     14a:	38 f0       	brcs	.+14     	; 0x15a <guardar+0x18>
     14c:	82 30       	cpi	r24, 0x02	; 2
     14e:	09 f4       	brne	.+2      	; 0x152 <guardar+0x10>
     150:	4e c0       	rjmp	.+156    	; 0x1ee <guardar+0xac>
     152:	83 30       	cpi	r24, 0x03	; 3
     154:	09 f4       	brne	.+2      	; 0x158 <guardar+0x16>
     156:	70 c0       	rjmp	.+224    	; 0x238 <guardar+0xf6>
     158:	93 c0       	rjmp	.+294    	; 0x280 <guardar+0x13e>
	{
		case 0:
		PORTC &= ~(1 << PORTC0);
     15a:	88 b1       	in	r24, 0x08	; 8
     15c:	8e 7f       	andi	r24, 0xFE	; 254
     15e:	88 b9       	out	0x08, r24	; 8
		PORTC |= (1 << PORTC5);
     160:	88 b1       	in	r24, 0x08	; 8
     162:	80 62       	ori	r24, 0x20	; 32
     164:	88 b9       	out	0x08, r24	; 8
		PORTD &= ~(1 << PORTD7);
     166:	8b b1       	in	r24, 0x0b	; 11
     168:	8f 77       	andi	r24, 0x7F	; 127
     16a:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1 << PORTD2);
     16c:	8b b1       	in	r24, 0x0b	; 11
     16e:	8b 7f       	andi	r24, 0xFB	; 251
     170:	8b b9       	out	0x0b, r24	; 11
		writeEEPROM(servo1, 0);													// registro de memoria (0, 4, 8 y 12)
     172:	60 e0       	ldi	r22, 0x00	; 0
     174:	70 e0       	ldi	r23, 0x00	; 0
     176:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <servo1>
     17a:	0e 94 53 00 	call	0xa6	; 0xa6 <writeEEPROM>
		writeEEPROM(servo2, 1);													// registro de memoria (1, 5, 9 y 13)
     17e:	61 e0       	ldi	r22, 0x01	; 1
     180:	70 e0       	ldi	r23, 0x00	; 0
     182:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <servo2>
     186:	0e 94 53 00 	call	0xa6	; 0xa6 <writeEEPROM>
		writeEEPROM(servo3, 2);													// registro de memoria (2, 6, 10 y 14)
     18a:	62 e0       	ldi	r22, 0x02	; 2
     18c:	70 e0       	ldi	r23, 0x00	; 0
     18e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <servo3>
     192:	0e 94 53 00 	call	0xa6	; 0xa6 <writeEEPROM>
		writeEEPROM(servo4, 3);
     196:	63 e0       	ldi	r22, 0x03	; 3
     198:	70 e0       	ldi	r23, 0x00	; 0
     19a:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <servo4>
     19e:	0e 94 53 00 	call	0xa6	; 0xa6 <writeEEPROM>
		break;
     1a2:	6e c0       	rjmp	.+220    	; 0x280 <guardar+0x13e>
		case 1:
		PORTC |= (1 << PORTC0);
     1a4:	88 b1       	in	r24, 0x08	; 8
     1a6:	81 60       	ori	r24, 0x01	; 1
     1a8:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC5);
     1aa:	88 b1       	in	r24, 0x08	; 8
     1ac:	8f 7d       	andi	r24, 0xDF	; 223
     1ae:	88 b9       	out	0x08, r24	; 8
		PORTD &= ~(1 << PORTD7);
     1b0:	8b b1       	in	r24, 0x0b	; 11
     1b2:	8f 77       	andi	r24, 0x7F	; 127
     1b4:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1 << PORTD2);
     1b6:	8b b1       	in	r24, 0x0b	; 11
     1b8:	8b 7f       	andi	r24, 0xFB	; 251
     1ba:	8b b9       	out	0x0b, r24	; 11
		writeEEPROM(servo1, 4);													// registro de memoria (0, 4, 8 y 12)
     1bc:	64 e0       	ldi	r22, 0x04	; 4
     1be:	70 e0       	ldi	r23, 0x00	; 0
     1c0:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <servo1>
     1c4:	0e 94 53 00 	call	0xa6	; 0xa6 <writeEEPROM>
		writeEEPROM(servo2, 5);													// registro de memoria (1, 5, 9 y 13)
     1c8:	65 e0       	ldi	r22, 0x05	; 5
     1ca:	70 e0       	ldi	r23, 0x00	; 0
     1cc:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <servo2>
     1d0:	0e 94 53 00 	call	0xa6	; 0xa6 <writeEEPROM>
		writeEEPROM(servo3, 6);													// registro de memoria (2, 6, 10 y 14)
     1d4:	66 e0       	ldi	r22, 0x06	; 6
     1d6:	70 e0       	ldi	r23, 0x00	; 0
     1d8:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <servo3>
     1dc:	0e 94 53 00 	call	0xa6	; 0xa6 <writeEEPROM>
		writeEEPROM(servo4, 7);
     1e0:	67 e0       	ldi	r22, 0x07	; 7
     1e2:	70 e0       	ldi	r23, 0x00	; 0
     1e4:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <servo4>
     1e8:	0e 94 53 00 	call	0xa6	; 0xa6 <writeEEPROM>
		break;
     1ec:	49 c0       	rjmp	.+146    	; 0x280 <guardar+0x13e>
		case 2:
		PORTC &= ~(1 << PORTC0);
     1ee:	88 b1       	in	r24, 0x08	; 8
     1f0:	8e 7f       	andi	r24, 0xFE	; 254
     1f2:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC5);
     1f4:	88 b1       	in	r24, 0x08	; 8
     1f6:	8f 7d       	andi	r24, 0xDF	; 223
     1f8:	88 b9       	out	0x08, r24	; 8
		PORTD |= (1 << PORTD7);
     1fa:	8b b1       	in	r24, 0x0b	; 11
     1fc:	80 68       	ori	r24, 0x80	; 128
     1fe:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1 << PORTD2);
     200:	8b b1       	in	r24, 0x0b	; 11
     202:	8b 7f       	andi	r24, 0xFB	; 251
     204:	8b b9       	out	0x0b, r24	; 11
		writeEEPROM(servo1, 8);													// registro de memoria (0, 4, 8 y 12)
     206:	68 e0       	ldi	r22, 0x08	; 8
     208:	70 e0       	ldi	r23, 0x00	; 0
     20a:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <servo1>
     20e:	0e 94 53 00 	call	0xa6	; 0xa6 <writeEEPROM>
		writeEEPROM(servo2, 9);													// registro de memoria (1, 5, 9 y 13)
     212:	69 e0       	ldi	r22, 0x09	; 9
     214:	70 e0       	ldi	r23, 0x00	; 0
     216:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <servo2>
     21a:	0e 94 53 00 	call	0xa6	; 0xa6 <writeEEPROM>
		writeEEPROM(servo3, 10);													// registro de memoria (2, 6, 10 y 14)
     21e:	6a e0       	ldi	r22, 0x0A	; 10
     220:	70 e0       	ldi	r23, 0x00	; 0
     222:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <servo3>
     226:	0e 94 53 00 	call	0xa6	; 0xa6 <writeEEPROM>
		writeEEPROM(servo4, 11);
     22a:	6b e0       	ldi	r22, 0x0B	; 11
     22c:	70 e0       	ldi	r23, 0x00	; 0
     22e:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <servo4>
     232:	0e 94 53 00 	call	0xa6	; 0xa6 <writeEEPROM>
		break;
     236:	24 c0       	rjmp	.+72     	; 0x280 <guardar+0x13e>
		case 3:
		PORTC &= ~(1 << PORTC0);
     238:	88 b1       	in	r24, 0x08	; 8
     23a:	8e 7f       	andi	r24, 0xFE	; 254
     23c:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC5);
     23e:	88 b1       	in	r24, 0x08	; 8
     240:	8f 7d       	andi	r24, 0xDF	; 223
     242:	88 b9       	out	0x08, r24	; 8
		PORTD &= ~(1 << PORTD7);
     244:	8b b1       	in	r24, 0x0b	; 11
     246:	8f 77       	andi	r24, 0x7F	; 127
     248:	8b b9       	out	0x0b, r24	; 11
		PORTD |= (1 << PORTD2);
     24a:	8b b1       	in	r24, 0x0b	; 11
     24c:	84 60       	ori	r24, 0x04	; 4
     24e:	8b b9       	out	0x0b, r24	; 11
		writeEEPROM(servo1, 12);													// registro de memoria (0, 4, 8 y 12)
     250:	6c e0       	ldi	r22, 0x0C	; 12
     252:	70 e0       	ldi	r23, 0x00	; 0
     254:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <servo1>
     258:	0e 94 53 00 	call	0xa6	; 0xa6 <writeEEPROM>
		writeEEPROM(servo2, 13);													// registro de memoria (1, 5, 9 y 13)
     25c:	6d e0       	ldi	r22, 0x0D	; 13
     25e:	70 e0       	ldi	r23, 0x00	; 0
     260:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <servo2>
     264:	0e 94 53 00 	call	0xa6	; 0xa6 <writeEEPROM>
		writeEEPROM(servo3, 14);													// registro de memoria (2, 6, 10 y 14)
     268:	6e e0       	ldi	r22, 0x0E	; 14
     26a:	70 e0       	ldi	r23, 0x00	; 0
     26c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <servo3>
     270:	0e 94 53 00 	call	0xa6	; 0xa6 <writeEEPROM>
		writeEEPROM(servo4, 15);
     274:	6f e0       	ldi	r22, 0x0F	; 15
     276:	70 e0       	ldi	r23, 0x00	; 0
     278:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <servo4>
     27c:	0e 94 53 00 	call	0xa6	; 0xa6 <writeEEPROM>
		break;
	}
	contador_pos = (contador_pos + 1) % 4;
     280:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <contador_pos>
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	01 96       	adiw	r24, 0x01	; 1
     288:	83 70       	andi	r24, 0x03	; 3
     28a:	90 78       	andi	r25, 0x80	; 128
     28c:	99 23       	and	r25, r25
     28e:	24 f4       	brge	.+8      	; 0x298 <guardar+0x156>
     290:	01 97       	sbiw	r24, 0x01	; 1
     292:	8c 6f       	ori	r24, 0xFC	; 252
     294:	9f 6f       	ori	r25, 0xFF	; 255
     296:	01 96       	adiw	r24, 0x01	; 1
     298:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <contador_pos>
     29c:	08 95       	ret

0000029e <mostrar>:
}

void mostrar()
{
	
	switch(pos_actual)
     29e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <pos_actual>
     2a2:	81 30       	cpi	r24, 0x01	; 1
     2a4:	79 f1       	breq	.+94     	; 0x304 <mostrar+0x66>
     2a6:	38 f0       	brcs	.+14     	; 0x2b6 <mostrar+0x18>
     2a8:	82 30       	cpi	r24, 0x02	; 2
     2aa:	09 f4       	brne	.+2      	; 0x2ae <mostrar+0x10>
     2ac:	52 c0       	rjmp	.+164    	; 0x352 <mostrar+0xb4>
     2ae:	83 30       	cpi	r24, 0x03	; 3
     2b0:	09 f4       	brne	.+2      	; 0x2b4 <mostrar+0x16>
     2b2:	76 c0       	rjmp	.+236    	; 0x3a0 <mostrar+0x102>
     2b4:	9b c0       	rjmp	.+310    	; 0x3ec <mostrar+0x14e>
	{
		case 0:
		PORTC &= ~(1 << PORTC0);
     2b6:	88 b1       	in	r24, 0x08	; 8
     2b8:	8e 7f       	andi	r24, 0xFE	; 254
     2ba:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC5);
     2bc:	88 b1       	in	r24, 0x08	; 8
     2be:	8f 7d       	andi	r24, 0xDF	; 223
     2c0:	88 b9       	out	0x08, r24	; 8
		PORTD &= ~(1 << PORTD7);
     2c2:	8b b1       	in	r24, 0x0b	; 11
     2c4:	8f 77       	andi	r24, 0x7F	; 127
     2c6:	8b b9       	out	0x0b, r24	; 11
		PORTD |= (1 << PORTD2);
     2c8:	8b b1       	in	r24, 0x0b	; 11
     2ca:	84 60       	ori	r24, 0x04	; 4
     2cc:	8b b9       	out	0x0b, r24	; 11
		pulso_PWM1(readEEPROM(0));												// Posiciones 0, 4, 8 y 12 para servo1
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	0e 94 5f 00 	call	0xbe	; 0xbe <readEEPROM>
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	0e 94 99 04 	call	0x932	; 0x932 <pulso_PWM1>
		pulso2_PWM1(readEEPROM(1));
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	0e 94 5f 00 	call	0xbe	; 0xbe <readEEPROM>
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	0e 94 b1 04 	call	0x962	; 0x962 <pulso2_PWM1>
		pulse_PWM2(readEEPROM(2));
     2ea:	82 e0       	ldi	r24, 0x02	; 2
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	0e 94 5f 00 	call	0xbe	; 0xbe <readEEPROM>
     2f2:	0e 94 df 04 	call	0x9be	; 0x9be <pulse_PWM2>
		pulse2_PWM2(readEEPROM(3));
     2f6:	83 e0       	ldi	r24, 0x03	; 3
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	0e 94 5f 00 	call	0xbe	; 0xbe <readEEPROM>
     2fe:	0e 94 f6 04 	call	0x9ec	; 0x9ec <pulse2_PWM2>
		break;
     302:	74 c0       	rjmp	.+232    	; 0x3ec <mostrar+0x14e>
		case 1:
		PORTC &= ~(1 << PORTC0);
     304:	88 b1       	in	r24, 0x08	; 8
     306:	8e 7f       	andi	r24, 0xFE	; 254
     308:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC5);
     30a:	88 b1       	in	r24, 0x08	; 8
     30c:	8f 7d       	andi	r24, 0xDF	; 223
     30e:	88 b9       	out	0x08, r24	; 8
		PORTD |= (1 << PORTD7);
     310:	8b b1       	in	r24, 0x0b	; 11
     312:	80 68       	ori	r24, 0x80	; 128
     314:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1 << PORTD2);
     316:	8b b1       	in	r24, 0x0b	; 11
     318:	8b 7f       	andi	r24, 0xFB	; 251
     31a:	8b b9       	out	0x0b, r24	; 11
		pulso_PWM1(readEEPROM(4));
     31c:	84 e0       	ldi	r24, 0x04	; 4
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	0e 94 5f 00 	call	0xbe	; 0xbe <readEEPROM>
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	0e 94 99 04 	call	0x932	; 0x932 <pulso_PWM1>
		pulso2_PWM1(readEEPROM(5));												// Posiciones 1, 5, 9 y 13 para servo2
     32a:	85 e0       	ldi	r24, 0x05	; 5
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	0e 94 5f 00 	call	0xbe	; 0xbe <readEEPROM>
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	0e 94 b1 04 	call	0x962	; 0x962 <pulso2_PWM1>
		pulse_PWM2(readEEPROM(6));
     338:	86 e0       	ldi	r24, 0x06	; 6
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	0e 94 5f 00 	call	0xbe	; 0xbe <readEEPROM>
     340:	0e 94 df 04 	call	0x9be	; 0x9be <pulse_PWM2>
		pulse2_PWM2(readEEPROM(7));
     344:	87 e0       	ldi	r24, 0x07	; 7
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	0e 94 5f 00 	call	0xbe	; 0xbe <readEEPROM>
     34c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <pulse2_PWM2>
		break;
     350:	4d c0       	rjmp	.+154    	; 0x3ec <mostrar+0x14e>
		case 2:
		PORTC |= (1 << PORTC0);
     352:	88 b1       	in	r24, 0x08	; 8
     354:	81 60       	ori	r24, 0x01	; 1
     356:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC5);
     358:	88 b1       	in	r24, 0x08	; 8
     35a:	8f 7d       	andi	r24, 0xDF	; 223
     35c:	88 b9       	out	0x08, r24	; 8
		PORTD &= ~(1 << PORTD7);
     35e:	8b b1       	in	r24, 0x0b	; 11
     360:	8f 77       	andi	r24, 0x7F	; 127
     362:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1 << PORTD2);
     364:	8b b1       	in	r24, 0x0b	; 11
     366:	8b 7f       	andi	r24, 0xFB	; 251
     368:	8b b9       	out	0x0b, r24	; 11
		pulso_PWM1(readEEPROM(8));
     36a:	88 e0       	ldi	r24, 0x08	; 8
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	0e 94 5f 00 	call	0xbe	; 0xbe <readEEPROM>
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	0e 94 99 04 	call	0x932	; 0x932 <pulso_PWM1>
		pulso2_PWM1(readEEPROM(9));
     378:	89 e0       	ldi	r24, 0x09	; 9
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	0e 94 5f 00 	call	0xbe	; 0xbe <readEEPROM>
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	0e 94 b1 04 	call	0x962	; 0x962 <pulso2_PWM1>
		pulse_PWM2(readEEPROM(10));												// Posiciones 2, 6, 10 y 14 para servo3
     386:	8a e0       	ldi	r24, 0x0A	; 10
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	0e 94 5f 00 	call	0xbe	; 0xbe <readEEPROM>
     38e:	0e 94 df 04 	call	0x9be	; 0x9be <pulse_PWM2>
		pulse2_PWM2(readEEPROM(11));
     392:	8b e0       	ldi	r24, 0x0B	; 11
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	0e 94 5f 00 	call	0xbe	; 0xbe <readEEPROM>
     39a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <pulse2_PWM2>
		break;
     39e:	26 c0       	rjmp	.+76     	; 0x3ec <mostrar+0x14e>
		case 3:
		PORTC &= ~(1 << PORTC0);
     3a0:	88 b1       	in	r24, 0x08	; 8
     3a2:	8e 7f       	andi	r24, 0xFE	; 254
     3a4:	88 b9       	out	0x08, r24	; 8
		PORTC |= (1 << PORTC5);
     3a6:	88 b1       	in	r24, 0x08	; 8
     3a8:	80 62       	ori	r24, 0x20	; 32
     3aa:	88 b9       	out	0x08, r24	; 8
		PORTD &= ~(1 << PORTD7);
     3ac:	8b b1       	in	r24, 0x0b	; 11
     3ae:	8f 77       	andi	r24, 0x7F	; 127
     3b0:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1 << PORTD2);
     3b2:	8b b1       	in	r24, 0x0b	; 11
     3b4:	8b 7f       	andi	r24, 0xFB	; 251
     3b6:	8b b9       	out	0x0b, r24	; 11
		pulso_PWM1(readEEPROM(12));
     3b8:	8c e0       	ldi	r24, 0x0C	; 12
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	0e 94 5f 00 	call	0xbe	; 0xbe <readEEPROM>
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	0e 94 99 04 	call	0x932	; 0x932 <pulso_PWM1>
		pulso2_PWM1(readEEPROM(13));
     3c6:	8d e0       	ldi	r24, 0x0D	; 13
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	0e 94 5f 00 	call	0xbe	; 0xbe <readEEPROM>
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	0e 94 b1 04 	call	0x962	; 0x962 <pulso2_PWM1>
		pulse_PWM2(readEEPROM(14));
     3d4:	8e e0       	ldi	r24, 0x0E	; 14
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	0e 94 5f 00 	call	0xbe	; 0xbe <readEEPROM>
     3dc:	0e 94 df 04 	call	0x9be	; 0x9be <pulse_PWM2>
		pulse2_PWM2(readEEPROM(15));												// Posiciones 3, 7, 11 y 15 para servo4
     3e0:	8f e0       	ldi	r24, 0x0F	; 15
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	0e 94 5f 00 	call	0xbe	; 0xbe <readEEPROM>
     3e8:	0e 94 f6 04 	call	0x9ec	; 0x9ec <pulse2_PWM2>
		break;
	}
	
	pos_actual = (pos_actual + 1) % 4;
     3ec:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <pos_actual>
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	01 96       	adiw	r24, 0x01	; 1
     3f4:	83 70       	andi	r24, 0x03	; 3
     3f6:	90 78       	andi	r25, 0x80	; 128
     3f8:	99 23       	and	r25, r25
     3fa:	24 f4       	brge	.+8      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     3fc:	01 97       	sbiw	r24, 0x01	; 1
     3fe:	8c 6f       	ori	r24, 0xFC	; 252
     400:	9f 6f       	ori	r25, 0xFF	; 255
     402:	01 96       	adiw	r24, 0x01	; 1
     404:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <pos_actual>
     408:	08 95       	ret

0000040a <enviar_feedback>:
}

void enviar_feedback(uint8_t motor, uint8_t ang)
{
     40a:	0f 93       	push	r16
     40c:	1f 93       	push	r17
     40e:	cf 93       	push	r28
     410:	df 93       	push	r29
     412:	cd b7       	in	r28, 0x3d	; 61
     414:	de b7       	in	r29, 0x3e	; 62
     416:	29 97       	sbiw	r28, 0x09	; 9
     418:	0f b6       	in	r0, 0x3f	; 63
     41a:	f8 94       	cli
     41c:	de bf       	out	0x3e, r29	; 62
     41e:	0f be       	out	0x3f, r0	; 63
     420:	cd bf       	out	0x3d, r28	; 61
	char porfavor[9];
	sprintf(porfavor, "s%u:%u", motor, ang);
     422:	1f 92       	push	r1
     424:	6f 93       	push	r22
     426:	1f 92       	push	r1
     428:	8f 93       	push	r24
     42a:	80 e0       	ldi	r24, 0x00	; 0
     42c:	91 e0       	ldi	r25, 0x01	; 1
     42e:	9f 93       	push	r25
     430:	8f 93       	push	r24
     432:	8e 01       	movw	r16, r28
     434:	0f 5f       	subi	r16, 0xFF	; 255
     436:	1f 4f       	sbci	r17, 0xFF	; 255
     438:	1f 93       	push	r17
     43a:	0f 93       	push	r16
     43c:	0e 94 0a 07 	call	0xe14	; 0xe14 <sprintf>
	writeString(porfavor);
     440:	c8 01       	movw	r24, r16
     442:	0e 94 2d 05 	call	0xa5a	; 0xa5a <writeString>
}
     446:	0f b6       	in	r0, 0x3f	; 63
     448:	f8 94       	cli
     44a:	de bf       	out	0x3e, r29	; 62
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	cd bf       	out	0x3d, r28	; 61
     450:	29 96       	adiw	r28, 0x09	; 9
     452:	0f b6       	in	r0, 0x3f	; 63
     454:	f8 94       	cli
     456:	de bf       	out	0x3e, r29	; 62
     458:	0f be       	out	0x3f, r0	; 63
     45a:	cd bf       	out	0x3d, r28	; 61
     45c:	df 91       	pop	r29
     45e:	cf 91       	pop	r28
     460:	1f 91       	pop	r17
     462:	0f 91       	pop	r16
     464:	08 95       	ret

00000466 <main>:

// Main
int main(void)
{
	// DIVIDIR PRESCALER PARA 8MHz
	CLKPR |= (1 << CLKPCE);
     466:	e1 e6       	ldi	r30, 0x61	; 97
     468:	f0 e0       	ldi	r31, 0x00	; 0
     46a:	80 81       	ld	r24, Z
     46c:	80 68       	ori	r24, 0x80	; 128
     46e:	80 83       	st	Z, r24
	CLKPR |= (1 << CLKPS0);
     470:	80 81       	ld	r24, Z
     472:	81 60       	ori	r24, 0x01	; 1
     474:	80 83       	st	Z, r24
	
	setup();
     476:	0e 94 81 00 	call	0x102	; 0x102 <setup>
	init_PWM1(19999);
     47a:	8f e1       	ldi	r24, 0x1F	; 31
     47c:	9e e4       	ldi	r25, 0x4E	; 78
     47e:	0e 94 83 04 	call	0x906	; 0x906 <init_PWM1>
	init_PWM2();
     482:	0e 94 c9 04 	call	0x992	; 0x992 <init_PWM2>
	init_ADC();
     486:	0e 94 68 00 	call	0xd0	; 0xd0 <init_ADC>
	init_USART();
     48a:	0e 94 0d 05 	call	0xa1a	; 0xa1a <init_USART>
	sei();
     48e:	78 94       	sei
	while (1)
	{
		
		switch(modo)
     490:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <modo>
     494:	81 30       	cpi	r24, 0x01	; 1
     496:	f9 f0       	breq	.+62     	; 0x4d6 <main+0x70>
     498:	18 f0       	brcs	.+6      	; 0x4a0 <main+0x3a>
     49a:	82 30       	cpi	r24, 0x02	; 2
     49c:	31 f1       	breq	.+76     	; 0x4ea <main+0x84>
     49e:	f8 cf       	rjmp	.-16     	; 0x490 <main+0x2a>
		{
			case 0:
			//------------LED MODO MANUAL------------------//
			PORTB &= ~(1 << PORTB4);
     4a0:	85 b1       	in	r24, 0x05	; 5
     4a2:	8f 7e       	andi	r24, 0xEF	; 239
     4a4:	85 b9       	out	0x05, r24	; 5
			PORTB &= ~(1 << PORTB0);
     4a6:	85 b1       	in	r24, 0x05	; 5
     4a8:	8e 7f       	andi	r24, 0xFE	; 254
     4aa:	85 b9       	out	0x05, r24	; 5
			PORTB |= (1 << PORTB5);																// LED que indica modo manual
     4ac:	85 b1       	in	r24, 0x05	; 5
     4ae:	80 62       	ori	r24, 0x20	; 32
     4b0:	85 b9       	out	0x05, r24	; 5
			//-----------------Iniciar ADC----------------//
			ADCSRA |= (1 << ADSC);																// se hace la lectura del adc (se llama a la interrupcion)
     4b2:	ea e7       	ldi	r30, 0x7A	; 122
     4b4:	f0 e0       	ldi	r31, 0x00	; 0
     4b6:	80 81       	ld	r24, Z
     4b8:	80 64       	ori	r24, 0x40	; 64
     4ba:	80 83       	st	Z, r24
			if (feed_flag == 1)
     4bc:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <feed_flag>
     4c0:	81 30       	cpi	r24, 0x01	; 1
     4c2:	31 f7       	brne	.-52     	; 0x490 <main+0x2a>
			{
				feed_flag = 0;
     4c4:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <feed_flag>
				enviar_feedback(feed_servo, feed_angulo);
     4c8:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <__data_end>
     4cc:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <feed_servo>
     4d0:	0e 94 05 02 	call	0x40a	; 0x40a <enviar_feedback>
     4d4:	dd cf       	rjmp	.-70     	; 0x490 <main+0x2a>
			}
			break;
			
			case 1:
			//------------LED MODO EEPROM--------------//
			PORTB &= ~(1 << PORTB5);
     4d6:	85 b1       	in	r24, 0x05	; 5
     4d8:	8f 7d       	andi	r24, 0xDF	; 223
     4da:	85 b9       	out	0x05, r24	; 5
			PORTB &= ~(1 << PORTB4);
     4dc:	85 b1       	in	r24, 0x05	; 5
     4de:	8f 7e       	andi	r24, 0xEF	; 239
     4e0:	85 b9       	out	0x05, r24	; 5
			PORTB |= (1 << PORTB0);																// LED que indique modo EEPROM
     4e2:	85 b1       	in	r24, 0x05	; 5
     4e4:	81 60       	ori	r24, 0x01	; 1
     4e6:	85 b9       	out	0x05, r24	; 5
			break;
     4e8:	d3 cf       	rjmp	.-90     	; 0x490 <main+0x2a>
			
			case 2:
			//--------------LED MODO ADAFRUIT----------//
			PORTB &= ~(1 << PORTB5);
     4ea:	85 b1       	in	r24, 0x05	; 5
     4ec:	8f 7d       	andi	r24, 0xDF	; 223
     4ee:	85 b9       	out	0x05, r24	; 5
			PORTB &= ~(1 << PORTB0);
     4f0:	85 b1       	in	r24, 0x05	; 5
     4f2:	8e 7f       	andi	r24, 0xFE	; 254
     4f4:	85 b9       	out	0x05, r24	; 5
			PORTB |= (1 << PORTB4);																// LED que indica modo Adafruit
     4f6:	85 b1       	in	r24, 0x05	; 5
     4f8:	80 61       	ori	r24, 0x10	; 16
     4fa:	85 b9       	out	0x05, r24	; 5
			//---------------UART/ADAFRUIT-------------//
			if (paquete == 1)
     4fc:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <paquete>
     500:	81 30       	cpi	r24, 0x01	; 1
     502:	31 f6       	brne	.-116    	; 0x490 <main+0x2a>
			{
				paquete = 0;																	// limpio bandera para proxima interaccion*/
     504:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <paquete>
				uint8_t motor = buffer[1] - '0';
     508:	c0 91 1e 01 	lds	r28, 0x011E	; 0x80011e <buffer+0x1>
     50c:	c0 53       	subi	r28, 0x30	; 48
				//uint8_t ang = 0;
				
				for (char *paketa = strchr(buffer, ':') + 1; *paketa; ++paketa)
     50e:	6a e3       	ldi	r22, 0x3A	; 58
     510:	70 e0       	ldi	r23, 0x00	; 0
     512:	8d e1       	ldi	r24, 0x1D	; 29
     514:	91 e0       	ldi	r25, 0x01	; 1
     516:	0e 94 ff 06 	call	0xdfe	; 0xdfe <strchr>
     51a:	fc 01       	movw	r30, r24
     51c:	31 96       	adiw	r30, 0x01	; 1
     51e:	0c c0       	rjmp	.+24     	; 0x538 <main+0xd2>
				{
					ang	= ang * 10 + (*paketa - '0');
     520:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <ang>
     524:	22 0f       	add	r18, r18
     526:	32 2f       	mov	r19, r18
     528:	33 0f       	add	r19, r19
     52a:	33 0f       	add	r19, r19
     52c:	23 0f       	add	r18, r19
     52e:	92 0f       	add	r25, r18
     530:	90 53       	subi	r25, 0x30	; 48
     532:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <ang>
			{
				paquete = 0;																	// limpio bandera para proxima interaccion*/
				uint8_t motor = buffer[1] - '0';
				//uint8_t ang = 0;
				
				for (char *paketa = strchr(buffer, ':') + 1; *paketa; ++paketa)
     536:	31 96       	adiw	r30, 0x01	; 1
     538:	90 81       	ld	r25, Z
     53a:	91 11       	cpse	r25, r1
     53c:	f1 cf       	rjmp	.-30     	; 0x520 <main+0xba>
				{
					ang	= ang * 10 + (*paketa - '0');
				}
				
					switch(motor)
     53e:	c2 30       	cpi	r28, 0x02	; 2
     540:	79 f0       	breq	.+30     	; 0x560 <main+0xfa>
     542:	18 f4       	brcc	.+6      	; 0x54a <main+0xe4>
     544:	c1 30       	cpi	r28, 0x01	; 1
     546:	31 f0       	breq	.+12     	; 0x554 <main+0xee>
     548:	1a c0       	rjmp	.+52     	; 0x57e <main+0x118>
     54a:	c3 30       	cpi	r28, 0x03	; 3
     54c:	79 f0       	breq	.+30     	; 0x56c <main+0x106>
     54e:	c4 30       	cpi	r28, 0x04	; 4
     550:	91 f0       	breq	.+36     	; 0x576 <main+0x110>
     552:	15 c0       	rjmp	.+42     	; 0x57e <main+0x118>
					{
						case 1:
						pulso_PWM1(ang);
     554:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <ang>
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	0e 94 99 04 	call	0x932	; 0x932 <pulso_PWM1>
						break;
     55e:	0f c0       	rjmp	.+30     	; 0x57e <main+0x118>
						case 2:
						pulso2_PWM1(ang);
     560:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <ang>
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	0e 94 b1 04 	call	0x962	; 0x962 <pulso2_PWM1>
						break;
     56a:	09 c0       	rjmp	.+18     	; 0x57e <main+0x118>
						case 3:
						pulse_PWM2(ang);
     56c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <ang>
     570:	0e 94 df 04 	call	0x9be	; 0x9be <pulse_PWM2>
						break;
     574:	04 c0       	rjmp	.+8      	; 0x57e <main+0x118>
						case 4:
						pulse2_PWM2(ang);
     576:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <ang>
     57a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <pulse2_PWM2>
						break;
					}
					
			enviar_feedback(motor, ang);
     57e:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <ang>
     582:	8c 2f       	mov	r24, r28
     584:	0e 94 05 02 	call	0x40a	; 0x40a <enviar_feedback>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     588:	2f ef       	ldi	r18, 0xFF	; 255
     58a:	80 e7       	ldi	r24, 0x70	; 112
     58c:	92 e0       	ldi	r25, 0x02	; 2
     58e:	21 50       	subi	r18, 0x01	; 1
     590:	80 40       	sbci	r24, 0x00	; 0
     592:	90 40       	sbci	r25, 0x00	; 0
     594:	e1 f7       	brne	.-8      	; 0x58e <main+0x128>
     596:	00 c0       	rjmp	.+0      	; 0x598 <main+0x132>
     598:	00 00       	nop
			_delay_ms(100);
			motor = 0;
			ang = 0;
     59a:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <ang>
     59e:	78 cf       	rjmp	.-272    	; 0x490 <main+0x2a>

000005a0 <__vector_21>:
	writeString(porfavor);
}

// Interrupt routines
ISR(ADC_vect)
{
     5a0:	1f 92       	push	r1
     5a2:	0f 92       	push	r0
     5a4:	0f b6       	in	r0, 0x3f	; 63
     5a6:	0f 92       	push	r0
     5a8:	11 24       	eor	r1, r1
     5aa:	2f 93       	push	r18
     5ac:	3f 93       	push	r19
     5ae:	4f 93       	push	r20
     5b0:	5f 93       	push	r21
     5b2:	6f 93       	push	r22
     5b4:	7f 93       	push	r23
     5b6:	8f 93       	push	r24
     5b8:	9f 93       	push	r25
     5ba:	af 93       	push	r26
     5bc:	bf 93       	push	r27
     5be:	cf 93       	push	r28
     5c0:	ef 93       	push	r30
     5c2:	ff 93       	push	r31

	adc_value = ADCH;																	// le cargo el valor del ADCH a adc_value
     5c4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     5c8:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <adc_value>
	
	switch (alternador)
     5cc:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <alternador>
     5d0:	81 30       	cpi	r24, 0x01	; 1
     5d2:	91 f1       	breq	.+100    	; 0x638 <__vector_21+0x98>
     5d4:	38 f0       	brcs	.+14     	; 0x5e4 <__vector_21+0x44>
     5d6:	82 30       	cpi	r24, 0x02	; 2
     5d8:	09 f4       	brne	.+2      	; 0x5dc <__vector_21+0x3c>
     5da:	5c c0       	rjmp	.+184    	; 0x694 <__vector_21+0xf4>
     5dc:	83 30       	cpi	r24, 0x03	; 3
     5de:	09 f4       	brne	.+2      	; 0x5e2 <__vector_21+0x42>
     5e0:	83 c0       	rjmp	.+262    	; 0x6e8 <__vector_21+0x148>
     5e2:	ad c0       	rjmp	.+346    	; 0x73e <__vector_21+0x19e>
	{
		
		case 0:

		alternador = 1;																	// Servo1 en PB1
     5e4:	c1 e0       	ldi	r28, 0x01	; 1
     5e6:	c0 93 16 01 	sts	0x0116, r28	; 0x800116 <alternador>
		ADMUX = 0;																		// LIMPIAR REGISTRO
     5ea:	ec e7       	ldi	r30, 0x7C	; 124
     5ec:	f0 e0       	ldi	r31, 0x00	; 0
     5ee:	10 82       	st	Z, r1
		ADMUX |= (1 << REFS0);															// utilizar AVcc como referencia (5v)
     5f0:	80 81       	ld	r24, Z
     5f2:	80 64       	ori	r24, 0x40	; 64
     5f4:	80 83       	st	Z, r24
		ADMUX |= (1 << ADLAR);															// justificado a la izquierda (y leo 8 bits mas significativos)
     5f6:	80 81       	ld	r24, Z
     5f8:	80 62       	ori	r24, 0x20	; 32
     5fa:	80 83       	st	Z, r24
		ADMUX |= (1 << MUX1);															// utilizar PC2 para potenciometro 2 (MUX1)
     5fc:	80 81       	ld	r24, Z
     5fe:	82 60       	ori	r24, 0x02	; 2
     600:	80 83       	st	Z, r24
		
		pot1 = adc_value;
     602:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <adc_value>
     606:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <pot1>
		servo1 = (pot1 * 180 / 255);													// convertir adc en angulo
     60a:	24 eb       	ldi	r18, 0xB4	; 180
     60c:	82 9f       	mul	r24, r18
     60e:	c0 01       	movw	r24, r0
     610:	11 24       	eor	r1, r1
     612:	6f ef       	ldi	r22, 0xFF	; 255
     614:	70 e0       	ldi	r23, 0x00	; 0
     616:	0e 94 d7 06 	call	0xdae	; 0xdae <__divmodhi4>
     61a:	60 93 2d 01 	sts	0x012D, r22	; 0x80012d <servo1>
		pulso_PWM1(servo1);																// ajustar ancho de pulso
     61e:	86 2f       	mov	r24, r22
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	0e 94 99 04 	call	0x932	; 0x932 <pulso_PWM1>
		//-----FEEDBACK-----//
		feed_angulo = servo1;
     626:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <servo1>
     62a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
		feed_servo = 1;
     62e:	c0 93 0b 01 	sts	0x010B, r28	; 0x80010b <feed_servo>
		feed_flag = 1;
     632:	c0 93 0c 01 	sts	0x010C, r28	; 0x80010c <feed_flag>
		break;
     636:	83 c0       	rjmp	.+262    	; 0x73e <__vector_21+0x19e>
		
		case 1:
		alternador = 2;																	// Servo2 en PB2
     638:	c2 e0       	ldi	r28, 0x02	; 2
     63a:	c0 93 16 01 	sts	0x0116, r28	; 0x800116 <alternador>
		
		ADMUX = 0;																		// LIMPIAR REGISTRO
     63e:	ec e7       	ldi	r30, 0x7C	; 124
     640:	f0 e0       	ldi	r31, 0x00	; 0
     642:	10 82       	st	Z, r1
		ADMUX |= (1 << REFS0);															// utilizar AVcc como referencia (5v)
     644:	80 81       	ld	r24, Z
     646:	80 64       	ori	r24, 0x40	; 64
     648:	80 83       	st	Z, r24
		ADMUX |= (1 << ADLAR);
     64a:	80 81       	ld	r24, Z
     64c:	80 62       	ori	r24, 0x20	; 32
     64e:	80 83       	st	Z, r24
		ADMUX |= (1 << MUX0);															// PC3 como entrada (MUX0 y MUX1)
     650:	80 81       	ld	r24, Z
     652:	81 60       	ori	r24, 0x01	; 1
     654:	80 83       	st	Z, r24
		ADMUX |= (1 << MUX1);
     656:	80 81       	ld	r24, Z
     658:	82 60       	ori	r24, 0x02	; 2
     65a:	80 83       	st	Z, r24
		
		pot2 = adc_value;
     65c:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <adc_value>
     660:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <pot2>
		servo2 = (pot2 * 180 / 255);
     664:	24 eb       	ldi	r18, 0xB4	; 180
     666:	82 9f       	mul	r24, r18
     668:	c0 01       	movw	r24, r0
     66a:	11 24       	eor	r1, r1
     66c:	6f ef       	ldi	r22, 0xFF	; 255
     66e:	70 e0       	ldi	r23, 0x00	; 0
     670:	0e 94 d7 06 	call	0xdae	; 0xdae <__divmodhi4>
     674:	60 93 30 01 	sts	0x0130, r22	; 0x800130 <servo2>
		pulso2_PWM1(servo2);
     678:	86 2f       	mov	r24, r22
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	0e 94 b1 04 	call	0x962	; 0x962 <pulso2_PWM1>
		//-----FEEDBACK-----//
		feed_angulo = servo2;
     680:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <servo2>
     684:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
		feed_servo = 2;
     688:	c0 93 0b 01 	sts	0x010B, r28	; 0x80010b <feed_servo>
		feed_flag = 1;
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <feed_flag>
		break;
     692:	55 c0       	rjmp	.+170    	; 0x73e <__vector_21+0x19e>
		
		case 2:
		alternador = 3;																	// Servo3 en PB3
     694:	c3 e0       	ldi	r28, 0x03	; 3
     696:	c0 93 16 01 	sts	0x0116, r28	; 0x800116 <alternador>
		
		ADMUX = 0;																		// LIMPIAR REGISTRO
     69a:	ec e7       	ldi	r30, 0x7C	; 124
     69c:	f0 e0       	ldi	r31, 0x00	; 0
     69e:	10 82       	st	Z, r1
		ADMUX |= (1 << REFS0);															// utilizar AVcc como referencia (5v)
     6a0:	80 81       	ld	r24, Z
     6a2:	80 64       	ori	r24, 0x40	; 64
     6a4:	80 83       	st	Z, r24
		ADMUX |= (1 << ADLAR);
     6a6:	80 81       	ld	r24, Z
     6a8:	80 62       	ori	r24, 0x20	; 32
     6aa:	80 83       	st	Z, r24
		ADMUX |= (1 << MUX2);															// PC4 como entrada (pot4)
     6ac:	80 81       	ld	r24, Z
     6ae:	84 60       	ori	r24, 0x04	; 4
     6b0:	80 83       	st	Z, r24
		
		pot3 = adc_value;
     6b2:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <adc_value>
     6b6:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <pot3>
		servo3 = (pot3 * 180 / 255);
     6ba:	24 eb       	ldi	r18, 0xB4	; 180
     6bc:	82 9f       	mul	r24, r18
     6be:	c0 01       	movw	r24, r0
     6c0:	11 24       	eor	r1, r1
     6c2:	6f ef       	ldi	r22, 0xFF	; 255
     6c4:	70 e0       	ldi	r23, 0x00	; 0
     6c6:	0e 94 d7 06 	call	0xdae	; 0xdae <__divmodhi4>
     6ca:	86 2f       	mov	r24, r22
     6cc:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <servo3>
		pulse_PWM2(servo3);
     6d0:	0e 94 df 04 	call	0x9be	; 0x9be <pulse_PWM2>
		//-----FEEDBACK-----//
		feed_angulo = servo3;
     6d4:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <servo3>
     6d8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
		feed_servo = 3;
     6dc:	c0 93 0b 01 	sts	0x010B, r28	; 0x80010b <feed_servo>
		feed_flag = 1;
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <feed_flag>
		break;
     6e6:	2b c0       	rjmp	.+86     	; 0x73e <__vector_21+0x19e>
		
		case 3:
		alternador = 0;																	// Servo4 en PD3
     6e8:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <alternador>
		
		ADMUX = 0;																		// LIMPIAR REGISTRO
     6ec:	ec e7       	ldi	r30, 0x7C	; 124
     6ee:	f0 e0       	ldi	r31, 0x00	; 0
     6f0:	10 82       	st	Z, r1
		ADMUX |= (1 << REFS0);															// utilizar AVcc como referencia (5v)
     6f2:	80 81       	ld	r24, Z
     6f4:	80 64       	ori	r24, 0x40	; 64
     6f6:	80 83       	st	Z, r24
		ADMUX |= (1 << ADLAR);
     6f8:	80 81       	ld	r24, Z
     6fa:	80 62       	ori	r24, 0x20	; 32
     6fc:	80 83       	st	Z, r24
		ADMUX |= (1 << MUX0);															// Regresamos a pot1 (PC1)
     6fe:	80 81       	ld	r24, Z
     700:	81 60       	ori	r24, 0x01	; 1
     702:	80 83       	st	Z, r24
		
		pot4 =  adc_value;
     704:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <adc_value>
     708:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <pot4>
		servo4 = ((pot4 * 180 + 128) / 255);
     70c:	24 eb       	ldi	r18, 0xB4	; 180
     70e:	82 9f       	mul	r24, r18
     710:	c0 01       	movw	r24, r0
     712:	11 24       	eor	r1, r1
     714:	80 58       	subi	r24, 0x80	; 128
     716:	9f 4f       	sbci	r25, 0xFF	; 255
     718:	6f ef       	ldi	r22, 0xFF	; 255
     71a:	70 e0       	ldi	r23, 0x00	; 0
     71c:	0e 94 d7 06 	call	0xdae	; 0xdae <__divmodhi4>
     720:	86 2f       	mov	r24, r22
     722:	60 93 2e 01 	sts	0x012E, r22	; 0x80012e <servo4>
		pulse2_PWM2(servo4);
     726:	0e 94 f6 04 	call	0x9ec	; 0x9ec <pulse2_PWM2>
		//-----FEEDBACK-----//
		feed_angulo = servo4;
     72a:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <servo4>
     72e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
		feed_servo = 4;
     732:	84 e0       	ldi	r24, 0x04	; 4
     734:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <feed_servo>
		feed_flag = 1;
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <feed_flag>
		break;
		
	}
	
}
     73e:	ff 91       	pop	r31
     740:	ef 91       	pop	r30
     742:	cf 91       	pop	r28
     744:	bf 91       	pop	r27
     746:	af 91       	pop	r26
     748:	9f 91       	pop	r25
     74a:	8f 91       	pop	r24
     74c:	7f 91       	pop	r23
     74e:	6f 91       	pop	r22
     750:	5f 91       	pop	r21
     752:	4f 91       	pop	r20
     754:	3f 91       	pop	r19
     756:	2f 91       	pop	r18
     758:	0f 90       	pop	r0
     75a:	0f be       	out	0x3f, r0	; 63
     75c:	0f 90       	pop	r0
     75e:	1f 90       	pop	r1
     760:	18 95       	reti

00000762 <__vector_18>:

ISR(USART_RX_vect)
{
     762:	1f 92       	push	r1
     764:	0f 92       	push	r0
     766:	0f b6       	in	r0, 0x3f	; 63
     768:	0f 92       	push	r0
     76a:	11 24       	eor	r1, r1
     76c:	2f 93       	push	r18
     76e:	3f 93       	push	r19
     770:	4f 93       	push	r20
     772:	5f 93       	push	r21
     774:	6f 93       	push	r22
     776:	7f 93       	push	r23
     778:	8f 93       	push	r24
     77a:	9f 93       	push	r25
     77c:	af 93       	push	r26
     77e:	bf 93       	push	r27
     780:	ef 93       	push	r30
     782:	ff 93       	push	r31
	signal = UDR0;																		// leer caracter enviado a la terminal
     784:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     788:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <signal>
	
	if (signal != '\n' && signal != '\r' && caracteres < sizeof(buffer) - 1)												// si no presiono enter ni escribo mas de 15 caracteres pasa lo de abajo
     78c:	8a 30       	cpi	r24, 0x0A	; 10
     78e:	91 f0       	breq	.+36     	; 0x7b4 <__vector_18+0x52>
     790:	8d 30       	cpi	r24, 0x0D	; 13
     792:	81 f0       	breq	.+32     	; 0x7b4 <__vector_18+0x52>
     794:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <caracteres>
     798:	ef 30       	cpi	r30, 0x0F	; 15
     79a:	60 f4       	brcc	.+24     	; 0x7b4 <__vector_18+0x52>
	{
		buffer[caracteres++] = signal;													// guardo los datos que meti a la terminal en el buffer/string
     79c:	91 e0       	ldi	r25, 0x01	; 1
     79e:	9e 0f       	add	r25, r30
     7a0:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <caracteres>
     7a4:	f0 e0       	ldi	r31, 0x00	; 0
     7a6:	e3 5e       	subi	r30, 0xE3	; 227
     7a8:	fe 4f       	sbci	r31, 0xFE	; 254
     7aa:	80 83       	st	Z, r24
		PORTC &= ~(1 << PORTC0);
     7ac:	88 b1       	in	r24, 0x08	; 8
     7ae:	8e 7f       	andi	r24, 0xFE	; 254
     7b0:	88 b9       	out	0x08, r24	; 8
     7b2:	44 c0       	rjmp	.+136    	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
	}
	else 
	{
		paquete = 1;																	// enciendo flag para el main
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <paquete>
		writeString(buffer);
     7ba:	8d e1       	ldi	r24, 0x1D	; 29
     7bc:	91 e0       	ldi	r25, 0x01	; 1
     7be:	0e 94 2d 05 	call	0xa5a	; 0xa5a <writeString>
		writeString("\n");
     7c2:	87 e0       	ldi	r24, 0x07	; 7
     7c4:	91 e0       	ldi	r25, 0x01	; 1
     7c6:	0e 94 2d 05 	call	0xa5a	; 0xa5a <writeString>
		buffer[caracteres] = '\0';														// cierro cadena (es como poner . al final de la oracion)
     7ca:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <caracteres>
     7ce:	f0 e0       	ldi	r31, 0x00	; 0
     7d0:	e3 5e       	subi	r30, 0xE3	; 227
     7d2:	fe 4f       	sbci	r31, 0xFE	; 254
     7d4:	10 82       	st	Z, r1
		//uint8_t ang = 0;
		
		if (buffer[0] == 'm')
     7d6:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <buffer>
     7da:	8d 36       	cpi	r24, 0x6D	; 109
     7dc:	79 f4       	brne	.+30     	; 0x7fc <__vector_18+0x9a>
		{
			if (buffer[1] == '1'){
     7de:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <buffer+0x1>
     7e2:	81 33       	cpi	r24, 0x31	; 49
     7e4:	59 f5       	brne	.+86     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
				modo = (modo + 1) %3;
     7e6:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <modo>
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	01 96       	adiw	r24, 0x01	; 1
     7ee:	63 e0       	ldi	r22, 0x03	; 3
     7f0:	70 e0       	ldi	r23, 0x00	; 0
     7f2:	0e 94 d7 06 	call	0xdae	; 0xdae <__divmodhi4>
     7f6:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <modo>
     7fa:	20 c0       	rjmp	.+64     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
			}
		}else{
			for (char *paketa = strchr(buffer, ':') + 1; *paketa; ++paketa)
     7fc:	6a e3       	ldi	r22, 0x3A	; 58
     7fe:	70 e0       	ldi	r23, 0x00	; 0
     800:	8d e1       	ldi	r24, 0x1D	; 29
     802:	91 e0       	ldi	r25, 0x01	; 1
     804:	0e 94 ff 06 	call	0xdfe	; 0xdfe <strchr>
     808:	fc 01       	movw	r30, r24
     80a:	31 96       	adiw	r30, 0x01	; 1
     80c:	0c c0       	rjmp	.+24     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
			{
				ang	= ang * 10 + (*paketa - '0');
     80e:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <ang>
     812:	22 0f       	add	r18, r18
     814:	32 2f       	mov	r19, r18
     816:	33 0f       	add	r19, r19
     818:	33 0f       	add	r19, r19
     81a:	23 0f       	add	r18, r19
     81c:	92 0f       	add	r25, r18
     81e:	90 53       	subi	r25, 0x30	; 48
     820:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <ang>
		{
			if (buffer[1] == '1'){
				modo = (modo + 1) %3;
			}
		}else{
			for (char *paketa = strchr(buffer, ':') + 1; *paketa; ++paketa)
     824:	31 96       	adiw	r30, 0x01	; 1
     826:	90 81       	ld	r25, Z
     828:	91 11       	cpse	r25, r1
     82a:	f1 cf       	rjmp	.-30     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
			{
				ang	= ang * 10 + (*paketa - '0');
			}
			PORTC |= (1 << PORTC0);
     82c:	88 b1       	in	r24, 0x08	; 8
     82e:	81 60       	ori	r24, 0x01	; 1
     830:	88 b9       	out	0x08, r24	; 8
			PORTC |= (1 << PORTC5);
     832:	88 b1       	in	r24, 0x08	; 8
     834:	80 62       	ori	r24, 0x20	; 32
     836:	88 b9       	out	0x08, r24	; 8
			caracteres = 0;
     838:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <caracteres>
		}
		
		
	}
}
     83c:	ff 91       	pop	r31
     83e:	ef 91       	pop	r30
     840:	bf 91       	pop	r27
     842:	af 91       	pop	r26
     844:	9f 91       	pop	r25
     846:	8f 91       	pop	r24
     848:	7f 91       	pop	r23
     84a:	6f 91       	pop	r22
     84c:	5f 91       	pop	r21
     84e:	4f 91       	pop	r20
     850:	3f 91       	pop	r19
     852:	2f 91       	pop	r18
     854:	0f 90       	pop	r0
     856:	0f be       	out	0x3f, r0	; 63
     858:	0f 90       	pop	r0
     85a:	1f 90       	pop	r1
     85c:	18 95       	reti

0000085e <__vector_5>:

ISR(PCINT2_vect)
{
     85e:	1f 92       	push	r1
     860:	0f 92       	push	r0
     862:	0f b6       	in	r0, 0x3f	; 63
     864:	0f 92       	push	r0
     866:	11 24       	eor	r1, r1
     868:	2f 93       	push	r18
     86a:	3f 93       	push	r19
     86c:	4f 93       	push	r20
     86e:	5f 93       	push	r21
     870:	6f 93       	push	r22
     872:	7f 93       	push	r23
     874:	8f 93       	push	r24
     876:	9f 93       	push	r25
     878:	af 93       	push	r26
     87a:	bf 93       	push	r27
     87c:	ef 93       	push	r30
     87e:	ff 93       	push	r31
	//---------Guardar posicion EEPROM----------//
	if (!(PIND & (1 << PORTD4)) && bandera_guardar == 0)								// Si se presiona el boton y todavia no se ha terminado de procesar la pulsación
     880:	4c 99       	sbic	0x09, 4	; 9
     882:	0a c0       	rjmp	.+20     	; 0x898 <__vector_5+0x3a>
     884:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <bandera_guardar>
     888:	81 11       	cpse	r24, r1
     88a:	06 c0       	rjmp	.+12     	; 0x898 <__vector_5+0x3a>
	{
		bandera_guardar = 1;
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <bandera_guardar>
		guardar();
     892:	0e 94 a1 00 	call	0x142	; 0x142 <guardar>
     896:	02 c0       	rjmp	.+4      	; 0x89c <__vector_5+0x3e>
		} else {
		bandera_guardar = 0;
     898:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <bandera_guardar>
	}
	
	//---------Mostrar posicion EEPROM----------//
	if (!(PIND & (1 << PORTD5)) && bandera_mostrar == 0)
     89c:	4d 99       	sbic	0x09, 5	; 9
     89e:	0a c0       	rjmp	.+20     	; 0x8b4 <__vector_5+0x56>
     8a0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <bandera_mostrar>
     8a4:	81 11       	cpse	r24, r1
     8a6:	06 c0       	rjmp	.+12     	; 0x8b4 <__vector_5+0x56>
	{
		bandera_mostrar = 1;
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <bandera_mostrar>
		mostrar();
     8ae:	0e 94 4f 01 	call	0x29e	; 0x29e <mostrar>
     8b2:	02 c0       	rjmp	.+4      	; 0x8b8 <__vector_5+0x5a>
		} else{
		bandera_mostrar = 0;
     8b4:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <bandera_mostrar>
	}
	
	//------------Cambio de modo--------------//
	if (!(PIND &(1 << PORTD6)) && antonio_banderas == 0)								// Si se apacha PD4 se le suma 1 a modo (es decir cambia de modo)
     8b8:	4e 99       	sbic	0x09, 6	; 9
     8ba:	12 c0       	rjmp	.+36     	; 0x8e0 <__vector_5+0x82>
     8bc:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <antonio_banderas>
     8c0:	81 11       	cpse	r24, r1
     8c2:	0e c0       	rjmp	.+28     	; 0x8e0 <__vector_5+0x82>
	{
		antonio_banderas = 1;
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <antonio_banderas>
		modo = (modo + 1) %3;
     8ca:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <modo>
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	01 96       	adiw	r24, 0x01	; 1
     8d2:	63 e0       	ldi	r22, 0x03	; 3
     8d4:	70 e0       	ldi	r23, 0x00	; 0
     8d6:	0e 94 d7 06 	call	0xdae	; 0xdae <__divmodhi4>
     8da:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <modo>
     8de:	02 c0       	rjmp	.+4      	; 0x8e4 <__vector_5+0x86>
		} else{
		antonio_banderas = 0;
     8e0:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <antonio_banderas>
	}
}
     8e4:	ff 91       	pop	r31
     8e6:	ef 91       	pop	r30
     8e8:	bf 91       	pop	r27
     8ea:	af 91       	pop	r26
     8ec:	9f 91       	pop	r25
     8ee:	8f 91       	pop	r24
     8f0:	7f 91       	pop	r23
     8f2:	6f 91       	pop	r22
     8f4:	5f 91       	pop	r21
     8f6:	4f 91       	pop	r20
     8f8:	3f 91       	pop	r19
     8fa:	2f 91       	pop	r18
     8fc:	0f 90       	pop	r0
     8fe:	0f be       	out	0x3f, r0	; 63
     900:	0f 90       	pop	r0
     902:	1f 90       	pop	r1
     904:	18 95       	reti

00000906 <init_PWM1>:
// Librerias
#include "pwm1.h"

// NON-Interrupt subroutines
// El PWM sirve para el servomotor, este genera una señal que hace que se mueva
void init_PWM1(uint16_t TOP){
     906:	9c 01       	movw	r18, r24
	DDRB |= (1 << PORTB1) | (1 << PORTB2);										// Salida para servo1 (PB1) Y servo 2 (PB2)
     908:	94 b1       	in	r25, 0x04	; 4
     90a:	96 60       	ori	r25, 0x06	; 6
     90c:	94 b9       	out	0x04, r25	; 4
	TCCR1A = 0;																	// LIMPIAR TCCRA
     90e:	e0 e8       	ldi	r30, 0x80	; 128
     910:	f0 e0       	ldi	r31, 0x00	; 0
     912:	10 82       	st	Z, r1
	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11);						// Polaridad no invertido (OC1A para servo1 y OC1B para servo2) y fast pwm (parte baja)
     914:	82 ea       	ldi	r24, 0xA2	; 162
     916:	80 83       	st	Z, r24
	TCCR1B = 0;																	// LIMPIAR TCCRB
     918:	e1 e8       	ldi	r30, 0x81	; 129
     91a:	f0 e0       	ldi	r31, 0x00	; 0
     91c:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM13) | (1 << WGM12);										// MODO FAST PWM (parte alta)
     91e:	88 e1       	ldi	r24, 0x18	; 24
     920:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS11);														// PRESCALER PWM 8
     922:	90 81       	ld	r25, Z
     924:	92 60       	ori	r25, 0x02	; 2
     926:	90 83       	st	Z, r25
	//TCCR1B |= (1 << ICNC1);														// noise canceler
	ICR1 = TOP;																	// valor maximo para ICR1 "19999"
     928:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     92c:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     930:	08 95       	ret

00000932 <pulso_PWM1>:
}

// El registro OCR1A revisa cuanto dura el pulso en PB1 (servo) en cada ciclo PWM, el servo lee el pulso y se mueve segun la posicion que le diga
void pulso_PWM1(uint16_t pulso){
	//OCR1A = 1000 + ((uint32_t)pulso * 4000 / 180);
	OCR1A = 20.05 * (float)pulso + 1200.0;												// base
     932:	bc 01       	movw	r22, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <__floatunsisf>
     93c:	26 e6       	ldi	r18, 0x66	; 102
     93e:	36 e6       	ldi	r19, 0x66	; 102
     940:	40 ea       	ldi	r20, 0xA0	; 160
     942:	51 e4       	ldi	r21, 0x41	; 65
     944:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__mulsf3>
     948:	20 e0       	ldi	r18, 0x00	; 0
     94a:	30 e0       	ldi	r19, 0x00	; 0
     94c:	46 e9       	ldi	r20, 0x96	; 150
     94e:	54 e4       	ldi	r21, 0x44	; 68
     950:	0e 94 41 05 	call	0xa82	; 0xa82 <__addsf3>
     954:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__fixunssfsi>
     958:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     95c:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     960:	08 95       	ret

00000962 <pulso2_PWM1>:
}

void pulso2_PWM1(uint16_t angle)
{
	//OCR1B = 1000 + ((uint32_t)angle * 4000 / 180);
	OCR1B = 19.05 * (float)angle + 1200.0;
     962:	bc 01       	movw	r22, r24
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <__floatunsisf>
     96c:	26 e6       	ldi	r18, 0x66	; 102
     96e:	36 e6       	ldi	r19, 0x66	; 102
     970:	48 e9       	ldi	r20, 0x98	; 152
     972:	51 e4       	ldi	r21, 0x41	; 65
     974:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__mulsf3>
     978:	20 e0       	ldi	r18, 0x00	; 0
     97a:	30 e0       	ldi	r19, 0x00	; 0
     97c:	46 e9       	ldi	r20, 0x96	; 150
     97e:	54 e4       	ldi	r21, 0x44	; 68
     980:	0e 94 41 05 	call	0xa82	; 0xa82 <__addsf3>
     984:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__fixunssfsi>
     988:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     98c:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
     990:	08 95       	ret

00000992 <init_PWM2>:
uint8_t servo3;
uint8_t servo4;

// NON-Interrupt subroutines
void init_PWM2(void){
	DDRB |= (1 << PORTB3);																// Salida servo3
     992:	84 b1       	in	r24, 0x04	; 4
     994:	88 60       	ori	r24, 0x08	; 8
     996:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << PORTD3);																// salida servo4
     998:	8a b1       	in	r24, 0x0a	; 10
     99a:	88 60       	ori	r24, 0x08	; 8
     99c:	8a b9       	out	0x0a, r24	; 10
	TCCR2A = 0;																			// LIMPIAR TCCR2A
     99e:	e0 eb       	ldi	r30, 0xB0	; 176
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	10 82       	st	Z, r1
	TCCR2A |= (1 << COM2A1) | (1 << COM2B1);											// non inverting fast pwm (COM2A1 para servo3 y COM2B1 para servo4)
     9a4:	80 81       	ld	r24, Z
     9a6:	80 6a       	ori	r24, 0xA0	; 160
     9a8:	80 83       	st	Z, r24
	TCCR2A |= (1 << WGM20) | (1 << WGM21);												// fast pwm
     9aa:	80 81       	ld	r24, Z
     9ac:	83 60       	ori	r24, 0x03	; 3
     9ae:	80 83       	st	Z, r24
	TCCR2B = 0;																			// LIMPIAR TCCR2B
     9b0:	e1 eb       	ldi	r30, 0xB1	; 177
     9b2:	f0 e0       	ldi	r31, 0x00	; 0
     9b4:	10 82       	st	Z, r1
	TCCR2B |= (1 << CS22) | (1 << CS21)	|(1 << CS20);									// PRESCALER 1024
     9b6:	80 81       	ld	r24, Z
     9b8:	87 60       	ori	r24, 0x07	; 7
     9ba:	80 83       	st	Z, r24
     9bc:	08 95       	ret

000009be <pulse_PWM2>:
	
}

void pulse_PWM2(uint8_t angle3)
{
	OCR2A = 0.19 * (float)angle3 + 5.0;												// 0.19 - 180
     9be:	68 2f       	mov	r22, r24
     9c0:	70 e0       	ldi	r23, 0x00	; 0
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <__floatunsisf>
     9ca:	2c e5       	ldi	r18, 0x5C	; 92
     9cc:	3f e8       	ldi	r19, 0x8F	; 143
     9ce:	42 e4       	ldi	r20, 0x42	; 66
     9d0:	5e e3       	ldi	r21, 0x3E	; 62
     9d2:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__mulsf3>
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	40 ea       	ldi	r20, 0xA0	; 160
     9dc:	50 e4       	ldi	r21, 0x40	; 64
     9de:	0e 94 41 05 	call	0xa82	; 0xa82 <__addsf3>
     9e2:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__fixunssfsi>
     9e6:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     9ea:	08 95       	ret

000009ec <pulse2_PWM2>:
}

void pulse2_PWM2(uint8_t angle4)
{
	OCR2B = 0.17 * (float)angle4 + 5.0;
     9ec:	68 2f       	mov	r22, r24
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <__floatunsisf>
     9f8:	2b e7       	ldi	r18, 0x7B	; 123
     9fa:	34 e1       	ldi	r19, 0x14	; 20
     9fc:	4e e2       	ldi	r20, 0x2E	; 46
     9fe:	5e e3       	ldi	r21, 0x3E	; 62
     a00:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__mulsf3>
     a04:	20 e0       	ldi	r18, 0x00	; 0
     a06:	30 e0       	ldi	r19, 0x00	; 0
     a08:	40 ea       	ldi	r20, 0xA0	; 160
     a0a:	50 e4       	ldi	r21, 0x40	; 64
     a0c:	0e 94 41 05 	call	0xa82	; 0xa82 <__addsf3>
     a10:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__fixunssfsi>
     a14:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     a18:	08 95       	ret

00000a1a <init_USART>:
//char signal;
// NON-Interrupt subroutines

void init_USART()
{
	DDRD |= (1 << DDD1);															// Tx como salida
     a1a:	8a b1       	in	r24, 0x0a	; 10
     a1c:	82 60       	ori	r24, 0x02	; 2
     a1e:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << DDD0);															// Rx como entrada
     a20:	8a b1       	in	r24, 0x0a	; 10
     a22:	8e 7f       	andi	r24, 0xFE	; 254
     a24:	8a b9       	out	0x0a, r24	; 10
	
	UCSR0A = 0;																		// Configurar UCSR0A
     a26:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	
	UCSR0B |=  (1 << TXEN0) | (1 << RXEN0 ) | (1 << RXCIE0);						// habilitar bit para recibir, transmitir y habilitar interrupción
     a2a:	e1 ec       	ldi	r30, 0xC1	; 193
     a2c:	f0 e0       	ldi	r31, 0x00	; 0
     a2e:	80 81       	ld	r24, Z
     a30:	88 69       	ori	r24, 0x98	; 152
     a32:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);										// CHARACTER SIZE 8 BITS Y 1 STOP BIT
     a34:	e2 ec       	ldi	r30, 0xC2	; 194
     a36:	f0 e0       	ldi	r31, 0x00	; 0
     a38:	80 81       	ld	r24, Z
     a3a:	86 60       	ori	r24, 0x06	; 6
     a3c:	80 83       	st	Z, r24
	UBRR0 = 103;																		// BAUD RATE 9600 0.2% DE ERROR
     a3e:	87 e6       	ldi	r24, 0x67	; 103
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     a46:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     a4a:	08 95       	ret

00000a4c <WriteChar>:
}

void WriteChar(char j)
{
	//while((UCSR0A & (1 << UDRE0)) == 0);
	while(!(UCSR0A &(1 << UDRE0)));							// esperar a que se vacie el buffer (!= es no sea)
     a4c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     a50:	95 ff       	sbrs	r25, 5
     a52:	fc cf       	rjmp	.-8      	; 0xa4c <WriteChar>
	UDR0 = j;												// meter valor
     a54:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     a58:	08 95       	ret

00000a5a <writeString>:
}

void writeString(char* txt)												// el char* sirve para representar cadenas de texto
{
     a5a:	0f 93       	push	r16
     a5c:	1f 93       	push	r17
     a5e:	cf 93       	push	r28
     a60:	8c 01       	movw	r16, r24
	for (uint8_t i = 0; txt[i] != '\0'; i++)
     a62:	c0 e0       	ldi	r28, 0x00	; 0
     a64:	03 c0       	rjmp	.+6      	; 0xa6c <writeString+0x12>
	{
		WriteChar(txt[i]);									// es como leer cada letra
     a66:	0e 94 26 05 	call	0xa4c	; 0xa4c <WriteChar>
	UDR0 = j;												// meter valor
}

void writeString(char* txt)												// el char* sirve para representar cadenas de texto
{
	for (uint8_t i = 0; txt[i] != '\0'; i++)
     a6a:	cf 5f       	subi	r28, 0xFF	; 255
     a6c:	f8 01       	movw	r30, r16
     a6e:	ec 0f       	add	r30, r28
     a70:	f1 1d       	adc	r31, r1
     a72:	80 81       	ld	r24, Z
     a74:	81 11       	cpse	r24, r1
     a76:	f7 cf       	rjmp	.-18     	; 0xa66 <writeString+0xc>
	{
		WriteChar(txt[i]);									// es como leer cada letra
	}
}
     a78:	cf 91       	pop	r28
     a7a:	1f 91       	pop	r17
     a7c:	0f 91       	pop	r16
     a7e:	08 95       	ret

00000a80 <__subsf3>:
     a80:	50 58       	subi	r21, 0x80	; 128

00000a82 <__addsf3>:
     a82:	bb 27       	eor	r27, r27
     a84:	aa 27       	eor	r26, r26
     a86:	0e 94 58 05 	call	0xab0	; 0xab0 <__addsf3x>
     a8a:	0c 94 30 06 	jmp	0xc60	; 0xc60 <__fp_round>
     a8e:	0e 94 22 06 	call	0xc44	; 0xc44 <__fp_pscA>
     a92:	38 f0       	brcs	.+14     	; 0xaa2 <__addsf3+0x20>
     a94:	0e 94 29 06 	call	0xc52	; 0xc52 <__fp_pscB>
     a98:	20 f0       	brcs	.+8      	; 0xaa2 <__addsf3+0x20>
     a9a:	39 f4       	brne	.+14     	; 0xaaa <__addsf3+0x28>
     a9c:	9f 3f       	cpi	r25, 0xFF	; 255
     a9e:	19 f4       	brne	.+6      	; 0xaa6 <__addsf3+0x24>
     aa0:	26 f4       	brtc	.+8      	; 0xaaa <__addsf3+0x28>
     aa2:	0c 94 1f 06 	jmp	0xc3e	; 0xc3e <__fp_nan>
     aa6:	0e f4       	brtc	.+2      	; 0xaaa <__addsf3+0x28>
     aa8:	e0 95       	com	r30
     aaa:	e7 fb       	bst	r30, 7
     aac:	0c 94 19 06 	jmp	0xc32	; 0xc32 <__fp_inf>

00000ab0 <__addsf3x>:
     ab0:	e9 2f       	mov	r30, r25
     ab2:	0e 94 41 06 	call	0xc82	; 0xc82 <__fp_split3>
     ab6:	58 f3       	brcs	.-42     	; 0xa8e <__addsf3+0xc>
     ab8:	ba 17       	cp	r27, r26
     aba:	62 07       	cpc	r22, r18
     abc:	73 07       	cpc	r23, r19
     abe:	84 07       	cpc	r24, r20
     ac0:	95 07       	cpc	r25, r21
     ac2:	20 f0       	brcs	.+8      	; 0xacc <__addsf3x+0x1c>
     ac4:	79 f4       	brne	.+30     	; 0xae4 <__addsf3x+0x34>
     ac6:	a6 f5       	brtc	.+104    	; 0xb30 <__addsf3x+0x80>
     ac8:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <__fp_zero>
     acc:	0e f4       	brtc	.+2      	; 0xad0 <__addsf3x+0x20>
     ace:	e0 95       	com	r30
     ad0:	0b 2e       	mov	r0, r27
     ad2:	ba 2f       	mov	r27, r26
     ad4:	a0 2d       	mov	r26, r0
     ad6:	0b 01       	movw	r0, r22
     ad8:	b9 01       	movw	r22, r18
     ada:	90 01       	movw	r18, r0
     adc:	0c 01       	movw	r0, r24
     ade:	ca 01       	movw	r24, r20
     ae0:	a0 01       	movw	r20, r0
     ae2:	11 24       	eor	r1, r1
     ae4:	ff 27       	eor	r31, r31
     ae6:	59 1b       	sub	r21, r25
     ae8:	99 f0       	breq	.+38     	; 0xb10 <__addsf3x+0x60>
     aea:	59 3f       	cpi	r21, 0xF9	; 249
     aec:	50 f4       	brcc	.+20     	; 0xb02 <__addsf3x+0x52>
     aee:	50 3e       	cpi	r21, 0xE0	; 224
     af0:	68 f1       	brcs	.+90     	; 0xb4c <__addsf3x+0x9c>
     af2:	1a 16       	cp	r1, r26
     af4:	f0 40       	sbci	r31, 0x00	; 0
     af6:	a2 2f       	mov	r26, r18
     af8:	23 2f       	mov	r18, r19
     afa:	34 2f       	mov	r19, r20
     afc:	44 27       	eor	r20, r20
     afe:	58 5f       	subi	r21, 0xF8	; 248
     b00:	f3 cf       	rjmp	.-26     	; 0xae8 <__addsf3x+0x38>
     b02:	46 95       	lsr	r20
     b04:	37 95       	ror	r19
     b06:	27 95       	ror	r18
     b08:	a7 95       	ror	r26
     b0a:	f0 40       	sbci	r31, 0x00	; 0
     b0c:	53 95       	inc	r21
     b0e:	c9 f7       	brne	.-14     	; 0xb02 <__addsf3x+0x52>
     b10:	7e f4       	brtc	.+30     	; 0xb30 <__addsf3x+0x80>
     b12:	1f 16       	cp	r1, r31
     b14:	ba 0b       	sbc	r27, r26
     b16:	62 0b       	sbc	r22, r18
     b18:	73 0b       	sbc	r23, r19
     b1a:	84 0b       	sbc	r24, r20
     b1c:	ba f0       	brmi	.+46     	; 0xb4c <__addsf3x+0x9c>
     b1e:	91 50       	subi	r25, 0x01	; 1
     b20:	a1 f0       	breq	.+40     	; 0xb4a <__addsf3x+0x9a>
     b22:	ff 0f       	add	r31, r31
     b24:	bb 1f       	adc	r27, r27
     b26:	66 1f       	adc	r22, r22
     b28:	77 1f       	adc	r23, r23
     b2a:	88 1f       	adc	r24, r24
     b2c:	c2 f7       	brpl	.-16     	; 0xb1e <__addsf3x+0x6e>
     b2e:	0e c0       	rjmp	.+28     	; 0xb4c <__addsf3x+0x9c>
     b30:	ba 0f       	add	r27, r26
     b32:	62 1f       	adc	r22, r18
     b34:	73 1f       	adc	r23, r19
     b36:	84 1f       	adc	r24, r20
     b38:	48 f4       	brcc	.+18     	; 0xb4c <__addsf3x+0x9c>
     b3a:	87 95       	ror	r24
     b3c:	77 95       	ror	r23
     b3e:	67 95       	ror	r22
     b40:	b7 95       	ror	r27
     b42:	f7 95       	ror	r31
     b44:	9e 3f       	cpi	r25, 0xFE	; 254
     b46:	08 f0       	brcs	.+2      	; 0xb4a <__addsf3x+0x9a>
     b48:	b0 cf       	rjmp	.-160    	; 0xaaa <__addsf3+0x28>
     b4a:	93 95       	inc	r25
     b4c:	88 0f       	add	r24, r24
     b4e:	08 f0       	brcs	.+2      	; 0xb52 <__addsf3x+0xa2>
     b50:	99 27       	eor	r25, r25
     b52:	ee 0f       	add	r30, r30
     b54:	97 95       	ror	r25
     b56:	87 95       	ror	r24
     b58:	08 95       	ret

00000b5a <__fixunssfsi>:
     b5a:	0e 94 49 06 	call	0xc92	; 0xc92 <__fp_splitA>
     b5e:	88 f0       	brcs	.+34     	; 0xb82 <__fixunssfsi+0x28>
     b60:	9f 57       	subi	r25, 0x7F	; 127
     b62:	98 f0       	brcs	.+38     	; 0xb8a <__fixunssfsi+0x30>
     b64:	b9 2f       	mov	r27, r25
     b66:	99 27       	eor	r25, r25
     b68:	b7 51       	subi	r27, 0x17	; 23
     b6a:	b0 f0       	brcs	.+44     	; 0xb98 <__fixunssfsi+0x3e>
     b6c:	e1 f0       	breq	.+56     	; 0xba6 <__fixunssfsi+0x4c>
     b6e:	66 0f       	add	r22, r22
     b70:	77 1f       	adc	r23, r23
     b72:	88 1f       	adc	r24, r24
     b74:	99 1f       	adc	r25, r25
     b76:	1a f0       	brmi	.+6      	; 0xb7e <__fixunssfsi+0x24>
     b78:	ba 95       	dec	r27
     b7a:	c9 f7       	brne	.-14     	; 0xb6e <__fixunssfsi+0x14>
     b7c:	14 c0       	rjmp	.+40     	; 0xba6 <__fixunssfsi+0x4c>
     b7e:	b1 30       	cpi	r27, 0x01	; 1
     b80:	91 f0       	breq	.+36     	; 0xba6 <__fixunssfsi+0x4c>
     b82:	0e 94 63 06 	call	0xcc6	; 0xcc6 <__fp_zero>
     b86:	b1 e0       	ldi	r27, 0x01	; 1
     b88:	08 95       	ret
     b8a:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <__fp_zero>
     b8e:	67 2f       	mov	r22, r23
     b90:	78 2f       	mov	r23, r24
     b92:	88 27       	eor	r24, r24
     b94:	b8 5f       	subi	r27, 0xF8	; 248
     b96:	39 f0       	breq	.+14     	; 0xba6 <__fixunssfsi+0x4c>
     b98:	b9 3f       	cpi	r27, 0xF9	; 249
     b9a:	cc f3       	brlt	.-14     	; 0xb8e <__fixunssfsi+0x34>
     b9c:	86 95       	lsr	r24
     b9e:	77 95       	ror	r23
     ba0:	67 95       	ror	r22
     ba2:	b3 95       	inc	r27
     ba4:	d9 f7       	brne	.-10     	; 0xb9c <__fixunssfsi+0x42>
     ba6:	3e f4       	brtc	.+14     	; 0xbb6 <__fixunssfsi+0x5c>
     ba8:	90 95       	com	r25
     baa:	80 95       	com	r24
     bac:	70 95       	com	r23
     bae:	61 95       	neg	r22
     bb0:	7f 4f       	sbci	r23, 0xFF	; 255
     bb2:	8f 4f       	sbci	r24, 0xFF	; 255
     bb4:	9f 4f       	sbci	r25, 0xFF	; 255
     bb6:	08 95       	ret

00000bb8 <__floatunsisf>:
     bb8:	e8 94       	clt
     bba:	09 c0       	rjmp	.+18     	; 0xbce <__floatsisf+0x12>

00000bbc <__floatsisf>:
     bbc:	97 fb       	bst	r25, 7
     bbe:	3e f4       	brtc	.+14     	; 0xbce <__floatsisf+0x12>
     bc0:	90 95       	com	r25
     bc2:	80 95       	com	r24
     bc4:	70 95       	com	r23
     bc6:	61 95       	neg	r22
     bc8:	7f 4f       	sbci	r23, 0xFF	; 255
     bca:	8f 4f       	sbci	r24, 0xFF	; 255
     bcc:	9f 4f       	sbci	r25, 0xFF	; 255
     bce:	99 23       	and	r25, r25
     bd0:	a9 f0       	breq	.+42     	; 0xbfc <__floatsisf+0x40>
     bd2:	f9 2f       	mov	r31, r25
     bd4:	96 e9       	ldi	r25, 0x96	; 150
     bd6:	bb 27       	eor	r27, r27
     bd8:	93 95       	inc	r25
     bda:	f6 95       	lsr	r31
     bdc:	87 95       	ror	r24
     bde:	77 95       	ror	r23
     be0:	67 95       	ror	r22
     be2:	b7 95       	ror	r27
     be4:	f1 11       	cpse	r31, r1
     be6:	f8 cf       	rjmp	.-16     	; 0xbd8 <__floatsisf+0x1c>
     be8:	fa f4       	brpl	.+62     	; 0xc28 <__floatsisf+0x6c>
     bea:	bb 0f       	add	r27, r27
     bec:	11 f4       	brne	.+4      	; 0xbf2 <__floatsisf+0x36>
     bee:	60 ff       	sbrs	r22, 0
     bf0:	1b c0       	rjmp	.+54     	; 0xc28 <__floatsisf+0x6c>
     bf2:	6f 5f       	subi	r22, 0xFF	; 255
     bf4:	7f 4f       	sbci	r23, 0xFF	; 255
     bf6:	8f 4f       	sbci	r24, 0xFF	; 255
     bf8:	9f 4f       	sbci	r25, 0xFF	; 255
     bfa:	16 c0       	rjmp	.+44     	; 0xc28 <__floatsisf+0x6c>
     bfc:	88 23       	and	r24, r24
     bfe:	11 f0       	breq	.+4      	; 0xc04 <__floatsisf+0x48>
     c00:	96 e9       	ldi	r25, 0x96	; 150
     c02:	11 c0       	rjmp	.+34     	; 0xc26 <__floatsisf+0x6a>
     c04:	77 23       	and	r23, r23
     c06:	21 f0       	breq	.+8      	; 0xc10 <__floatsisf+0x54>
     c08:	9e e8       	ldi	r25, 0x8E	; 142
     c0a:	87 2f       	mov	r24, r23
     c0c:	76 2f       	mov	r23, r22
     c0e:	05 c0       	rjmp	.+10     	; 0xc1a <__floatsisf+0x5e>
     c10:	66 23       	and	r22, r22
     c12:	71 f0       	breq	.+28     	; 0xc30 <__floatsisf+0x74>
     c14:	96 e8       	ldi	r25, 0x86	; 134
     c16:	86 2f       	mov	r24, r22
     c18:	70 e0       	ldi	r23, 0x00	; 0
     c1a:	60 e0       	ldi	r22, 0x00	; 0
     c1c:	2a f0       	brmi	.+10     	; 0xc28 <__floatsisf+0x6c>
     c1e:	9a 95       	dec	r25
     c20:	66 0f       	add	r22, r22
     c22:	77 1f       	adc	r23, r23
     c24:	88 1f       	adc	r24, r24
     c26:	da f7       	brpl	.-10     	; 0xc1e <__floatsisf+0x62>
     c28:	88 0f       	add	r24, r24
     c2a:	96 95       	lsr	r25
     c2c:	87 95       	ror	r24
     c2e:	97 f9       	bld	r25, 7
     c30:	08 95       	ret

00000c32 <__fp_inf>:
     c32:	97 f9       	bld	r25, 7
     c34:	9f 67       	ori	r25, 0x7F	; 127
     c36:	80 e8       	ldi	r24, 0x80	; 128
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	60 e0       	ldi	r22, 0x00	; 0
     c3c:	08 95       	ret

00000c3e <__fp_nan>:
     c3e:	9f ef       	ldi	r25, 0xFF	; 255
     c40:	80 ec       	ldi	r24, 0xC0	; 192
     c42:	08 95       	ret

00000c44 <__fp_pscA>:
     c44:	00 24       	eor	r0, r0
     c46:	0a 94       	dec	r0
     c48:	16 16       	cp	r1, r22
     c4a:	17 06       	cpc	r1, r23
     c4c:	18 06       	cpc	r1, r24
     c4e:	09 06       	cpc	r0, r25
     c50:	08 95       	ret

00000c52 <__fp_pscB>:
     c52:	00 24       	eor	r0, r0
     c54:	0a 94       	dec	r0
     c56:	12 16       	cp	r1, r18
     c58:	13 06       	cpc	r1, r19
     c5a:	14 06       	cpc	r1, r20
     c5c:	05 06       	cpc	r0, r21
     c5e:	08 95       	ret

00000c60 <__fp_round>:
     c60:	09 2e       	mov	r0, r25
     c62:	03 94       	inc	r0
     c64:	00 0c       	add	r0, r0
     c66:	11 f4       	brne	.+4      	; 0xc6c <__fp_round+0xc>
     c68:	88 23       	and	r24, r24
     c6a:	52 f0       	brmi	.+20     	; 0xc80 <__fp_round+0x20>
     c6c:	bb 0f       	add	r27, r27
     c6e:	40 f4       	brcc	.+16     	; 0xc80 <__fp_round+0x20>
     c70:	bf 2b       	or	r27, r31
     c72:	11 f4       	brne	.+4      	; 0xc78 <__fp_round+0x18>
     c74:	60 ff       	sbrs	r22, 0
     c76:	04 c0       	rjmp	.+8      	; 0xc80 <__fp_round+0x20>
     c78:	6f 5f       	subi	r22, 0xFF	; 255
     c7a:	7f 4f       	sbci	r23, 0xFF	; 255
     c7c:	8f 4f       	sbci	r24, 0xFF	; 255
     c7e:	9f 4f       	sbci	r25, 0xFF	; 255
     c80:	08 95       	ret

00000c82 <__fp_split3>:
     c82:	57 fd       	sbrc	r21, 7
     c84:	90 58       	subi	r25, 0x80	; 128
     c86:	44 0f       	add	r20, r20
     c88:	55 1f       	adc	r21, r21
     c8a:	59 f0       	breq	.+22     	; 0xca2 <__fp_splitA+0x10>
     c8c:	5f 3f       	cpi	r21, 0xFF	; 255
     c8e:	71 f0       	breq	.+28     	; 0xcac <__fp_splitA+0x1a>
     c90:	47 95       	ror	r20

00000c92 <__fp_splitA>:
     c92:	88 0f       	add	r24, r24
     c94:	97 fb       	bst	r25, 7
     c96:	99 1f       	adc	r25, r25
     c98:	61 f0       	breq	.+24     	; 0xcb2 <__fp_splitA+0x20>
     c9a:	9f 3f       	cpi	r25, 0xFF	; 255
     c9c:	79 f0       	breq	.+30     	; 0xcbc <__fp_splitA+0x2a>
     c9e:	87 95       	ror	r24
     ca0:	08 95       	ret
     ca2:	12 16       	cp	r1, r18
     ca4:	13 06       	cpc	r1, r19
     ca6:	14 06       	cpc	r1, r20
     ca8:	55 1f       	adc	r21, r21
     caa:	f2 cf       	rjmp	.-28     	; 0xc90 <__fp_split3+0xe>
     cac:	46 95       	lsr	r20
     cae:	f1 df       	rcall	.-30     	; 0xc92 <__fp_splitA>
     cb0:	08 c0       	rjmp	.+16     	; 0xcc2 <__fp_splitA+0x30>
     cb2:	16 16       	cp	r1, r22
     cb4:	17 06       	cpc	r1, r23
     cb6:	18 06       	cpc	r1, r24
     cb8:	99 1f       	adc	r25, r25
     cba:	f1 cf       	rjmp	.-30     	; 0xc9e <__fp_splitA+0xc>
     cbc:	86 95       	lsr	r24
     cbe:	71 05       	cpc	r23, r1
     cc0:	61 05       	cpc	r22, r1
     cc2:	08 94       	sec
     cc4:	08 95       	ret

00000cc6 <__fp_zero>:
     cc6:	e8 94       	clt

00000cc8 <__fp_szero>:
     cc8:	bb 27       	eor	r27, r27
     cca:	66 27       	eor	r22, r22
     ccc:	77 27       	eor	r23, r23
     cce:	cb 01       	movw	r24, r22
     cd0:	97 f9       	bld	r25, 7
     cd2:	08 95       	ret

00000cd4 <__mulsf3>:
     cd4:	0e 94 7d 06 	call	0xcfa	; 0xcfa <__mulsf3x>
     cd8:	0c 94 30 06 	jmp	0xc60	; 0xc60 <__fp_round>
     cdc:	0e 94 22 06 	call	0xc44	; 0xc44 <__fp_pscA>
     ce0:	38 f0       	brcs	.+14     	; 0xcf0 <__mulsf3+0x1c>
     ce2:	0e 94 29 06 	call	0xc52	; 0xc52 <__fp_pscB>
     ce6:	20 f0       	brcs	.+8      	; 0xcf0 <__mulsf3+0x1c>
     ce8:	95 23       	and	r25, r21
     cea:	11 f0       	breq	.+4      	; 0xcf0 <__mulsf3+0x1c>
     cec:	0c 94 19 06 	jmp	0xc32	; 0xc32 <__fp_inf>
     cf0:	0c 94 1f 06 	jmp	0xc3e	; 0xc3e <__fp_nan>
     cf4:	11 24       	eor	r1, r1
     cf6:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__fp_szero>

00000cfa <__mulsf3x>:
     cfa:	0e 94 41 06 	call	0xc82	; 0xc82 <__fp_split3>
     cfe:	70 f3       	brcs	.-36     	; 0xcdc <__mulsf3+0x8>

00000d00 <__mulsf3_pse>:
     d00:	95 9f       	mul	r25, r21
     d02:	c1 f3       	breq	.-16     	; 0xcf4 <__mulsf3+0x20>
     d04:	95 0f       	add	r25, r21
     d06:	50 e0       	ldi	r21, 0x00	; 0
     d08:	55 1f       	adc	r21, r21
     d0a:	62 9f       	mul	r22, r18
     d0c:	f0 01       	movw	r30, r0
     d0e:	72 9f       	mul	r23, r18
     d10:	bb 27       	eor	r27, r27
     d12:	f0 0d       	add	r31, r0
     d14:	b1 1d       	adc	r27, r1
     d16:	63 9f       	mul	r22, r19
     d18:	aa 27       	eor	r26, r26
     d1a:	f0 0d       	add	r31, r0
     d1c:	b1 1d       	adc	r27, r1
     d1e:	aa 1f       	adc	r26, r26
     d20:	64 9f       	mul	r22, r20
     d22:	66 27       	eor	r22, r22
     d24:	b0 0d       	add	r27, r0
     d26:	a1 1d       	adc	r26, r1
     d28:	66 1f       	adc	r22, r22
     d2a:	82 9f       	mul	r24, r18
     d2c:	22 27       	eor	r18, r18
     d2e:	b0 0d       	add	r27, r0
     d30:	a1 1d       	adc	r26, r1
     d32:	62 1f       	adc	r22, r18
     d34:	73 9f       	mul	r23, r19
     d36:	b0 0d       	add	r27, r0
     d38:	a1 1d       	adc	r26, r1
     d3a:	62 1f       	adc	r22, r18
     d3c:	83 9f       	mul	r24, r19
     d3e:	a0 0d       	add	r26, r0
     d40:	61 1d       	adc	r22, r1
     d42:	22 1f       	adc	r18, r18
     d44:	74 9f       	mul	r23, r20
     d46:	33 27       	eor	r19, r19
     d48:	a0 0d       	add	r26, r0
     d4a:	61 1d       	adc	r22, r1
     d4c:	23 1f       	adc	r18, r19
     d4e:	84 9f       	mul	r24, r20
     d50:	60 0d       	add	r22, r0
     d52:	21 1d       	adc	r18, r1
     d54:	82 2f       	mov	r24, r18
     d56:	76 2f       	mov	r23, r22
     d58:	6a 2f       	mov	r22, r26
     d5a:	11 24       	eor	r1, r1
     d5c:	9f 57       	subi	r25, 0x7F	; 127
     d5e:	50 40       	sbci	r21, 0x00	; 0
     d60:	9a f0       	brmi	.+38     	; 0xd88 <__mulsf3_pse+0x88>
     d62:	f1 f0       	breq	.+60     	; 0xda0 <__mulsf3_pse+0xa0>
     d64:	88 23       	and	r24, r24
     d66:	4a f0       	brmi	.+18     	; 0xd7a <__mulsf3_pse+0x7a>
     d68:	ee 0f       	add	r30, r30
     d6a:	ff 1f       	adc	r31, r31
     d6c:	bb 1f       	adc	r27, r27
     d6e:	66 1f       	adc	r22, r22
     d70:	77 1f       	adc	r23, r23
     d72:	88 1f       	adc	r24, r24
     d74:	91 50       	subi	r25, 0x01	; 1
     d76:	50 40       	sbci	r21, 0x00	; 0
     d78:	a9 f7       	brne	.-22     	; 0xd64 <__mulsf3_pse+0x64>
     d7a:	9e 3f       	cpi	r25, 0xFE	; 254
     d7c:	51 05       	cpc	r21, r1
     d7e:	80 f0       	brcs	.+32     	; 0xda0 <__mulsf3_pse+0xa0>
     d80:	0c 94 19 06 	jmp	0xc32	; 0xc32 <__fp_inf>
     d84:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__fp_szero>
     d88:	5f 3f       	cpi	r21, 0xFF	; 255
     d8a:	e4 f3       	brlt	.-8      	; 0xd84 <__mulsf3_pse+0x84>
     d8c:	98 3e       	cpi	r25, 0xE8	; 232
     d8e:	d4 f3       	brlt	.-12     	; 0xd84 <__mulsf3_pse+0x84>
     d90:	86 95       	lsr	r24
     d92:	77 95       	ror	r23
     d94:	67 95       	ror	r22
     d96:	b7 95       	ror	r27
     d98:	f7 95       	ror	r31
     d9a:	e7 95       	ror	r30
     d9c:	9f 5f       	subi	r25, 0xFF	; 255
     d9e:	c1 f7       	brne	.-16     	; 0xd90 <__mulsf3_pse+0x90>
     da0:	fe 2b       	or	r31, r30
     da2:	88 0f       	add	r24, r24
     da4:	91 1d       	adc	r25, r1
     da6:	96 95       	lsr	r25
     da8:	87 95       	ror	r24
     daa:	97 f9       	bld	r25, 7
     dac:	08 95       	ret

00000dae <__divmodhi4>:
     dae:	97 fb       	bst	r25, 7
     db0:	07 2e       	mov	r0, r23
     db2:	16 f4       	brtc	.+4      	; 0xdb8 <__divmodhi4+0xa>
     db4:	00 94       	com	r0
     db6:	07 d0       	rcall	.+14     	; 0xdc6 <__divmodhi4_neg1>
     db8:	77 fd       	sbrc	r23, 7
     dba:	09 d0       	rcall	.+18     	; 0xdce <__divmodhi4_neg2>
     dbc:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__udivmodhi4>
     dc0:	07 fc       	sbrc	r0, 7
     dc2:	05 d0       	rcall	.+10     	; 0xdce <__divmodhi4_neg2>
     dc4:	3e f4       	brtc	.+14     	; 0xdd4 <__divmodhi4_exit>

00000dc6 <__divmodhi4_neg1>:
     dc6:	90 95       	com	r25
     dc8:	81 95       	neg	r24
     dca:	9f 4f       	sbci	r25, 0xFF	; 255
     dcc:	08 95       	ret

00000dce <__divmodhi4_neg2>:
     dce:	70 95       	com	r23
     dd0:	61 95       	neg	r22
     dd2:	7f 4f       	sbci	r23, 0xFF	; 255

00000dd4 <__divmodhi4_exit>:
     dd4:	08 95       	ret

00000dd6 <__udivmodhi4>:
     dd6:	aa 1b       	sub	r26, r26
     dd8:	bb 1b       	sub	r27, r27
     dda:	51 e1       	ldi	r21, 0x11	; 17
     ddc:	07 c0       	rjmp	.+14     	; 0xdec <__udivmodhi4_ep>

00000dde <__udivmodhi4_loop>:
     dde:	aa 1f       	adc	r26, r26
     de0:	bb 1f       	adc	r27, r27
     de2:	a6 17       	cp	r26, r22
     de4:	b7 07       	cpc	r27, r23
     de6:	10 f0       	brcs	.+4      	; 0xdec <__udivmodhi4_ep>
     de8:	a6 1b       	sub	r26, r22
     dea:	b7 0b       	sbc	r27, r23

00000dec <__udivmodhi4_ep>:
     dec:	88 1f       	adc	r24, r24
     dee:	99 1f       	adc	r25, r25
     df0:	5a 95       	dec	r21
     df2:	a9 f7       	brne	.-22     	; 0xdde <__udivmodhi4_loop>
     df4:	80 95       	com	r24
     df6:	90 95       	com	r25
     df8:	bc 01       	movw	r22, r24
     dfa:	cd 01       	movw	r24, r26
     dfc:	08 95       	ret

00000dfe <strchr>:
     dfe:	fc 01       	movw	r30, r24
     e00:	81 91       	ld	r24, Z+
     e02:	86 17       	cp	r24, r22
     e04:	21 f0       	breq	.+8      	; 0xe0e <strchr+0x10>
     e06:	88 23       	and	r24, r24
     e08:	d9 f7       	brne	.-10     	; 0xe00 <strchr+0x2>
     e0a:	99 27       	eor	r25, r25
     e0c:	08 95       	ret
     e0e:	31 97       	sbiw	r30, 0x01	; 1
     e10:	cf 01       	movw	r24, r30
     e12:	08 95       	ret

00000e14 <sprintf>:
     e14:	ae e0       	ldi	r26, 0x0E	; 14
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e0 e1       	ldi	r30, 0x10	; 16
     e1a:	f7 e0       	ldi	r31, 0x07	; 7
     e1c:	0c 94 cb 09 	jmp	0x1396	; 0x1396 <__prologue_saves__+0x1c>
     e20:	0d 89       	ldd	r16, Y+21	; 0x15
     e22:	1e 89       	ldd	r17, Y+22	; 0x16
     e24:	86 e0       	ldi	r24, 0x06	; 6
     e26:	8c 83       	std	Y+4, r24	; 0x04
     e28:	1a 83       	std	Y+2, r17	; 0x02
     e2a:	09 83       	std	Y+1, r16	; 0x01
     e2c:	8f ef       	ldi	r24, 0xFF	; 255
     e2e:	9f e7       	ldi	r25, 0x7F	; 127
     e30:	9e 83       	std	Y+6, r25	; 0x06
     e32:	8d 83       	std	Y+5, r24	; 0x05
     e34:	ae 01       	movw	r20, r28
     e36:	47 5e       	subi	r20, 0xE7	; 231
     e38:	5f 4f       	sbci	r21, 0xFF	; 255
     e3a:	6f 89       	ldd	r22, Y+23	; 0x17
     e3c:	78 8d       	ldd	r23, Y+24	; 0x18
     e3e:	ce 01       	movw	r24, r28
     e40:	01 96       	adiw	r24, 0x01	; 1
     e42:	0e 94 2c 07 	call	0xe58	; 0xe58 <vfprintf>
     e46:	ef 81       	ldd	r30, Y+7	; 0x07
     e48:	f8 85       	ldd	r31, Y+8	; 0x08
     e4a:	e0 0f       	add	r30, r16
     e4c:	f1 1f       	adc	r31, r17
     e4e:	10 82       	st	Z, r1
     e50:	2e 96       	adiw	r28, 0x0e	; 14
     e52:	e4 e0       	ldi	r30, 0x04	; 4
     e54:	0c 94 e7 09 	jmp	0x13ce	; 0x13ce <__epilogue_restores__+0x1c>

00000e58 <vfprintf>:
     e58:	ab e0       	ldi	r26, 0x0B	; 11
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	e2 e3       	ldi	r30, 0x32	; 50
     e5e:	f7 e0       	ldi	r31, 0x07	; 7
     e60:	0c 94 bd 09 	jmp	0x137a	; 0x137a <__prologue_saves__>
     e64:	6c 01       	movw	r12, r24
     e66:	7b 01       	movw	r14, r22
     e68:	8a 01       	movw	r16, r20
     e6a:	fc 01       	movw	r30, r24
     e6c:	17 82       	std	Z+7, r1	; 0x07
     e6e:	16 82       	std	Z+6, r1	; 0x06
     e70:	83 81       	ldd	r24, Z+3	; 0x03
     e72:	81 ff       	sbrs	r24, 1
     e74:	cc c1       	rjmp	.+920    	; 0x120e <vfprintf+0x3b6>
     e76:	ce 01       	movw	r24, r28
     e78:	01 96       	adiw	r24, 0x01	; 1
     e7a:	3c 01       	movw	r6, r24
     e7c:	f6 01       	movw	r30, r12
     e7e:	93 81       	ldd	r25, Z+3	; 0x03
     e80:	f7 01       	movw	r30, r14
     e82:	93 fd       	sbrc	r25, 3
     e84:	85 91       	lpm	r24, Z+
     e86:	93 ff       	sbrs	r25, 3
     e88:	81 91       	ld	r24, Z+
     e8a:	7f 01       	movw	r14, r30
     e8c:	88 23       	and	r24, r24
     e8e:	09 f4       	brne	.+2      	; 0xe92 <vfprintf+0x3a>
     e90:	ba c1       	rjmp	.+884    	; 0x1206 <vfprintf+0x3ae>
     e92:	85 32       	cpi	r24, 0x25	; 37
     e94:	39 f4       	brne	.+14     	; 0xea4 <vfprintf+0x4c>
     e96:	93 fd       	sbrc	r25, 3
     e98:	85 91       	lpm	r24, Z+
     e9a:	93 ff       	sbrs	r25, 3
     e9c:	81 91       	ld	r24, Z+
     e9e:	7f 01       	movw	r14, r30
     ea0:	85 32       	cpi	r24, 0x25	; 37
     ea2:	29 f4       	brne	.+10     	; 0xeae <vfprintf+0x56>
     ea4:	b6 01       	movw	r22, r12
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	0e 94 23 09 	call	0x1246	; 0x1246 <fputc>
     eac:	e7 cf       	rjmp	.-50     	; 0xe7c <vfprintf+0x24>
     eae:	91 2c       	mov	r9, r1
     eb0:	21 2c       	mov	r2, r1
     eb2:	31 2c       	mov	r3, r1
     eb4:	ff e1       	ldi	r31, 0x1F	; 31
     eb6:	f3 15       	cp	r31, r3
     eb8:	d8 f0       	brcs	.+54     	; 0xef0 <vfprintf+0x98>
     eba:	8b 32       	cpi	r24, 0x2B	; 43
     ebc:	79 f0       	breq	.+30     	; 0xedc <vfprintf+0x84>
     ebe:	38 f4       	brcc	.+14     	; 0xece <vfprintf+0x76>
     ec0:	80 32       	cpi	r24, 0x20	; 32
     ec2:	79 f0       	breq	.+30     	; 0xee2 <vfprintf+0x8a>
     ec4:	83 32       	cpi	r24, 0x23	; 35
     ec6:	a1 f4       	brne	.+40     	; 0xef0 <vfprintf+0x98>
     ec8:	23 2d       	mov	r18, r3
     eca:	20 61       	ori	r18, 0x10	; 16
     ecc:	1d c0       	rjmp	.+58     	; 0xf08 <vfprintf+0xb0>
     ece:	8d 32       	cpi	r24, 0x2D	; 45
     ed0:	61 f0       	breq	.+24     	; 0xeea <vfprintf+0x92>
     ed2:	80 33       	cpi	r24, 0x30	; 48
     ed4:	69 f4       	brne	.+26     	; 0xef0 <vfprintf+0x98>
     ed6:	23 2d       	mov	r18, r3
     ed8:	21 60       	ori	r18, 0x01	; 1
     eda:	16 c0       	rjmp	.+44     	; 0xf08 <vfprintf+0xb0>
     edc:	83 2d       	mov	r24, r3
     ede:	82 60       	ori	r24, 0x02	; 2
     ee0:	38 2e       	mov	r3, r24
     ee2:	e3 2d       	mov	r30, r3
     ee4:	e4 60       	ori	r30, 0x04	; 4
     ee6:	3e 2e       	mov	r3, r30
     ee8:	2a c0       	rjmp	.+84     	; 0xf3e <vfprintf+0xe6>
     eea:	f3 2d       	mov	r31, r3
     eec:	f8 60       	ori	r31, 0x08	; 8
     eee:	1d c0       	rjmp	.+58     	; 0xf2a <vfprintf+0xd2>
     ef0:	37 fc       	sbrc	r3, 7
     ef2:	2d c0       	rjmp	.+90     	; 0xf4e <vfprintf+0xf6>
     ef4:	20 ed       	ldi	r18, 0xD0	; 208
     ef6:	28 0f       	add	r18, r24
     ef8:	2a 30       	cpi	r18, 0x0A	; 10
     efa:	40 f0       	brcs	.+16     	; 0xf0c <vfprintf+0xb4>
     efc:	8e 32       	cpi	r24, 0x2E	; 46
     efe:	b9 f4       	brne	.+46     	; 0xf2e <vfprintf+0xd6>
     f00:	36 fc       	sbrc	r3, 6
     f02:	81 c1       	rjmp	.+770    	; 0x1206 <vfprintf+0x3ae>
     f04:	23 2d       	mov	r18, r3
     f06:	20 64       	ori	r18, 0x40	; 64
     f08:	32 2e       	mov	r3, r18
     f0a:	19 c0       	rjmp	.+50     	; 0xf3e <vfprintf+0xe6>
     f0c:	36 fe       	sbrs	r3, 6
     f0e:	06 c0       	rjmp	.+12     	; 0xf1c <vfprintf+0xc4>
     f10:	8a e0       	ldi	r24, 0x0A	; 10
     f12:	98 9e       	mul	r9, r24
     f14:	20 0d       	add	r18, r0
     f16:	11 24       	eor	r1, r1
     f18:	92 2e       	mov	r9, r18
     f1a:	11 c0       	rjmp	.+34     	; 0xf3e <vfprintf+0xe6>
     f1c:	ea e0       	ldi	r30, 0x0A	; 10
     f1e:	2e 9e       	mul	r2, r30
     f20:	20 0d       	add	r18, r0
     f22:	11 24       	eor	r1, r1
     f24:	22 2e       	mov	r2, r18
     f26:	f3 2d       	mov	r31, r3
     f28:	f0 62       	ori	r31, 0x20	; 32
     f2a:	3f 2e       	mov	r3, r31
     f2c:	08 c0       	rjmp	.+16     	; 0xf3e <vfprintf+0xe6>
     f2e:	8c 36       	cpi	r24, 0x6C	; 108
     f30:	21 f4       	brne	.+8      	; 0xf3a <vfprintf+0xe2>
     f32:	83 2d       	mov	r24, r3
     f34:	80 68       	ori	r24, 0x80	; 128
     f36:	38 2e       	mov	r3, r24
     f38:	02 c0       	rjmp	.+4      	; 0xf3e <vfprintf+0xe6>
     f3a:	88 36       	cpi	r24, 0x68	; 104
     f3c:	41 f4       	brne	.+16     	; 0xf4e <vfprintf+0xf6>
     f3e:	f7 01       	movw	r30, r14
     f40:	93 fd       	sbrc	r25, 3
     f42:	85 91       	lpm	r24, Z+
     f44:	93 ff       	sbrs	r25, 3
     f46:	81 91       	ld	r24, Z+
     f48:	7f 01       	movw	r14, r30
     f4a:	81 11       	cpse	r24, r1
     f4c:	b3 cf       	rjmp	.-154    	; 0xeb4 <vfprintf+0x5c>
     f4e:	98 2f       	mov	r25, r24
     f50:	9f 7d       	andi	r25, 0xDF	; 223
     f52:	95 54       	subi	r25, 0x45	; 69
     f54:	93 30       	cpi	r25, 0x03	; 3
     f56:	28 f4       	brcc	.+10     	; 0xf62 <vfprintf+0x10a>
     f58:	0c 5f       	subi	r16, 0xFC	; 252
     f5a:	1f 4f       	sbci	r17, 0xFF	; 255
     f5c:	9f e3       	ldi	r25, 0x3F	; 63
     f5e:	99 83       	std	Y+1, r25	; 0x01
     f60:	0d c0       	rjmp	.+26     	; 0xf7c <vfprintf+0x124>
     f62:	83 36       	cpi	r24, 0x63	; 99
     f64:	31 f0       	breq	.+12     	; 0xf72 <vfprintf+0x11a>
     f66:	83 37       	cpi	r24, 0x73	; 115
     f68:	71 f0       	breq	.+28     	; 0xf86 <vfprintf+0x12e>
     f6a:	83 35       	cpi	r24, 0x53	; 83
     f6c:	09 f0       	breq	.+2      	; 0xf70 <vfprintf+0x118>
     f6e:	59 c0       	rjmp	.+178    	; 0x1022 <vfprintf+0x1ca>
     f70:	21 c0       	rjmp	.+66     	; 0xfb4 <vfprintf+0x15c>
     f72:	f8 01       	movw	r30, r16
     f74:	80 81       	ld	r24, Z
     f76:	89 83       	std	Y+1, r24	; 0x01
     f78:	0e 5f       	subi	r16, 0xFE	; 254
     f7a:	1f 4f       	sbci	r17, 0xFF	; 255
     f7c:	88 24       	eor	r8, r8
     f7e:	83 94       	inc	r8
     f80:	91 2c       	mov	r9, r1
     f82:	53 01       	movw	r10, r6
     f84:	13 c0       	rjmp	.+38     	; 0xfac <vfprintf+0x154>
     f86:	28 01       	movw	r4, r16
     f88:	f2 e0       	ldi	r31, 0x02	; 2
     f8a:	4f 0e       	add	r4, r31
     f8c:	51 1c       	adc	r5, r1
     f8e:	f8 01       	movw	r30, r16
     f90:	a0 80       	ld	r10, Z
     f92:	b1 80       	ldd	r11, Z+1	; 0x01
     f94:	36 fe       	sbrs	r3, 6
     f96:	03 c0       	rjmp	.+6      	; 0xf9e <vfprintf+0x146>
     f98:	69 2d       	mov	r22, r9
     f9a:	70 e0       	ldi	r23, 0x00	; 0
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <vfprintf+0x14a>
     f9e:	6f ef       	ldi	r22, 0xFF	; 255
     fa0:	7f ef       	ldi	r23, 0xFF	; 255
     fa2:	c5 01       	movw	r24, r10
     fa4:	0e 94 18 09 	call	0x1230	; 0x1230 <strnlen>
     fa8:	4c 01       	movw	r8, r24
     faa:	82 01       	movw	r16, r4
     fac:	f3 2d       	mov	r31, r3
     fae:	ff 77       	andi	r31, 0x7F	; 127
     fb0:	3f 2e       	mov	r3, r31
     fb2:	16 c0       	rjmp	.+44     	; 0xfe0 <vfprintf+0x188>
     fb4:	28 01       	movw	r4, r16
     fb6:	22 e0       	ldi	r18, 0x02	; 2
     fb8:	42 0e       	add	r4, r18
     fba:	51 1c       	adc	r5, r1
     fbc:	f8 01       	movw	r30, r16
     fbe:	a0 80       	ld	r10, Z
     fc0:	b1 80       	ldd	r11, Z+1	; 0x01
     fc2:	36 fe       	sbrs	r3, 6
     fc4:	03 c0       	rjmp	.+6      	; 0xfcc <vfprintf+0x174>
     fc6:	69 2d       	mov	r22, r9
     fc8:	70 e0       	ldi	r23, 0x00	; 0
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <vfprintf+0x178>
     fcc:	6f ef       	ldi	r22, 0xFF	; 255
     fce:	7f ef       	ldi	r23, 0xFF	; 255
     fd0:	c5 01       	movw	r24, r10
     fd2:	0e 94 0d 09 	call	0x121a	; 0x121a <strnlen_P>
     fd6:	4c 01       	movw	r8, r24
     fd8:	f3 2d       	mov	r31, r3
     fda:	f0 68       	ori	r31, 0x80	; 128
     fdc:	3f 2e       	mov	r3, r31
     fde:	82 01       	movw	r16, r4
     fe0:	33 fc       	sbrc	r3, 3
     fe2:	1b c0       	rjmp	.+54     	; 0x101a <vfprintf+0x1c2>
     fe4:	82 2d       	mov	r24, r2
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	88 16       	cp	r8, r24
     fea:	99 06       	cpc	r9, r25
     fec:	b0 f4       	brcc	.+44     	; 0x101a <vfprintf+0x1c2>
     fee:	b6 01       	movw	r22, r12
     ff0:	80 e2       	ldi	r24, 0x20	; 32
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	0e 94 23 09 	call	0x1246	; 0x1246 <fputc>
     ff8:	2a 94       	dec	r2
     ffa:	f4 cf       	rjmp	.-24     	; 0xfe4 <vfprintf+0x18c>
     ffc:	f5 01       	movw	r30, r10
     ffe:	37 fc       	sbrc	r3, 7
    1000:	85 91       	lpm	r24, Z+
    1002:	37 fe       	sbrs	r3, 7
    1004:	81 91       	ld	r24, Z+
    1006:	5f 01       	movw	r10, r30
    1008:	b6 01       	movw	r22, r12
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	0e 94 23 09 	call	0x1246	; 0x1246 <fputc>
    1010:	21 10       	cpse	r2, r1
    1012:	2a 94       	dec	r2
    1014:	21 e0       	ldi	r18, 0x01	; 1
    1016:	82 1a       	sub	r8, r18
    1018:	91 08       	sbc	r9, r1
    101a:	81 14       	cp	r8, r1
    101c:	91 04       	cpc	r9, r1
    101e:	71 f7       	brne	.-36     	; 0xffc <vfprintf+0x1a4>
    1020:	e8 c0       	rjmp	.+464    	; 0x11f2 <vfprintf+0x39a>
    1022:	84 36       	cpi	r24, 0x64	; 100
    1024:	11 f0       	breq	.+4      	; 0x102a <vfprintf+0x1d2>
    1026:	89 36       	cpi	r24, 0x69	; 105
    1028:	41 f5       	brne	.+80     	; 0x107a <vfprintf+0x222>
    102a:	f8 01       	movw	r30, r16
    102c:	37 fe       	sbrs	r3, 7
    102e:	07 c0       	rjmp	.+14     	; 0x103e <vfprintf+0x1e6>
    1030:	60 81       	ld	r22, Z
    1032:	71 81       	ldd	r23, Z+1	; 0x01
    1034:	82 81       	ldd	r24, Z+2	; 0x02
    1036:	93 81       	ldd	r25, Z+3	; 0x03
    1038:	0c 5f       	subi	r16, 0xFC	; 252
    103a:	1f 4f       	sbci	r17, 0xFF	; 255
    103c:	08 c0       	rjmp	.+16     	; 0x104e <vfprintf+0x1f6>
    103e:	60 81       	ld	r22, Z
    1040:	71 81       	ldd	r23, Z+1	; 0x01
    1042:	07 2e       	mov	r0, r23
    1044:	00 0c       	add	r0, r0
    1046:	88 0b       	sbc	r24, r24
    1048:	99 0b       	sbc	r25, r25
    104a:	0e 5f       	subi	r16, 0xFE	; 254
    104c:	1f 4f       	sbci	r17, 0xFF	; 255
    104e:	f3 2d       	mov	r31, r3
    1050:	ff 76       	andi	r31, 0x6F	; 111
    1052:	3f 2e       	mov	r3, r31
    1054:	97 ff       	sbrs	r25, 7
    1056:	09 c0       	rjmp	.+18     	; 0x106a <vfprintf+0x212>
    1058:	90 95       	com	r25
    105a:	80 95       	com	r24
    105c:	70 95       	com	r23
    105e:	61 95       	neg	r22
    1060:	7f 4f       	sbci	r23, 0xFF	; 255
    1062:	8f 4f       	sbci	r24, 0xFF	; 255
    1064:	9f 4f       	sbci	r25, 0xFF	; 255
    1066:	f0 68       	ori	r31, 0x80	; 128
    1068:	3f 2e       	mov	r3, r31
    106a:	2a e0       	ldi	r18, 0x0A	; 10
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	a3 01       	movw	r20, r6
    1070:	0e 94 5f 09 	call	0x12be	; 0x12be <__ultoa_invert>
    1074:	88 2e       	mov	r8, r24
    1076:	86 18       	sub	r8, r6
    1078:	45 c0       	rjmp	.+138    	; 0x1104 <vfprintf+0x2ac>
    107a:	85 37       	cpi	r24, 0x75	; 117
    107c:	31 f4       	brne	.+12     	; 0x108a <vfprintf+0x232>
    107e:	23 2d       	mov	r18, r3
    1080:	2f 7e       	andi	r18, 0xEF	; 239
    1082:	b2 2e       	mov	r11, r18
    1084:	2a e0       	ldi	r18, 0x0A	; 10
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	25 c0       	rjmp	.+74     	; 0x10d4 <vfprintf+0x27c>
    108a:	93 2d       	mov	r25, r3
    108c:	99 7f       	andi	r25, 0xF9	; 249
    108e:	b9 2e       	mov	r11, r25
    1090:	8f 36       	cpi	r24, 0x6F	; 111
    1092:	c1 f0       	breq	.+48     	; 0x10c4 <vfprintf+0x26c>
    1094:	18 f4       	brcc	.+6      	; 0x109c <vfprintf+0x244>
    1096:	88 35       	cpi	r24, 0x58	; 88
    1098:	79 f0       	breq	.+30     	; 0x10b8 <vfprintf+0x260>
    109a:	b5 c0       	rjmp	.+362    	; 0x1206 <vfprintf+0x3ae>
    109c:	80 37       	cpi	r24, 0x70	; 112
    109e:	19 f0       	breq	.+6      	; 0x10a6 <vfprintf+0x24e>
    10a0:	88 37       	cpi	r24, 0x78	; 120
    10a2:	21 f0       	breq	.+8      	; 0x10ac <vfprintf+0x254>
    10a4:	b0 c0       	rjmp	.+352    	; 0x1206 <vfprintf+0x3ae>
    10a6:	e9 2f       	mov	r30, r25
    10a8:	e0 61       	ori	r30, 0x10	; 16
    10aa:	be 2e       	mov	r11, r30
    10ac:	b4 fe       	sbrs	r11, 4
    10ae:	0d c0       	rjmp	.+26     	; 0x10ca <vfprintf+0x272>
    10b0:	fb 2d       	mov	r31, r11
    10b2:	f4 60       	ori	r31, 0x04	; 4
    10b4:	bf 2e       	mov	r11, r31
    10b6:	09 c0       	rjmp	.+18     	; 0x10ca <vfprintf+0x272>
    10b8:	34 fe       	sbrs	r3, 4
    10ba:	0a c0       	rjmp	.+20     	; 0x10d0 <vfprintf+0x278>
    10bc:	29 2f       	mov	r18, r25
    10be:	26 60       	ori	r18, 0x06	; 6
    10c0:	b2 2e       	mov	r11, r18
    10c2:	06 c0       	rjmp	.+12     	; 0x10d0 <vfprintf+0x278>
    10c4:	28 e0       	ldi	r18, 0x08	; 8
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	05 c0       	rjmp	.+10     	; 0x10d4 <vfprintf+0x27c>
    10ca:	20 e1       	ldi	r18, 0x10	; 16
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <vfprintf+0x27c>
    10d0:	20 e1       	ldi	r18, 0x10	; 16
    10d2:	32 e0       	ldi	r19, 0x02	; 2
    10d4:	f8 01       	movw	r30, r16
    10d6:	b7 fe       	sbrs	r11, 7
    10d8:	07 c0       	rjmp	.+14     	; 0x10e8 <vfprintf+0x290>
    10da:	60 81       	ld	r22, Z
    10dc:	71 81       	ldd	r23, Z+1	; 0x01
    10de:	82 81       	ldd	r24, Z+2	; 0x02
    10e0:	93 81       	ldd	r25, Z+3	; 0x03
    10e2:	0c 5f       	subi	r16, 0xFC	; 252
    10e4:	1f 4f       	sbci	r17, 0xFF	; 255
    10e6:	06 c0       	rjmp	.+12     	; 0x10f4 <vfprintf+0x29c>
    10e8:	60 81       	ld	r22, Z
    10ea:	71 81       	ldd	r23, Z+1	; 0x01
    10ec:	80 e0       	ldi	r24, 0x00	; 0
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	0e 5f       	subi	r16, 0xFE	; 254
    10f2:	1f 4f       	sbci	r17, 0xFF	; 255
    10f4:	a3 01       	movw	r20, r6
    10f6:	0e 94 5f 09 	call	0x12be	; 0x12be <__ultoa_invert>
    10fa:	88 2e       	mov	r8, r24
    10fc:	86 18       	sub	r8, r6
    10fe:	fb 2d       	mov	r31, r11
    1100:	ff 77       	andi	r31, 0x7F	; 127
    1102:	3f 2e       	mov	r3, r31
    1104:	36 fe       	sbrs	r3, 6
    1106:	0d c0       	rjmp	.+26     	; 0x1122 <vfprintf+0x2ca>
    1108:	23 2d       	mov	r18, r3
    110a:	2e 7f       	andi	r18, 0xFE	; 254
    110c:	a2 2e       	mov	r10, r18
    110e:	89 14       	cp	r8, r9
    1110:	58 f4       	brcc	.+22     	; 0x1128 <vfprintf+0x2d0>
    1112:	34 fe       	sbrs	r3, 4
    1114:	0b c0       	rjmp	.+22     	; 0x112c <vfprintf+0x2d4>
    1116:	32 fc       	sbrc	r3, 2
    1118:	09 c0       	rjmp	.+18     	; 0x112c <vfprintf+0x2d4>
    111a:	83 2d       	mov	r24, r3
    111c:	8e 7e       	andi	r24, 0xEE	; 238
    111e:	a8 2e       	mov	r10, r24
    1120:	05 c0       	rjmp	.+10     	; 0x112c <vfprintf+0x2d4>
    1122:	b8 2c       	mov	r11, r8
    1124:	a3 2c       	mov	r10, r3
    1126:	03 c0       	rjmp	.+6      	; 0x112e <vfprintf+0x2d6>
    1128:	b8 2c       	mov	r11, r8
    112a:	01 c0       	rjmp	.+2      	; 0x112e <vfprintf+0x2d6>
    112c:	b9 2c       	mov	r11, r9
    112e:	a4 fe       	sbrs	r10, 4
    1130:	0f c0       	rjmp	.+30     	; 0x1150 <vfprintf+0x2f8>
    1132:	fe 01       	movw	r30, r28
    1134:	e8 0d       	add	r30, r8
    1136:	f1 1d       	adc	r31, r1
    1138:	80 81       	ld	r24, Z
    113a:	80 33       	cpi	r24, 0x30	; 48
    113c:	21 f4       	brne	.+8      	; 0x1146 <vfprintf+0x2ee>
    113e:	9a 2d       	mov	r25, r10
    1140:	99 7e       	andi	r25, 0xE9	; 233
    1142:	a9 2e       	mov	r10, r25
    1144:	09 c0       	rjmp	.+18     	; 0x1158 <vfprintf+0x300>
    1146:	a2 fe       	sbrs	r10, 2
    1148:	06 c0       	rjmp	.+12     	; 0x1156 <vfprintf+0x2fe>
    114a:	b3 94       	inc	r11
    114c:	b3 94       	inc	r11
    114e:	04 c0       	rjmp	.+8      	; 0x1158 <vfprintf+0x300>
    1150:	8a 2d       	mov	r24, r10
    1152:	86 78       	andi	r24, 0x86	; 134
    1154:	09 f0       	breq	.+2      	; 0x1158 <vfprintf+0x300>
    1156:	b3 94       	inc	r11
    1158:	a3 fc       	sbrc	r10, 3
    115a:	11 c0       	rjmp	.+34     	; 0x117e <vfprintf+0x326>
    115c:	a0 fe       	sbrs	r10, 0
    115e:	06 c0       	rjmp	.+12     	; 0x116c <vfprintf+0x314>
    1160:	b2 14       	cp	r11, r2
    1162:	88 f4       	brcc	.+34     	; 0x1186 <vfprintf+0x32e>
    1164:	28 0c       	add	r2, r8
    1166:	92 2c       	mov	r9, r2
    1168:	9b 18       	sub	r9, r11
    116a:	0e c0       	rjmp	.+28     	; 0x1188 <vfprintf+0x330>
    116c:	b2 14       	cp	r11, r2
    116e:	60 f4       	brcc	.+24     	; 0x1188 <vfprintf+0x330>
    1170:	b6 01       	movw	r22, r12
    1172:	80 e2       	ldi	r24, 0x20	; 32
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	0e 94 23 09 	call	0x1246	; 0x1246 <fputc>
    117a:	b3 94       	inc	r11
    117c:	f7 cf       	rjmp	.-18     	; 0x116c <vfprintf+0x314>
    117e:	b2 14       	cp	r11, r2
    1180:	18 f4       	brcc	.+6      	; 0x1188 <vfprintf+0x330>
    1182:	2b 18       	sub	r2, r11
    1184:	02 c0       	rjmp	.+4      	; 0x118a <vfprintf+0x332>
    1186:	98 2c       	mov	r9, r8
    1188:	21 2c       	mov	r2, r1
    118a:	a4 fe       	sbrs	r10, 4
    118c:	10 c0       	rjmp	.+32     	; 0x11ae <vfprintf+0x356>
    118e:	b6 01       	movw	r22, r12
    1190:	80 e3       	ldi	r24, 0x30	; 48
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	0e 94 23 09 	call	0x1246	; 0x1246 <fputc>
    1198:	a2 fe       	sbrs	r10, 2
    119a:	17 c0       	rjmp	.+46     	; 0x11ca <vfprintf+0x372>
    119c:	a1 fc       	sbrc	r10, 1
    119e:	03 c0       	rjmp	.+6      	; 0x11a6 <vfprintf+0x34e>
    11a0:	88 e7       	ldi	r24, 0x78	; 120
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <vfprintf+0x352>
    11a6:	88 e5       	ldi	r24, 0x58	; 88
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	b6 01       	movw	r22, r12
    11ac:	0c c0       	rjmp	.+24     	; 0x11c6 <vfprintf+0x36e>
    11ae:	8a 2d       	mov	r24, r10
    11b0:	86 78       	andi	r24, 0x86	; 134
    11b2:	59 f0       	breq	.+22     	; 0x11ca <vfprintf+0x372>
    11b4:	a1 fe       	sbrs	r10, 1
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <vfprintf+0x364>
    11b8:	8b e2       	ldi	r24, 0x2B	; 43
    11ba:	01 c0       	rjmp	.+2      	; 0x11be <vfprintf+0x366>
    11bc:	80 e2       	ldi	r24, 0x20	; 32
    11be:	a7 fc       	sbrc	r10, 7
    11c0:	8d e2       	ldi	r24, 0x2D	; 45
    11c2:	b6 01       	movw	r22, r12
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	0e 94 23 09 	call	0x1246	; 0x1246 <fputc>
    11ca:	89 14       	cp	r8, r9
    11cc:	38 f4       	brcc	.+14     	; 0x11dc <vfprintf+0x384>
    11ce:	b6 01       	movw	r22, r12
    11d0:	80 e3       	ldi	r24, 0x30	; 48
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	0e 94 23 09 	call	0x1246	; 0x1246 <fputc>
    11d8:	9a 94       	dec	r9
    11da:	f7 cf       	rjmp	.-18     	; 0x11ca <vfprintf+0x372>
    11dc:	8a 94       	dec	r8
    11de:	f3 01       	movw	r30, r6
    11e0:	e8 0d       	add	r30, r8
    11e2:	f1 1d       	adc	r31, r1
    11e4:	80 81       	ld	r24, Z
    11e6:	b6 01       	movw	r22, r12
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	0e 94 23 09 	call	0x1246	; 0x1246 <fputc>
    11ee:	81 10       	cpse	r8, r1
    11f0:	f5 cf       	rjmp	.-22     	; 0x11dc <vfprintf+0x384>
    11f2:	22 20       	and	r2, r2
    11f4:	09 f4       	brne	.+2      	; 0x11f8 <vfprintf+0x3a0>
    11f6:	42 ce       	rjmp	.-892    	; 0xe7c <vfprintf+0x24>
    11f8:	b6 01       	movw	r22, r12
    11fa:	80 e2       	ldi	r24, 0x20	; 32
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	0e 94 23 09 	call	0x1246	; 0x1246 <fputc>
    1202:	2a 94       	dec	r2
    1204:	f6 cf       	rjmp	.-20     	; 0x11f2 <vfprintf+0x39a>
    1206:	f6 01       	movw	r30, r12
    1208:	86 81       	ldd	r24, Z+6	; 0x06
    120a:	97 81       	ldd	r25, Z+7	; 0x07
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <vfprintf+0x3ba>
    120e:	8f ef       	ldi	r24, 0xFF	; 255
    1210:	9f ef       	ldi	r25, 0xFF	; 255
    1212:	2b 96       	adiw	r28, 0x0b	; 11
    1214:	e2 e1       	ldi	r30, 0x12	; 18
    1216:	0c 94 d9 09 	jmp	0x13b2	; 0x13b2 <__epilogue_restores__>

0000121a <strnlen_P>:
    121a:	fc 01       	movw	r30, r24
    121c:	05 90       	lpm	r0, Z+
    121e:	61 50       	subi	r22, 0x01	; 1
    1220:	70 40       	sbci	r23, 0x00	; 0
    1222:	01 10       	cpse	r0, r1
    1224:	d8 f7       	brcc	.-10     	; 0x121c <strnlen_P+0x2>
    1226:	80 95       	com	r24
    1228:	90 95       	com	r25
    122a:	8e 0f       	add	r24, r30
    122c:	9f 1f       	adc	r25, r31
    122e:	08 95       	ret

00001230 <strnlen>:
    1230:	fc 01       	movw	r30, r24
    1232:	61 50       	subi	r22, 0x01	; 1
    1234:	70 40       	sbci	r23, 0x00	; 0
    1236:	01 90       	ld	r0, Z+
    1238:	01 10       	cpse	r0, r1
    123a:	d8 f7       	brcc	.-10     	; 0x1232 <strnlen+0x2>
    123c:	80 95       	com	r24
    123e:	90 95       	com	r25
    1240:	8e 0f       	add	r24, r30
    1242:	9f 1f       	adc	r25, r31
    1244:	08 95       	ret

00001246 <fputc>:
    1246:	0f 93       	push	r16
    1248:	1f 93       	push	r17
    124a:	cf 93       	push	r28
    124c:	df 93       	push	r29
    124e:	fb 01       	movw	r30, r22
    1250:	23 81       	ldd	r18, Z+3	; 0x03
    1252:	21 fd       	sbrc	r18, 1
    1254:	03 c0       	rjmp	.+6      	; 0x125c <fputc+0x16>
    1256:	8f ef       	ldi	r24, 0xFF	; 255
    1258:	9f ef       	ldi	r25, 0xFF	; 255
    125a:	2c c0       	rjmp	.+88     	; 0x12b4 <fputc+0x6e>
    125c:	22 ff       	sbrs	r18, 2
    125e:	16 c0       	rjmp	.+44     	; 0x128c <fputc+0x46>
    1260:	46 81       	ldd	r20, Z+6	; 0x06
    1262:	57 81       	ldd	r21, Z+7	; 0x07
    1264:	24 81       	ldd	r18, Z+4	; 0x04
    1266:	35 81       	ldd	r19, Z+5	; 0x05
    1268:	42 17       	cp	r20, r18
    126a:	53 07       	cpc	r21, r19
    126c:	44 f4       	brge	.+16     	; 0x127e <fputc+0x38>
    126e:	a0 81       	ld	r26, Z
    1270:	b1 81       	ldd	r27, Z+1	; 0x01
    1272:	9d 01       	movw	r18, r26
    1274:	2f 5f       	subi	r18, 0xFF	; 255
    1276:	3f 4f       	sbci	r19, 0xFF	; 255
    1278:	31 83       	std	Z+1, r19	; 0x01
    127a:	20 83       	st	Z, r18
    127c:	8c 93       	st	X, r24
    127e:	26 81       	ldd	r18, Z+6	; 0x06
    1280:	37 81       	ldd	r19, Z+7	; 0x07
    1282:	2f 5f       	subi	r18, 0xFF	; 255
    1284:	3f 4f       	sbci	r19, 0xFF	; 255
    1286:	37 83       	std	Z+7, r19	; 0x07
    1288:	26 83       	std	Z+6, r18	; 0x06
    128a:	14 c0       	rjmp	.+40     	; 0x12b4 <fputc+0x6e>
    128c:	8b 01       	movw	r16, r22
    128e:	ec 01       	movw	r28, r24
    1290:	fb 01       	movw	r30, r22
    1292:	00 84       	ldd	r0, Z+8	; 0x08
    1294:	f1 85       	ldd	r31, Z+9	; 0x09
    1296:	e0 2d       	mov	r30, r0
    1298:	09 95       	icall
    129a:	89 2b       	or	r24, r25
    129c:	e1 f6       	brne	.-72     	; 0x1256 <fputc+0x10>
    129e:	d8 01       	movw	r26, r16
    12a0:	16 96       	adiw	r26, 0x06	; 6
    12a2:	8d 91       	ld	r24, X+
    12a4:	9c 91       	ld	r25, X
    12a6:	17 97       	sbiw	r26, 0x07	; 7
    12a8:	01 96       	adiw	r24, 0x01	; 1
    12aa:	17 96       	adiw	r26, 0x07	; 7
    12ac:	9c 93       	st	X, r25
    12ae:	8e 93       	st	-X, r24
    12b0:	16 97       	sbiw	r26, 0x06	; 6
    12b2:	ce 01       	movw	r24, r28
    12b4:	df 91       	pop	r29
    12b6:	cf 91       	pop	r28
    12b8:	1f 91       	pop	r17
    12ba:	0f 91       	pop	r16
    12bc:	08 95       	ret

000012be <__ultoa_invert>:
    12be:	fa 01       	movw	r30, r20
    12c0:	aa 27       	eor	r26, r26
    12c2:	28 30       	cpi	r18, 0x08	; 8
    12c4:	51 f1       	breq	.+84     	; 0x131a <__ultoa_invert+0x5c>
    12c6:	20 31       	cpi	r18, 0x10	; 16
    12c8:	81 f1       	breq	.+96     	; 0x132a <__ultoa_invert+0x6c>
    12ca:	e8 94       	clt
    12cc:	6f 93       	push	r22
    12ce:	6e 7f       	andi	r22, 0xFE	; 254
    12d0:	6e 5f       	subi	r22, 0xFE	; 254
    12d2:	7f 4f       	sbci	r23, 0xFF	; 255
    12d4:	8f 4f       	sbci	r24, 0xFF	; 255
    12d6:	9f 4f       	sbci	r25, 0xFF	; 255
    12d8:	af 4f       	sbci	r26, 0xFF	; 255
    12da:	b1 e0       	ldi	r27, 0x01	; 1
    12dc:	3e d0       	rcall	.+124    	; 0x135a <__ultoa_invert+0x9c>
    12de:	b4 e0       	ldi	r27, 0x04	; 4
    12e0:	3c d0       	rcall	.+120    	; 0x135a <__ultoa_invert+0x9c>
    12e2:	67 0f       	add	r22, r23
    12e4:	78 1f       	adc	r23, r24
    12e6:	89 1f       	adc	r24, r25
    12e8:	9a 1f       	adc	r25, r26
    12ea:	a1 1d       	adc	r26, r1
    12ec:	68 0f       	add	r22, r24
    12ee:	79 1f       	adc	r23, r25
    12f0:	8a 1f       	adc	r24, r26
    12f2:	91 1d       	adc	r25, r1
    12f4:	a1 1d       	adc	r26, r1
    12f6:	6a 0f       	add	r22, r26
    12f8:	71 1d       	adc	r23, r1
    12fa:	81 1d       	adc	r24, r1
    12fc:	91 1d       	adc	r25, r1
    12fe:	a1 1d       	adc	r26, r1
    1300:	20 d0       	rcall	.+64     	; 0x1342 <__ultoa_invert+0x84>
    1302:	09 f4       	brne	.+2      	; 0x1306 <__ultoa_invert+0x48>
    1304:	68 94       	set
    1306:	3f 91       	pop	r19
    1308:	2a e0       	ldi	r18, 0x0A	; 10
    130a:	26 9f       	mul	r18, r22
    130c:	11 24       	eor	r1, r1
    130e:	30 19       	sub	r19, r0
    1310:	30 5d       	subi	r19, 0xD0	; 208
    1312:	31 93       	st	Z+, r19
    1314:	de f6       	brtc	.-74     	; 0x12cc <__ultoa_invert+0xe>
    1316:	cf 01       	movw	r24, r30
    1318:	08 95       	ret
    131a:	46 2f       	mov	r20, r22
    131c:	47 70       	andi	r20, 0x07	; 7
    131e:	40 5d       	subi	r20, 0xD0	; 208
    1320:	41 93       	st	Z+, r20
    1322:	b3 e0       	ldi	r27, 0x03	; 3
    1324:	0f d0       	rcall	.+30     	; 0x1344 <__ultoa_invert+0x86>
    1326:	c9 f7       	brne	.-14     	; 0x131a <__ultoa_invert+0x5c>
    1328:	f6 cf       	rjmp	.-20     	; 0x1316 <__ultoa_invert+0x58>
    132a:	46 2f       	mov	r20, r22
    132c:	4f 70       	andi	r20, 0x0F	; 15
    132e:	40 5d       	subi	r20, 0xD0	; 208
    1330:	4a 33       	cpi	r20, 0x3A	; 58
    1332:	18 f0       	brcs	.+6      	; 0x133a <__ultoa_invert+0x7c>
    1334:	49 5d       	subi	r20, 0xD9	; 217
    1336:	31 fd       	sbrc	r19, 1
    1338:	40 52       	subi	r20, 0x20	; 32
    133a:	41 93       	st	Z+, r20
    133c:	02 d0       	rcall	.+4      	; 0x1342 <__ultoa_invert+0x84>
    133e:	a9 f7       	brne	.-22     	; 0x132a <__ultoa_invert+0x6c>
    1340:	ea cf       	rjmp	.-44     	; 0x1316 <__ultoa_invert+0x58>
    1342:	b4 e0       	ldi	r27, 0x04	; 4
    1344:	a6 95       	lsr	r26
    1346:	97 95       	ror	r25
    1348:	87 95       	ror	r24
    134a:	77 95       	ror	r23
    134c:	67 95       	ror	r22
    134e:	ba 95       	dec	r27
    1350:	c9 f7       	brne	.-14     	; 0x1344 <__ultoa_invert+0x86>
    1352:	00 97       	sbiw	r24, 0x00	; 0
    1354:	61 05       	cpc	r22, r1
    1356:	71 05       	cpc	r23, r1
    1358:	08 95       	ret
    135a:	9b 01       	movw	r18, r22
    135c:	ac 01       	movw	r20, r24
    135e:	0a 2e       	mov	r0, r26
    1360:	06 94       	lsr	r0
    1362:	57 95       	ror	r21
    1364:	47 95       	ror	r20
    1366:	37 95       	ror	r19
    1368:	27 95       	ror	r18
    136a:	ba 95       	dec	r27
    136c:	c9 f7       	brne	.-14     	; 0x1360 <__ultoa_invert+0xa2>
    136e:	62 0f       	add	r22, r18
    1370:	73 1f       	adc	r23, r19
    1372:	84 1f       	adc	r24, r20
    1374:	95 1f       	adc	r25, r21
    1376:	a0 1d       	adc	r26, r0
    1378:	08 95       	ret

0000137a <__prologue_saves__>:
    137a:	2f 92       	push	r2
    137c:	3f 92       	push	r3
    137e:	4f 92       	push	r4
    1380:	5f 92       	push	r5
    1382:	6f 92       	push	r6
    1384:	7f 92       	push	r7
    1386:	8f 92       	push	r8
    1388:	9f 92       	push	r9
    138a:	af 92       	push	r10
    138c:	bf 92       	push	r11
    138e:	cf 92       	push	r12
    1390:	df 92       	push	r13
    1392:	ef 92       	push	r14
    1394:	ff 92       	push	r15
    1396:	0f 93       	push	r16
    1398:	1f 93       	push	r17
    139a:	cf 93       	push	r28
    139c:	df 93       	push	r29
    139e:	cd b7       	in	r28, 0x3d	; 61
    13a0:	de b7       	in	r29, 0x3e	; 62
    13a2:	ca 1b       	sub	r28, r26
    13a4:	db 0b       	sbc	r29, r27
    13a6:	0f b6       	in	r0, 0x3f	; 63
    13a8:	f8 94       	cli
    13aa:	de bf       	out	0x3e, r29	; 62
    13ac:	0f be       	out	0x3f, r0	; 63
    13ae:	cd bf       	out	0x3d, r28	; 61
    13b0:	09 94       	ijmp

000013b2 <__epilogue_restores__>:
    13b2:	2a 88       	ldd	r2, Y+18	; 0x12
    13b4:	39 88       	ldd	r3, Y+17	; 0x11
    13b6:	48 88       	ldd	r4, Y+16	; 0x10
    13b8:	5f 84       	ldd	r5, Y+15	; 0x0f
    13ba:	6e 84       	ldd	r6, Y+14	; 0x0e
    13bc:	7d 84       	ldd	r7, Y+13	; 0x0d
    13be:	8c 84       	ldd	r8, Y+12	; 0x0c
    13c0:	9b 84       	ldd	r9, Y+11	; 0x0b
    13c2:	aa 84       	ldd	r10, Y+10	; 0x0a
    13c4:	b9 84       	ldd	r11, Y+9	; 0x09
    13c6:	c8 84       	ldd	r12, Y+8	; 0x08
    13c8:	df 80       	ldd	r13, Y+7	; 0x07
    13ca:	ee 80       	ldd	r14, Y+6	; 0x06
    13cc:	fd 80       	ldd	r15, Y+5	; 0x05
    13ce:	0c 81       	ldd	r16, Y+4	; 0x04
    13d0:	1b 81       	ldd	r17, Y+3	; 0x03
    13d2:	aa 81       	ldd	r26, Y+2	; 0x02
    13d4:	b9 81       	ldd	r27, Y+1	; 0x01
    13d6:	ce 0f       	add	r28, r30
    13d8:	d1 1d       	adc	r29, r1
    13da:	0f b6       	in	r0, 0x3f	; 63
    13dc:	f8 94       	cli
    13de:	de bf       	out	0x3e, r29	; 62
    13e0:	0f be       	out	0x3f, r0	; 63
    13e2:	cd bf       	out	0x3d, r28	; 61
    13e4:	ed 01       	movw	r28, r26
    13e6:	08 95       	ret

000013e8 <_exit>:
    13e8:	f8 94       	cli

000013ea <__stop_program>:
    13ea:	ff cf       	rjmp	.-2      	; 0x13ea <__stop_program>
