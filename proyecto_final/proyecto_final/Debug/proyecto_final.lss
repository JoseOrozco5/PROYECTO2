
proyecto_final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000cd0  00000d64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cd0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000026  00800102  00800102  00000d66  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d66  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001297  00000000  00000000  00000ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009e1  00000000  00000000  0000217f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bd8  00000000  00000000  00002b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000027c  00000000  00000000  00003738  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c5  00000000  00000000  000039b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000543  00000000  00000000  00003f79  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000044bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 8b 03 	jmp	0x716	; 0x716 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 41 03 	jmp	0x682	; 0x682 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 86 02 	jmp	0x50c	; 0x50c <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ed       	ldi	r30, 0xD0	; 208
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 32       	cpi	r26, 0x28	; 40
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a1 00 	call	0x142	; 0x142 <main>
  9e:	0c 94 66 06 	jmp	0xccc	; 0xccc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <writeEEPROM>:
// NON-Interrupt subroutines

void writeEEPROM(uint8_t dato, uint16_t direccion)
{
	// 0b00000010 sigue escribiendo, si 0b00000000 ya termino de escribir
	while (EECR &(1 << EEPE));															// ESPERAMOS A QUE BIT 0b000000X0 sea 0 (osea ya termino de escribir)
  a6:	f9 99       	sbic	0x1f, 1	; 31
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <writeEEPROM>
	// Ya termino entonces ya puede empezar a escribir otra vez (le digo a donde "direccion")
	EEAR = direccion;																	// ar (address)
  aa:	72 bd       	out	0x22, r23	; 34
  ac:	61 bd       	out	0x21, r22	; 33
	// Establecer dato que quiero guardar
	EEDR = dato;																		// dr (data)
  ae:	80 bd       	out	0x20, r24	; 32
	EECR |= (1 << EEMPE);																// Master Write enable
  b0:	8f b3       	in	r24, 0x1f	; 31
  b2:	84 60       	ori	r24, 0x04	; 4
  b4:	8f bb       	out	0x1f, r24	; 31
	EECR |= (1 << EEPE);																// habilito escritura
  b6:	8f b3       	in	r24, 0x1f	; 31
  b8:	82 60       	ori	r24, 0x02	; 2
  ba:	8f bb       	out	0x1f, r24	; 31
  bc:	08 95       	ret

000000be <readEEPROM>:
}

uint8_t	 readEEPROM(uint16_t direccion)
{
	while (EECR &(1 << EEPE));															// ESPERAMOS A QUE BIT 0b000000X0 sea 0 (osea ya termino de escribir)
  be:	f9 99       	sbic	0x1f, 1	; 31
  c0:	fe cf       	rjmp	.-4      	; 0xbe <readEEPROM>
	EEAR = direccion;																	// Le digo donde leer
  c2:	92 bd       	out	0x22, r25	; 34
  c4:	81 bd       	out	0x21, r24	; 33
	EECR |= (1 << EERE);																// empezar lectura
  c6:	8f b3       	in	r24, 0x1f	; 31
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	8f bb       	out	0x1f, r24	; 31
	return EEDR;																		// regresa lectura
  cc:	80 b5       	in	r24, 0x20	; 32
}
  ce:	08 95       	ret

000000d0 <init_ADC>:
}

// NON-Interrupt functions
void init_ADC()
{
	ADMUX = 0;																		// LIMPIAR REGISTRO
  d0:	ec e7       	ldi	r30, 0x7C	; 124
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0);															// utilizar AVcc como referencia (5v)
  d6:	80 81       	ld	r24, Z
  d8:	80 64       	ori	r24, 0x40	; 64
  da:	80 83       	st	Z, r24
	ADMUX |= (1 << ADLAR);															// justificado a la izquierda (y leo 8 bits mas significativos)
  dc:	80 81       	ld	r24, Z
  de:	80 62       	ori	r24, 0x20	; 32
  e0:	80 83       	st	Z, r24
	ADMUX |= (1 << MUX0);															// utilizar PC1 para potenciometro
  e2:	80 81       	ld	r24, Z
  e4:	81 60       	ori	r24, 0x01	; 1
  e6:	80 83       	st	Z, r24
	
	ADCSRA = 0;																		// LIMPIAR REGISTRO
  e8:	ea e7       	ldi	r30, 0x7A	; 122
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	10 82       	st	Z, r1
	ADCSRA |= (1 << ADEN);															// Activar ADC
  ee:	80 81       	ld	r24, Z
  f0:	80 68       	ori	r24, 0x80	; 128
  f2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);															// Activar interrupcion del ADC
  f4:	80 81       	ld	r24, Z
  f6:	88 60       	ori	r24, 0x08	; 8
  f8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);							// prescaler 128
  fa:	80 81       	ld	r24, Z
  fc:	87 60       	ori	r24, 0x07	; 7
  fe:	80 83       	st	Z, r24
 100:	08 95       	ret

00000102 <setup>:
	//ADCSRA |= (1 << ADSC);															// iniciar primera conversión
}

void setup()
{
	DDRB |= (1 << PORTB5) | (1 << PORTB4) | (1 << PORTB0);							// SALIDA LED´S modos
 102:	84 b1       	in	r24, 0x04	; 4
 104:	81 63       	ori	r24, 0x31	; 49
 106:	84 b9       	out	0x04, r24	; 4
	
	DDRD &= ~((1 << PORTD4) | (1 << PORTD5) | (1 << PORTD6));						// entradas botones
 108:	8a b1       	in	r24, 0x0a	; 10
 10a:	8f 78       	andi	r24, 0x8F	; 143
 10c:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PORTD4) | (1 << PORTD5) |(1 << PORTD6);							// pull up internos
 10e:	8b b1       	in	r24, 0x0b	; 11
 110:	80 67       	ori	r24, 0x70	; 112
 112:	8b b9       	out	0x0b, r24	; 11
	//-------------LED´S EEPROM---------------//
	DDRC |= (1 << PORTC0) | (1 << PORTC5);
 114:	87 b1       	in	r24, 0x07	; 7
 116:	81 62       	ori	r24, 0x21	; 33
 118:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1 << PORTD7) | (1 << PORTD2);
 11a:	8a b1       	in	r24, 0x0a	; 10
 11c:	84 68       	ori	r24, 0x84	; 132
 11e:	8a b9       	out	0x0a, r24	; 10
	PORTC &= ~((1 << PORTC0) | (1 << PORTC5));
 120:	88 b1       	in	r24, 0x08	; 8
 122:	8e 7d       	andi	r24, 0xDE	; 222
 124:	88 b9       	out	0x08, r24	; 8
	PORTD &= ~((1 << PORTD7) | (1 << PORTD2));
 126:	8b b1       	in	r24, 0x0b	; 11
 128:	8b 77       	andi	r24, 0x7B	; 123
 12a:	8b b9       	out	0x0b, r24	; 11
	//-----------Interrupciones--------------//
	PCICR  |= (1<<PCIE2);															// pin-change interrupt puertoD
 12c:	e8 e6       	ldi	r30, 0x68	; 104
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	84 60       	ori	r24, 0x04	; 4
 134:	80 83       	st	Z, r24
	PCMSK2 |= (1<<PCINT22) | (1 << PCINT21) | (1 << PCINT20);						// BOTON MODO EN PD6, PD5 MOSTRAR Y PD4 GUARDAR
 136:	ed e6       	ldi	r30, 0x6D	; 109
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	80 67       	ori	r24, 0x70	; 112
 13e:	80 83       	st	Z, r24
 140:	08 95       	ret

00000142 <main>:

// Main
int main(void)
{
	// DIVIDIR PRESCALER PARA 8MHz
	CLKPR |= (1 << CLKPCE);
 142:	e1 e6       	ldi	r30, 0x61	; 97
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	80 68       	ori	r24, 0x80	; 128
 14a:	80 83       	st	Z, r24
	CLKPR |= (1 << CLKPS0);
 14c:	80 81       	ld	r24, Z
 14e:	81 60       	ori	r24, 0x01	; 1
 150:	80 83       	st	Z, r24
	
	setup();
 152:	0e 94 81 00 	call	0x102	; 0x102 <setup>
	init_PWM1(19999);
 156:	8f e1       	ldi	r24, 0x1F	; 31
 158:	9e e4       	ldi	r25, 0x4E	; 78
 15a:	0e 94 df 03 	call	0x7be	; 0x7be <init_PWM1>
	init_PWM2();
 15e:	0e 94 25 04 	call	0x84a	; 0x84a <init_PWM2>
	init_ADC();
 162:	0e 94 68 00 	call	0xd0	; 0xd0 <init_ADC>
	init_USART();
 166:	0e 94 69 04 	call	0x8d2	; 0x8d2 <init_USART>
	sei();
 16a:	78 94       	sei
	while (1)
	{
		
		switch(modo)
 16c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <modo>
 170:	81 30       	cpi	r24, 0x01	; 1
 172:	a9 f0       	breq	.+42     	; 0x19e <main+0x5c>
 174:	18 f0       	brcs	.+6      	; 0x17c <main+0x3a>
 176:	82 30       	cpi	r24, 0x02	; 2
 178:	f1 f0       	breq	.+60     	; 0x1b6 <main+0x74>
 17a:	f8 cf       	rjmp	.-16     	; 0x16c <main+0x2a>
		{
			case 0:
			//------------LED MODO MANUAL------------------//
			PORTB &= ~(1 << PORTB4);
 17c:	85 b1       	in	r24, 0x05	; 5
 17e:	8f 7e       	andi	r24, 0xEF	; 239
 180:	85 b9       	out	0x05, r24	; 5
			PORTB &= ~(1 << PORTB0);
 182:	85 b1       	in	r24, 0x05	; 5
 184:	8e 7f       	andi	r24, 0xFE	; 254
 186:	85 b9       	out	0x05, r24	; 5
			PORTB |= (1 << PORTB5);																// LED que indica modo manual
 188:	85 b1       	in	r24, 0x05	; 5
 18a:	80 62       	ori	r24, 0x20	; 32
 18c:	85 b9       	out	0x05, r24	; 5
			//-----------------Iniciar ADC----------------//
			ADCSRA |= (1 << ADSC);																// se hace la lectura del adc (se llama a la interrupcion)
 18e:	ea e7       	ldi	r30, 0x7A	; 122
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	80 64       	ori	r24, 0x40	; 64
 196:	80 83       	st	Z, r24
			adafruit = 0;	
 198:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <adafruit>
			break;
 19c:	e7 cf       	rjmp	.-50     	; 0x16c <main+0x2a>
			
			case 1:
			//------------LED MODO EEPROM--------------//
			PORTB &= ~(1 << PORTB5);
 19e:	85 b1       	in	r24, 0x05	; 5
 1a0:	8f 7d       	andi	r24, 0xDF	; 223
 1a2:	85 b9       	out	0x05, r24	; 5
			PORTB &= ~(1 << PORTB4);
 1a4:	85 b1       	in	r24, 0x05	; 5
 1a6:	8f 7e       	andi	r24, 0xEF	; 239
 1a8:	85 b9       	out	0x05, r24	; 5
			PORTB |= (1 << PORTB0);																// LED que indique modo EEPROM
 1aa:	85 b1       	in	r24, 0x05	; 5
 1ac:	81 60       	ori	r24, 0x01	; 1
 1ae:	85 b9       	out	0x05, r24	; 5
			adafruit = 0;
 1b0:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <adafruit>
			break;
 1b4:	db cf       	rjmp	.-74     	; 0x16c <main+0x2a>
			
			case 2:
			//--------------LED MODO ADAFRUIT----------//
			PORTB &= ~(1 << PORTB5);
 1b6:	85 b1       	in	r24, 0x05	; 5
 1b8:	8f 7d       	andi	r24, 0xDF	; 223
 1ba:	85 b9       	out	0x05, r24	; 5
			PORTB &= ~(1 << PORTB0);
 1bc:	85 b1       	in	r24, 0x05	; 5
 1be:	8e 7f       	andi	r24, 0xFE	; 254
 1c0:	85 b9       	out	0x05, r24	; 5
			PORTB |= (1 << PORTB4);																// LED que indica modo Adafruit
 1c2:	85 b1       	in	r24, 0x05	; 5
 1c4:	80 61       	ori	r24, 0x10	; 16
 1c6:	85 b9       	out	0x05, r24	; 5
				writeString("Usted esta en modo Adafruit, por favor mueva un slider. \n");
				writeString("Indique que servomotor desea mover e ingrese un valor de 0 a 255. Ejemplo 1,120  \n");
				writeString("\n");
				adafruit = 1;
			}*/
			if (paquete == 1)
 1c8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <paquete>
 1cc:	81 30       	cpi	r24, 0x01	; 1
 1ce:	71 f6       	brne	.-100    	; 0x16c <main+0x2a>
			{
				paquete = 0;														// limpio bandera para proxima interaccion
 1d0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <paquete>
				uint8_t motor = buffer[1] - '0';
 1d4:	c0 91 13 01 	lds	r28, 0x0113	; 0x800113 <buffer+0x1>
 1d8:	c0 53       	subi	r28, 0x30	; 48
				uint8_t ang = 0;
				
				for (char *paketa = strchr(buffer, ':') + 1; *paketa; ++paketa)
 1da:	6a e3       	ldi	r22, 0x3A	; 58
 1dc:	70 e0       	ldi	r23, 0x00	; 0
 1de:	82 e1       	ldi	r24, 0x12	; 18
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <strchr>
 1e6:	fc 01       	movw	r30, r24
 1e8:	31 96       	adiw	r30, 0x01	; 1
			}*/
			if (paquete == 1)
			{
				paquete = 0;														// limpio bandera para proxima interaccion
				uint8_t motor = buffer[1] - '0';
				uint8_t ang = 0;
 1ea:	80 e0       	ldi	r24, 0x00	; 0
				
				for (char *paketa = strchr(buffer, ':') + 1; *paketa; ++paketa)
 1ec:	09 c0       	rjmp	.+18     	; 0x200 <main+0xbe>
				{
					ang	= ang * 10 + (*paketa - '0');
 1ee:	88 0f       	add	r24, r24
 1f0:	28 2f       	mov	r18, r24
 1f2:	22 0f       	add	r18, r18
 1f4:	22 0f       	add	r18, r18
 1f6:	82 0f       	add	r24, r18
 1f8:	98 0f       	add	r25, r24
 1fa:	80 ed       	ldi	r24, 0xD0	; 208
 1fc:	89 0f       	add	r24, r25
			{
				paquete = 0;														// limpio bandera para proxima interaccion
				uint8_t motor = buffer[1] - '0';
				uint8_t ang = 0;
				
				for (char *paketa = strchr(buffer, ':') + 1; *paketa; ++paketa)
 1fe:	31 96       	adiw	r30, 0x01	; 1
 200:	90 81       	ld	r25, Z
 202:	91 11       	cpse	r25, r1
 204:	f4 cf       	rjmp	.-24     	; 0x1ee <main+0xac>
					ang	= ang * 10 + (*paketa - '0');
				}
				
				/*if (sscanf(buffer, "%hhu,%hhu", &motor, &ang) == 2)
				{*/
					switch(motor)
 206:	c2 30       	cpi	r28, 0x02	; 2
 208:	69 f0       	breq	.+26     	; 0x224 <main+0xe2>
 20a:	18 f4       	brcc	.+6      	; 0x212 <main+0xd0>
 20c:	c1 30       	cpi	r28, 0x01	; 1
 20e:	31 f0       	breq	.+12     	; 0x21c <main+0xda>
 210:	12 c0       	rjmp	.+36     	; 0x236 <main+0xf4>
 212:	c3 30       	cpi	r28, 0x03	; 3
 214:	59 f0       	breq	.+22     	; 0x22c <main+0xea>
 216:	c4 30       	cpi	r28, 0x04	; 4
 218:	61 f0       	breq	.+24     	; 0x232 <main+0xf0>
 21a:	0d c0       	rjmp	.+26     	; 0x236 <main+0xf4>
					{
						case 1:
						pulso_PWM1(ang);
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <pulso_PWM1>
						break;
 222:	09 c0       	rjmp	.+18     	; 0x236 <main+0xf4>
						case 2:
						pulso2_PWM1(ang);
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 0d 04 	call	0x81a	; 0x81a <pulso2_PWM1>
						break;
 22a:	05 c0       	rjmp	.+10     	; 0x236 <main+0xf4>
						case 3:
						pulse_PWM2(ang);
 22c:	0e 94 3b 04 	call	0x876	; 0x876 <pulse_PWM2>
						break;
 230:	02 c0       	rjmp	.+4      	; 0x236 <main+0xf4>
						case 4:
						pulse2_PWM2(ang);
 232:	0e 94 52 04 	call	0x8a4	; 0x8a4 <pulse2_PWM2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 236:	8f e3       	ldi	r24, 0x3F	; 63
 238:	9c e9       	ldi	r25, 0x9C	; 156
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <main+0xf8>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <main+0xfe>
 240:	00 00       	nop
 242:	94 cf       	rjmp	.-216    	; 0x16c <main+0x2a>

00000244 <guardar>:
}

void guardar()
{
	
	switch (contador_pos)
 244:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <contador_pos>
 248:	81 30       	cpi	r24, 0x01	; 1
 24a:	69 f1       	breq	.+90     	; 0x2a6 <guardar+0x62>
 24c:	38 f0       	brcs	.+14     	; 0x25c <guardar+0x18>
 24e:	82 30       	cpi	r24, 0x02	; 2
 250:	09 f4       	brne	.+2      	; 0x254 <guardar+0x10>
 252:	4e c0       	rjmp	.+156    	; 0x2f0 <guardar+0xac>
 254:	83 30       	cpi	r24, 0x03	; 3
 256:	09 f4       	brne	.+2      	; 0x25a <guardar+0x16>
 258:	70 c0       	rjmp	.+224    	; 0x33a <guardar+0xf6>
 25a:	93 c0       	rjmp	.+294    	; 0x382 <guardar+0x13e>
	{
		case 0:
		PORTC &= ~(1 << PORTC0);
 25c:	88 b1       	in	r24, 0x08	; 8
 25e:	8e 7f       	andi	r24, 0xFE	; 254
 260:	88 b9       	out	0x08, r24	; 8
		PORTC |= (1 << PORTC5);
 262:	88 b1       	in	r24, 0x08	; 8
 264:	80 62       	ori	r24, 0x20	; 32
 266:	88 b9       	out	0x08, r24	; 8
		PORTD &= ~(1 << PORTD7);
 268:	8b b1       	in	r24, 0x0b	; 11
 26a:	8f 77       	andi	r24, 0x7F	; 127
 26c:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1 << PORTD2);
 26e:	8b b1       	in	r24, 0x0b	; 11
 270:	8b 7f       	andi	r24, 0xFB	; 251
 272:	8b b9       	out	0x0b, r24	; 11
		writeEEPROM(servo1, 0);													// registro de memoria (0, 4, 8 y 12)
 274:	60 e0       	ldi	r22, 0x00	; 0
 276:	70 e0       	ldi	r23, 0x00	; 0
 278:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <servo1>
 27c:	0e 94 53 00 	call	0xa6	; 0xa6 <writeEEPROM>
		writeEEPROM(servo2, 1);													// registro de memoria (1, 5, 9 y 13)
 280:	61 e0       	ldi	r22, 0x01	; 1
 282:	70 e0       	ldi	r23, 0x00	; 0
 284:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <servo2>
 288:	0e 94 53 00 	call	0xa6	; 0xa6 <writeEEPROM>
		writeEEPROM(servo3, 2);													// registro de memoria (2, 6, 10 y 14)
 28c:	62 e0       	ldi	r22, 0x02	; 2
 28e:	70 e0       	ldi	r23, 0x00	; 0
 290:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <servo3>
 294:	0e 94 53 00 	call	0xa6	; 0xa6 <writeEEPROM>
		writeEEPROM(servo4, 3);
 298:	63 e0       	ldi	r22, 0x03	; 3
 29a:	70 e0       	ldi	r23, 0x00	; 0
 29c:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <servo4>
 2a0:	0e 94 53 00 	call	0xa6	; 0xa6 <writeEEPROM>
		break;
 2a4:	6e c0       	rjmp	.+220    	; 0x382 <guardar+0x13e>
		case 1:
		PORTC |= (1 << PORTC0);
 2a6:	88 b1       	in	r24, 0x08	; 8
 2a8:	81 60       	ori	r24, 0x01	; 1
 2aa:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC5);
 2ac:	88 b1       	in	r24, 0x08	; 8
 2ae:	8f 7d       	andi	r24, 0xDF	; 223
 2b0:	88 b9       	out	0x08, r24	; 8
		PORTD &= ~(1 << PORTD7);
 2b2:	8b b1       	in	r24, 0x0b	; 11
 2b4:	8f 77       	andi	r24, 0x7F	; 127
 2b6:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1 << PORTD2);
 2b8:	8b b1       	in	r24, 0x0b	; 11
 2ba:	8b 7f       	andi	r24, 0xFB	; 251
 2bc:	8b b9       	out	0x0b, r24	; 11
		writeEEPROM(servo1, 4);													// registro de memoria (0, 4, 8 y 12)
 2be:	64 e0       	ldi	r22, 0x04	; 4
 2c0:	70 e0       	ldi	r23, 0x00	; 0
 2c2:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <servo1>
 2c6:	0e 94 53 00 	call	0xa6	; 0xa6 <writeEEPROM>
		writeEEPROM(servo2, 5);													// registro de memoria (1, 5, 9 y 13)
 2ca:	65 e0       	ldi	r22, 0x05	; 5
 2cc:	70 e0       	ldi	r23, 0x00	; 0
 2ce:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <servo2>
 2d2:	0e 94 53 00 	call	0xa6	; 0xa6 <writeEEPROM>
		writeEEPROM(servo3, 6);													// registro de memoria (2, 6, 10 y 14)
 2d6:	66 e0       	ldi	r22, 0x06	; 6
 2d8:	70 e0       	ldi	r23, 0x00	; 0
 2da:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <servo3>
 2de:	0e 94 53 00 	call	0xa6	; 0xa6 <writeEEPROM>
		writeEEPROM(servo4, 7);
 2e2:	67 e0       	ldi	r22, 0x07	; 7
 2e4:	70 e0       	ldi	r23, 0x00	; 0
 2e6:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <servo4>
 2ea:	0e 94 53 00 	call	0xa6	; 0xa6 <writeEEPROM>
		break;
 2ee:	49 c0       	rjmp	.+146    	; 0x382 <guardar+0x13e>
		case 2:
		PORTC &= ~(1 << PORTC0);
 2f0:	88 b1       	in	r24, 0x08	; 8
 2f2:	8e 7f       	andi	r24, 0xFE	; 254
 2f4:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC5);
 2f6:	88 b1       	in	r24, 0x08	; 8
 2f8:	8f 7d       	andi	r24, 0xDF	; 223
 2fa:	88 b9       	out	0x08, r24	; 8
		PORTD |= (1 << PORTD7);
 2fc:	8b b1       	in	r24, 0x0b	; 11
 2fe:	80 68       	ori	r24, 0x80	; 128
 300:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1 << PORTD2);
 302:	8b b1       	in	r24, 0x0b	; 11
 304:	8b 7f       	andi	r24, 0xFB	; 251
 306:	8b b9       	out	0x0b, r24	; 11
		writeEEPROM(servo1, 8);													// registro de memoria (0, 4, 8 y 12)
 308:	68 e0       	ldi	r22, 0x08	; 8
 30a:	70 e0       	ldi	r23, 0x00	; 0
 30c:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <servo1>
 310:	0e 94 53 00 	call	0xa6	; 0xa6 <writeEEPROM>
		writeEEPROM(servo2, 9);													// registro de memoria (1, 5, 9 y 13)
 314:	69 e0       	ldi	r22, 0x09	; 9
 316:	70 e0       	ldi	r23, 0x00	; 0
 318:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <servo2>
 31c:	0e 94 53 00 	call	0xa6	; 0xa6 <writeEEPROM>
		writeEEPROM(servo3, 10);													// registro de memoria (2, 6, 10 y 14)
 320:	6a e0       	ldi	r22, 0x0A	; 10
 322:	70 e0       	ldi	r23, 0x00	; 0
 324:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <servo3>
 328:	0e 94 53 00 	call	0xa6	; 0xa6 <writeEEPROM>
		writeEEPROM(servo4, 11);
 32c:	6b e0       	ldi	r22, 0x0B	; 11
 32e:	70 e0       	ldi	r23, 0x00	; 0
 330:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <servo4>
 334:	0e 94 53 00 	call	0xa6	; 0xa6 <writeEEPROM>
		break;
 338:	24 c0       	rjmp	.+72     	; 0x382 <guardar+0x13e>
		case 3:
		PORTC &= ~(1 << PORTC0);
 33a:	88 b1       	in	r24, 0x08	; 8
 33c:	8e 7f       	andi	r24, 0xFE	; 254
 33e:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC5);
 340:	88 b1       	in	r24, 0x08	; 8
 342:	8f 7d       	andi	r24, 0xDF	; 223
 344:	88 b9       	out	0x08, r24	; 8
		PORTD &= ~(1 << PORTD7);
 346:	8b b1       	in	r24, 0x0b	; 11
 348:	8f 77       	andi	r24, 0x7F	; 127
 34a:	8b b9       	out	0x0b, r24	; 11
		PORTD |= (1 << PORTD2);
 34c:	8b b1       	in	r24, 0x0b	; 11
 34e:	84 60       	ori	r24, 0x04	; 4
 350:	8b b9       	out	0x0b, r24	; 11
		writeEEPROM(servo1, 12);													// registro de memoria (0, 4, 8 y 12)
 352:	6c e0       	ldi	r22, 0x0C	; 12
 354:	70 e0       	ldi	r23, 0x00	; 0
 356:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <servo1>
 35a:	0e 94 53 00 	call	0xa6	; 0xa6 <writeEEPROM>
		writeEEPROM(servo2, 13);													// registro de memoria (1, 5, 9 y 13)
 35e:	6d e0       	ldi	r22, 0x0D	; 13
 360:	70 e0       	ldi	r23, 0x00	; 0
 362:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <servo2>
 366:	0e 94 53 00 	call	0xa6	; 0xa6 <writeEEPROM>
		writeEEPROM(servo3, 14);													// registro de memoria (2, 6, 10 y 14)
 36a:	6e e0       	ldi	r22, 0x0E	; 14
 36c:	70 e0       	ldi	r23, 0x00	; 0
 36e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <servo3>
 372:	0e 94 53 00 	call	0xa6	; 0xa6 <writeEEPROM>
		writeEEPROM(servo4, 15);
 376:	6f e0       	ldi	r22, 0x0F	; 15
 378:	70 e0       	ldi	r23, 0x00	; 0
 37a:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <servo4>
 37e:	0e 94 53 00 	call	0xa6	; 0xa6 <writeEEPROM>
		break;
	}
	contador_pos = (contador_pos + 1) % 4;
 382:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <contador_pos>
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	01 96       	adiw	r24, 0x01	; 1
 38a:	83 70       	andi	r24, 0x03	; 3
 38c:	90 78       	andi	r25, 0x80	; 128
 38e:	99 23       	and	r25, r25
 390:	24 f4       	brge	.+8      	; 0x39a <guardar+0x156>
 392:	01 97       	sbiw	r24, 0x01	; 1
 394:	8c 6f       	ori	r24, 0xFC	; 252
 396:	9f 6f       	ori	r25, 0xFF	; 255
 398:	01 96       	adiw	r24, 0x01	; 1
 39a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <contador_pos>
 39e:	08 95       	ret

000003a0 <mostrar>:
}

void mostrar()
{
	
	switch(pos_actual)
 3a0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pos_actual>
 3a4:	81 30       	cpi	r24, 0x01	; 1
 3a6:	79 f1       	breq	.+94     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3a8:	38 f0       	brcs	.+14     	; 0x3b8 <mostrar+0x18>
 3aa:	82 30       	cpi	r24, 0x02	; 2
 3ac:	09 f4       	brne	.+2      	; 0x3b0 <mostrar+0x10>
 3ae:	52 c0       	rjmp	.+164    	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 3b0:	83 30       	cpi	r24, 0x03	; 3
 3b2:	09 f4       	brne	.+2      	; 0x3b6 <mostrar+0x16>
 3b4:	76 c0       	rjmp	.+236    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 3b6:	9b c0       	rjmp	.+310    	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
	{
		case 0:
		PORTC &= ~(1 << PORTC0);
 3b8:	88 b1       	in	r24, 0x08	; 8
 3ba:	8e 7f       	andi	r24, 0xFE	; 254
 3bc:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC5);
 3be:	88 b1       	in	r24, 0x08	; 8
 3c0:	8f 7d       	andi	r24, 0xDF	; 223
 3c2:	88 b9       	out	0x08, r24	; 8
		PORTD &= ~(1 << PORTD7);
 3c4:	8b b1       	in	r24, 0x0b	; 11
 3c6:	8f 77       	andi	r24, 0x7F	; 127
 3c8:	8b b9       	out	0x0b, r24	; 11
		PORTD |= (1 << PORTD2);
 3ca:	8b b1       	in	r24, 0x0b	; 11
 3cc:	84 60       	ori	r24, 0x04	; 4
 3ce:	8b b9       	out	0x0b, r24	; 11
		pulso_PWM1(readEEPROM(0));												// Posiciones 0, 4, 8 y 12 para servo1
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	0e 94 5f 00 	call	0xbe	; 0xbe <readEEPROM>
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	0e 94 f5 03 	call	0x7ea	; 0x7ea <pulso_PWM1>
		pulso2_PWM1(readEEPROM(1));
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	0e 94 5f 00 	call	0xbe	; 0xbe <readEEPROM>
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	0e 94 0d 04 	call	0x81a	; 0x81a <pulso2_PWM1>
		pulse_PWM2(readEEPROM(2));
 3ec:	82 e0       	ldi	r24, 0x02	; 2
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	0e 94 5f 00 	call	0xbe	; 0xbe <readEEPROM>
 3f4:	0e 94 3b 04 	call	0x876	; 0x876 <pulse_PWM2>
		pulse2_PWM2(readEEPROM(3));
 3f8:	83 e0       	ldi	r24, 0x03	; 3
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	0e 94 5f 00 	call	0xbe	; 0xbe <readEEPROM>
 400:	0e 94 52 04 	call	0x8a4	; 0x8a4 <pulse2_PWM2>
		break;
 404:	74 c0       	rjmp	.+232    	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
		case 1:
		PORTC &= ~(1 << PORTC0);
 406:	88 b1       	in	r24, 0x08	; 8
 408:	8e 7f       	andi	r24, 0xFE	; 254
 40a:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC5);
 40c:	88 b1       	in	r24, 0x08	; 8
 40e:	8f 7d       	andi	r24, 0xDF	; 223
 410:	88 b9       	out	0x08, r24	; 8
		PORTD |= (1 << PORTD7);
 412:	8b b1       	in	r24, 0x0b	; 11
 414:	80 68       	ori	r24, 0x80	; 128
 416:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1 << PORTD2);
 418:	8b b1       	in	r24, 0x0b	; 11
 41a:	8b 7f       	andi	r24, 0xFB	; 251
 41c:	8b b9       	out	0x0b, r24	; 11
		pulso_PWM1(readEEPROM(4));
 41e:	84 e0       	ldi	r24, 0x04	; 4
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	0e 94 5f 00 	call	0xbe	; 0xbe <readEEPROM>
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	0e 94 f5 03 	call	0x7ea	; 0x7ea <pulso_PWM1>
		pulso2_PWM1(readEEPROM(5));												// Posiciones 1, 5, 9 y 13 para servo2
 42c:	85 e0       	ldi	r24, 0x05	; 5
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	0e 94 5f 00 	call	0xbe	; 0xbe <readEEPROM>
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	0e 94 0d 04 	call	0x81a	; 0x81a <pulso2_PWM1>
		pulse_PWM2(readEEPROM(6));
 43a:	86 e0       	ldi	r24, 0x06	; 6
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	0e 94 5f 00 	call	0xbe	; 0xbe <readEEPROM>
 442:	0e 94 3b 04 	call	0x876	; 0x876 <pulse_PWM2>
		pulse2_PWM2(readEEPROM(7));
 446:	87 e0       	ldi	r24, 0x07	; 7
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	0e 94 5f 00 	call	0xbe	; 0xbe <readEEPROM>
 44e:	0e 94 52 04 	call	0x8a4	; 0x8a4 <pulse2_PWM2>
		break;
 452:	4d c0       	rjmp	.+154    	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
		case 2:
		PORTC |= (1 << PORTC0);
 454:	88 b1       	in	r24, 0x08	; 8
 456:	81 60       	ori	r24, 0x01	; 1
 458:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC5);
 45a:	88 b1       	in	r24, 0x08	; 8
 45c:	8f 7d       	andi	r24, 0xDF	; 223
 45e:	88 b9       	out	0x08, r24	; 8
		PORTD &= ~(1 << PORTD7);
 460:	8b b1       	in	r24, 0x0b	; 11
 462:	8f 77       	andi	r24, 0x7F	; 127
 464:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1 << PORTD2);
 466:	8b b1       	in	r24, 0x0b	; 11
 468:	8b 7f       	andi	r24, 0xFB	; 251
 46a:	8b b9       	out	0x0b, r24	; 11
		pulso_PWM1(readEEPROM(8));
 46c:	88 e0       	ldi	r24, 0x08	; 8
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	0e 94 5f 00 	call	0xbe	; 0xbe <readEEPROM>
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	0e 94 f5 03 	call	0x7ea	; 0x7ea <pulso_PWM1>
		pulso2_PWM1(readEEPROM(9));
 47a:	89 e0       	ldi	r24, 0x09	; 9
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	0e 94 5f 00 	call	0xbe	; 0xbe <readEEPROM>
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	0e 94 0d 04 	call	0x81a	; 0x81a <pulso2_PWM1>
		pulse_PWM2(readEEPROM(10));												// Posiciones 2, 6, 10 y 14 para servo3
 488:	8a e0       	ldi	r24, 0x0A	; 10
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	0e 94 5f 00 	call	0xbe	; 0xbe <readEEPROM>
 490:	0e 94 3b 04 	call	0x876	; 0x876 <pulse_PWM2>
		pulse2_PWM2(readEEPROM(11));
 494:	8b e0       	ldi	r24, 0x0B	; 11
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	0e 94 5f 00 	call	0xbe	; 0xbe <readEEPROM>
 49c:	0e 94 52 04 	call	0x8a4	; 0x8a4 <pulse2_PWM2>
		break;
 4a0:	26 c0       	rjmp	.+76     	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
		case 3:
		PORTC &= ~(1 << PORTC0);
 4a2:	88 b1       	in	r24, 0x08	; 8
 4a4:	8e 7f       	andi	r24, 0xFE	; 254
 4a6:	88 b9       	out	0x08, r24	; 8
		PORTC |= (1 << PORTC5);
 4a8:	88 b1       	in	r24, 0x08	; 8
 4aa:	80 62       	ori	r24, 0x20	; 32
 4ac:	88 b9       	out	0x08, r24	; 8
		PORTD &= ~(1 << PORTD7);
 4ae:	8b b1       	in	r24, 0x0b	; 11
 4b0:	8f 77       	andi	r24, 0x7F	; 127
 4b2:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1 << PORTD2);
 4b4:	8b b1       	in	r24, 0x0b	; 11
 4b6:	8b 7f       	andi	r24, 0xFB	; 251
 4b8:	8b b9       	out	0x0b, r24	; 11
		pulso_PWM1(readEEPROM(12));
 4ba:	8c e0       	ldi	r24, 0x0C	; 12
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	0e 94 5f 00 	call	0xbe	; 0xbe <readEEPROM>
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <pulso_PWM1>
		pulso2_PWM1(readEEPROM(13));
 4c8:	8d e0       	ldi	r24, 0x0D	; 13
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	0e 94 5f 00 	call	0xbe	; 0xbe <readEEPROM>
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	0e 94 0d 04 	call	0x81a	; 0x81a <pulso2_PWM1>
		pulse_PWM2(readEEPROM(14));
 4d6:	8e e0       	ldi	r24, 0x0E	; 14
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	0e 94 5f 00 	call	0xbe	; 0xbe <readEEPROM>
 4de:	0e 94 3b 04 	call	0x876	; 0x876 <pulse_PWM2>
		pulse2_PWM2(readEEPROM(15));												// Posiciones 3, 7, 11 y 15 para servo4
 4e2:	8f e0       	ldi	r24, 0x0F	; 15
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	0e 94 5f 00 	call	0xbe	; 0xbe <readEEPROM>
 4ea:	0e 94 52 04 	call	0x8a4	; 0x8a4 <pulse2_PWM2>
		break;
	}
	
	pos_actual = (pos_actual + 1) % 4;
 4ee:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pos_actual>
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	01 96       	adiw	r24, 0x01	; 1
 4f6:	83 70       	andi	r24, 0x03	; 3
 4f8:	90 78       	andi	r25, 0x80	; 128
 4fa:	99 23       	and	r25, r25
 4fc:	24 f4       	brge	.+8      	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
 4fe:	01 97       	sbiw	r24, 0x01	; 1
 500:	8c 6f       	ori	r24, 0xFC	; 252
 502:	9f 6f       	ori	r25, 0xFF	; 255
 504:	01 96       	adiw	r24, 0x01	; 1
 506:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <pos_actual>
 50a:	08 95       	ret

0000050c <__vector_21>:
}

// Interrupt routines
ISR(ADC_vect)
{
 50c:	1f 92       	push	r1
 50e:	0f 92       	push	r0
 510:	0f b6       	in	r0, 0x3f	; 63
 512:	0f 92       	push	r0
 514:	11 24       	eor	r1, r1
 516:	2f 93       	push	r18
 518:	3f 93       	push	r19
 51a:	4f 93       	push	r20
 51c:	5f 93       	push	r21
 51e:	6f 93       	push	r22
 520:	7f 93       	push	r23
 522:	8f 93       	push	r24
 524:	9f 93       	push	r25
 526:	af 93       	push	r26
 528:	bf 93       	push	r27
 52a:	ef 93       	push	r30
 52c:	ff 93       	push	r31

	adc_value = ADCH;																	// le cargo el valor del ADCH a adc_value
 52e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 532:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <adc_value>
	
	switch (alternador)
 536:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <alternador>
 53a:	81 30       	cpi	r24, 0x01	; 1
 53c:	51 f1       	breq	.+84     	; 0x592 <__vector_21+0x86>
 53e:	38 f0       	brcs	.+14     	; 0x54e <__vector_21+0x42>
 540:	82 30       	cpi	r24, 0x02	; 2
 542:	09 f4       	brne	.+2      	; 0x546 <__vector_21+0x3a>
 544:	4b c0       	rjmp	.+150    	; 0x5dc <__vector_21+0xd0>
 546:	83 30       	cpi	r24, 0x03	; 3
 548:	09 f4       	brne	.+2      	; 0x54c <__vector_21+0x40>
 54a:	69 c0       	rjmp	.+210    	; 0x61e <__vector_21+0x112>
 54c:	89 c0       	rjmp	.+274    	; 0x660 <__vector_21+0x154>
	{
		
		case 0:

		alternador = 1;																	// Servo1 en PB1
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <alternador>
		ADMUX = 0;																		// LIMPIAR REGISTRO
 554:	ec e7       	ldi	r30, 0x7C	; 124
 556:	f0 e0       	ldi	r31, 0x00	; 0
 558:	10 82       	st	Z, r1
		ADMUX |= (1 << REFS0);															// utilizar AVcc como referencia (5v)
 55a:	80 81       	ld	r24, Z
 55c:	80 64       	ori	r24, 0x40	; 64
 55e:	80 83       	st	Z, r24
		ADMUX |= (1 << ADLAR);															// justificado a la izquierda (y leo 8 bits mas significativos)
 560:	80 81       	ld	r24, Z
 562:	80 62       	ori	r24, 0x20	; 32
 564:	80 83       	st	Z, r24
		ADMUX |= (1 << MUX1);															// utilizar PC2 para potenciometro 2 (MUX1)
 566:	80 81       	ld	r24, Z
 568:	82 60       	ori	r24, 0x02	; 2
 56a:	80 83       	st	Z, r24
		
		pot1 = adc_value;
 56c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <adc_value>
 570:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <pot1>
		servo1 = (pot1 * 180 / 255);													// convertir adc en angulo
 574:	24 eb       	ldi	r18, 0xB4	; 180
 576:	82 9f       	mul	r24, r18
 578:	c0 01       	movw	r24, r0
 57a:	11 24       	eor	r1, r1
 57c:	6f ef       	ldi	r22, 0xFF	; 255
 57e:	70 e0       	ldi	r23, 0x00	; 0
 580:	0e 94 33 06 	call	0xc66	; 0xc66 <__divmodhi4>
 584:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <servo1>
		pulso_PWM1(servo1);																// ajustar ancho de pulso
 588:	86 2f       	mov	r24, r22
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <pulso_PWM1>
		
		break;
 590:	67 c0       	rjmp	.+206    	; 0x660 <__vector_21+0x154>
		
		case 1:
		alternador = 2;																	// Servo2 en PB2
 592:	82 e0       	ldi	r24, 0x02	; 2
 594:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <alternador>
		
		ADMUX = 0;																		// LIMPIAR REGISTRO
 598:	ec e7       	ldi	r30, 0x7C	; 124
 59a:	f0 e0       	ldi	r31, 0x00	; 0
 59c:	10 82       	st	Z, r1
		ADMUX |= (1 << REFS0);															// utilizar AVcc como referencia (5v)
 59e:	80 81       	ld	r24, Z
 5a0:	80 64       	ori	r24, 0x40	; 64
 5a2:	80 83       	st	Z, r24
		ADMUX |= (1 << ADLAR);
 5a4:	80 81       	ld	r24, Z
 5a6:	80 62       	ori	r24, 0x20	; 32
 5a8:	80 83       	st	Z, r24
		ADMUX |= (1 << MUX0);															// PC3 como entrada (MUX0 y MUX1)
 5aa:	80 81       	ld	r24, Z
 5ac:	81 60       	ori	r24, 0x01	; 1
 5ae:	80 83       	st	Z, r24
		ADMUX |= (1 << MUX1);
 5b0:	80 81       	ld	r24, Z
 5b2:	82 60       	ori	r24, 0x02	; 2
 5b4:	80 83       	st	Z, r24
		
		pot2 = adc_value;
 5b6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <adc_value>
 5ba:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <pot2>
		servo2 = (pot2 * 180 / 255);
 5be:	24 eb       	ldi	r18, 0xB4	; 180
 5c0:	82 9f       	mul	r24, r18
 5c2:	c0 01       	movw	r24, r0
 5c4:	11 24       	eor	r1, r1
 5c6:	6f ef       	ldi	r22, 0xFF	; 255
 5c8:	70 e0       	ldi	r23, 0x00	; 0
 5ca:	0e 94 33 06 	call	0xc66	; 0xc66 <__divmodhi4>
 5ce:	60 93 27 01 	sts	0x0127, r22	; 0x800127 <servo2>
		pulso2_PWM1(servo2);
 5d2:	86 2f       	mov	r24, r22
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	0e 94 0d 04 	call	0x81a	; 0x81a <pulso2_PWM1>
		
		break;
 5da:	42 c0       	rjmp	.+132    	; 0x660 <__vector_21+0x154>
		
		case 2:
		alternador = 3;																	// Servo3 en PB3
 5dc:	83 e0       	ldi	r24, 0x03	; 3
 5de:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <alternador>
		
		ADMUX = 0;																		// LIMPIAR REGISTRO
 5e2:	ec e7       	ldi	r30, 0x7C	; 124
 5e4:	f0 e0       	ldi	r31, 0x00	; 0
 5e6:	10 82       	st	Z, r1
		ADMUX |= (1 << REFS0);															// utilizar AVcc como referencia (5v)
 5e8:	80 81       	ld	r24, Z
 5ea:	80 64       	ori	r24, 0x40	; 64
 5ec:	80 83       	st	Z, r24
		ADMUX |= (1 << ADLAR);
 5ee:	80 81       	ld	r24, Z
 5f0:	80 62       	ori	r24, 0x20	; 32
 5f2:	80 83       	st	Z, r24
		ADMUX |= (1 << MUX2);															// PC4 como entrada (pot4)
 5f4:	80 81       	ld	r24, Z
 5f6:	84 60       	ori	r24, 0x04	; 4
 5f8:	80 83       	st	Z, r24
		
		pot3 = adc_value;
 5fa:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <adc_value>
 5fe:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <pot3>
		servo3 = (pot3 * 180 / 255);
 602:	24 eb       	ldi	r18, 0xB4	; 180
 604:	82 9f       	mul	r24, r18
 606:	c0 01       	movw	r24, r0
 608:	11 24       	eor	r1, r1
 60a:	6f ef       	ldi	r22, 0xFF	; 255
 60c:	70 e0       	ldi	r23, 0x00	; 0
 60e:	0e 94 33 06 	call	0xc66	; 0xc66 <__divmodhi4>
 612:	86 2f       	mov	r24, r22
 614:	60 93 0f 01 	sts	0x010F, r22	; 0x80010f <servo3>
		pulse_PWM2(servo3);
 618:	0e 94 3b 04 	call	0x876	; 0x876 <pulse_PWM2>
		
		break;
 61c:	21 c0       	rjmp	.+66     	; 0x660 <__vector_21+0x154>
		
		case 3:
		alternador = 0;																	// Servo4 en PD3
 61e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <alternador>
		
		ADMUX = 0;																		// LIMPIAR REGISTRO
 622:	ec e7       	ldi	r30, 0x7C	; 124
 624:	f0 e0       	ldi	r31, 0x00	; 0
 626:	10 82       	st	Z, r1
		ADMUX |= (1 << REFS0);															// utilizar AVcc como referencia (5v)
 628:	80 81       	ld	r24, Z
 62a:	80 64       	ori	r24, 0x40	; 64
 62c:	80 83       	st	Z, r24
		ADMUX |= (1 << ADLAR);
 62e:	80 81       	ld	r24, Z
 630:	80 62       	ori	r24, 0x20	; 32
 632:	80 83       	st	Z, r24
		ADMUX |= (1 << MUX0);															// Regresamos a pot1 (PC1)
 634:	80 81       	ld	r24, Z
 636:	81 60       	ori	r24, 0x01	; 1
 638:	80 83       	st	Z, r24
		
		pot4 =  adc_value;
 63a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <adc_value>
 63e:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <pot4>
		servo4 = ((pot4 * 180 + 128) / 255);
 642:	24 eb       	ldi	r18, 0xB4	; 180
 644:	82 9f       	mul	r24, r18
 646:	c0 01       	movw	r24, r0
 648:	11 24       	eor	r1, r1
 64a:	80 58       	subi	r24, 0x80	; 128
 64c:	9f 4f       	sbci	r25, 0xFF	; 255
 64e:	6f ef       	ldi	r22, 0xFF	; 255
 650:	70 e0       	ldi	r23, 0x00	; 0
 652:	0e 94 33 06 	call	0xc66	; 0xc66 <__divmodhi4>
 656:	86 2f       	mov	r24, r22
 658:	60 93 23 01 	sts	0x0123, r22	; 0x800123 <servo4>
		pulse2_PWM2(servo4);
 65c:	0e 94 52 04 	call	0x8a4	; 0x8a4 <pulse2_PWM2>
		break;
		
	}
	
}
 660:	ff 91       	pop	r31
 662:	ef 91       	pop	r30
 664:	bf 91       	pop	r27
 666:	af 91       	pop	r26
 668:	9f 91       	pop	r25
 66a:	8f 91       	pop	r24
 66c:	7f 91       	pop	r23
 66e:	6f 91       	pop	r22
 670:	5f 91       	pop	r21
 672:	4f 91       	pop	r20
 674:	3f 91       	pop	r19
 676:	2f 91       	pop	r18
 678:	0f 90       	pop	r0
 67a:	0f be       	out	0x3f, r0	; 63
 67c:	0f 90       	pop	r0
 67e:	1f 90       	pop	r1
 680:	18 95       	reti

00000682 <__vector_18>:

ISR(USART_RX_vect)
{
 682:	1f 92       	push	r1
 684:	0f 92       	push	r0
 686:	0f b6       	in	r0, 0x3f	; 63
 688:	0f 92       	push	r0
 68a:	11 24       	eor	r1, r1
 68c:	2f 93       	push	r18
 68e:	3f 93       	push	r19
 690:	4f 93       	push	r20
 692:	5f 93       	push	r21
 694:	6f 93       	push	r22
 696:	7f 93       	push	r23
 698:	8f 93       	push	r24
 69a:	9f 93       	push	r25
 69c:	af 93       	push	r26
 69e:	bf 93       	push	r27
 6a0:	ef 93       	push	r30
 6a2:	ff 93       	push	r31
	signal = UDR0;																		// leer caracter enviado a la terminal
 6a4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 6a8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <signal>
	
	if (signal != '\n' && signal != '\r' && caracteres < 15)												// si no presiono enter ni escribo mas de 15 caracteres pasa lo de abajo
 6ac:	8a 30       	cpi	r24, 0x0A	; 10
 6ae:	79 f0       	breq	.+30     	; 0x6ce <__vector_18+0x4c>
 6b0:	8d 30       	cpi	r24, 0x0D	; 13
 6b2:	69 f0       	breq	.+26     	; 0x6ce <__vector_18+0x4c>
 6b4:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_end>
 6b8:	ef 30       	cpi	r30, 0x0F	; 15
 6ba:	48 f4       	brcc	.+18     	; 0x6ce <__vector_18+0x4c>
	{
		buffer[caracteres++] = signal;													// guardo los datos que meti a la terminal en el buffer/string
 6bc:	91 e0       	ldi	r25, 0x01	; 1
 6be:	9e 0f       	add	r25, r30
 6c0:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__data_end>
 6c4:	f0 e0       	ldi	r31, 0x00	; 0
 6c6:	ee 5e       	subi	r30, 0xEE	; 238
 6c8:	fe 4f       	sbci	r31, 0xFE	; 254
 6ca:	80 83       	st	Z, r24
 6cc:	13 c0       	rjmp	.+38     	; 0x6f4 <__vector_18+0x72>
		//WriteChar(signal);
	}
	else
	{
		paquete = 1;																		// enciendo flag para el main
 6ce:	81 e0       	ldi	r24, 0x01	; 1
 6d0:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <paquete>
		writeString(buffer);
 6d4:	82 e1       	ldi	r24, 0x12	; 18
 6d6:	91 e0       	ldi	r25, 0x01	; 1
 6d8:	0e 94 89 04 	call	0x912	; 0x912 <writeString>
		writeString("\n");
 6dc:	80 e0       	ldi	r24, 0x00	; 0
 6de:	91 e0       	ldi	r25, 0x01	; 1
 6e0:	0e 94 89 04 	call	0x912	; 0x912 <writeString>
		buffer[caracteres] = '\0';														// cierro cadena (es como poner . al final de la oracion)
 6e4:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_end>
 6e8:	f0 e0       	ldi	r31, 0x00	; 0
 6ea:	ee 5e       	subi	r30, 0xEE	; 238
 6ec:	fe 4f       	sbci	r31, 0xFE	; 254
 6ee:	10 82       	st	Z, r1
		caracteres = 0;																	// limpio variable para proxima vez
 6f0:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
	}
}
 6f4:	ff 91       	pop	r31
 6f6:	ef 91       	pop	r30
 6f8:	bf 91       	pop	r27
 6fa:	af 91       	pop	r26
 6fc:	9f 91       	pop	r25
 6fe:	8f 91       	pop	r24
 700:	7f 91       	pop	r23
 702:	6f 91       	pop	r22
 704:	5f 91       	pop	r21
 706:	4f 91       	pop	r20
 708:	3f 91       	pop	r19
 70a:	2f 91       	pop	r18
 70c:	0f 90       	pop	r0
 70e:	0f be       	out	0x3f, r0	; 63
 710:	0f 90       	pop	r0
 712:	1f 90       	pop	r1
 714:	18 95       	reti

00000716 <__vector_5>:

ISR(PCINT2_vect)
{
 716:	1f 92       	push	r1
 718:	0f 92       	push	r0
 71a:	0f b6       	in	r0, 0x3f	; 63
 71c:	0f 92       	push	r0
 71e:	11 24       	eor	r1, r1
 720:	2f 93       	push	r18
 722:	3f 93       	push	r19
 724:	4f 93       	push	r20
 726:	5f 93       	push	r21
 728:	6f 93       	push	r22
 72a:	7f 93       	push	r23
 72c:	8f 93       	push	r24
 72e:	9f 93       	push	r25
 730:	af 93       	push	r26
 732:	bf 93       	push	r27
 734:	ef 93       	push	r30
 736:	ff 93       	push	r31
	//---------Guardar posicion EEPROM----------//
	if (!(PIND & (1 << PORTD4)) && bandera_guardar == 0)									// Si se presiona el boton y todavia no se ha terminado de procesar la pulsación
 738:	4c 99       	sbic	0x09, 4	; 9
 73a:	0a c0       	rjmp	.+20     	; 0x750 <__vector_5+0x3a>
 73c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <bandera_guardar>
 740:	81 11       	cpse	r24, r1
 742:	06 c0       	rjmp	.+12     	; 0x750 <__vector_5+0x3a>
	{
		bandera_guardar = 1;
 744:	81 e0       	ldi	r24, 0x01	; 1
 746:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <bandera_guardar>
		guardar();
 74a:	0e 94 22 01 	call	0x244	; 0x244 <guardar>
 74e:	02 c0       	rjmp	.+4      	; 0x754 <__vector_5+0x3e>
		} else {
		bandera_guardar = 0;
 750:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <bandera_guardar>
	}
	
	//---------Mostrar posicion EEPROM----------//
	if (!(PIND & (1 << PORTD5)) && bandera_mostrar == 0)
 754:	4d 99       	sbic	0x09, 5	; 9
 756:	0a c0       	rjmp	.+20     	; 0x76c <__vector_5+0x56>
 758:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <bandera_mostrar>
 75c:	81 11       	cpse	r24, r1
 75e:	06 c0       	rjmp	.+12     	; 0x76c <__vector_5+0x56>
	{
		bandera_mostrar = 1;
 760:	81 e0       	ldi	r24, 0x01	; 1
 762:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <bandera_mostrar>
		mostrar();
 766:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <mostrar>
 76a:	02 c0       	rjmp	.+4      	; 0x770 <__vector_5+0x5a>
		} else{
		bandera_mostrar = 0;
 76c:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <bandera_mostrar>
	}
	
	//------------Cambio de modo--------------//
	if (!(PIND &(1 << PORTD6)) && antonio_banderas == 0)														// Si se apacha PD4 se le suma 1 a modo (es decir cambia de modo)
 770:	4e 99       	sbic	0x09, 6	; 9
 772:	12 c0       	rjmp	.+36     	; 0x798 <__vector_5+0x82>
 774:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <antonio_banderas>
 778:	81 11       	cpse	r24, r1
 77a:	0e c0       	rjmp	.+28     	; 0x798 <__vector_5+0x82>
	{
		antonio_banderas = 1;
 77c:	81 e0       	ldi	r24, 0x01	; 1
 77e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <antonio_banderas>
		modo = (modo + 1) %3;
 782:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <modo>
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	01 96       	adiw	r24, 0x01	; 1
 78a:	63 e0       	ldi	r22, 0x03	; 3
 78c:	70 e0       	ldi	r23, 0x00	; 0
 78e:	0e 94 33 06 	call	0xc66	; 0xc66 <__divmodhi4>
 792:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <modo>
 796:	02 c0       	rjmp	.+4      	; 0x79c <__vector_5+0x86>
		} else{
		antonio_banderas = 0;
 798:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <antonio_banderas>
	}
}
 79c:	ff 91       	pop	r31
 79e:	ef 91       	pop	r30
 7a0:	bf 91       	pop	r27
 7a2:	af 91       	pop	r26
 7a4:	9f 91       	pop	r25
 7a6:	8f 91       	pop	r24
 7a8:	7f 91       	pop	r23
 7aa:	6f 91       	pop	r22
 7ac:	5f 91       	pop	r21
 7ae:	4f 91       	pop	r20
 7b0:	3f 91       	pop	r19
 7b2:	2f 91       	pop	r18
 7b4:	0f 90       	pop	r0
 7b6:	0f be       	out	0x3f, r0	; 63
 7b8:	0f 90       	pop	r0
 7ba:	1f 90       	pop	r1
 7bc:	18 95       	reti

000007be <init_PWM1>:
// Librerias
#include "pwm1.h"

// NON-Interrupt subroutines
// El PWM sirve para el servomotor, este genera una señal que hace que se mueva
void init_PWM1(uint16_t TOP){
 7be:	9c 01       	movw	r18, r24
	DDRB |= (1 << PORTB1) | (1 << PORTB2);										// Salida para servo1 (PB1) Y servo 2 (PB2)
 7c0:	94 b1       	in	r25, 0x04	; 4
 7c2:	96 60       	ori	r25, 0x06	; 6
 7c4:	94 b9       	out	0x04, r25	; 4
	TCCR1A = 0;																	// LIMPIAR TCCRA
 7c6:	e0 e8       	ldi	r30, 0x80	; 128
 7c8:	f0 e0       	ldi	r31, 0x00	; 0
 7ca:	10 82       	st	Z, r1
	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11);						// Polaridad no invertido (OC1A para servo1 y OC1B para servo2) y fast pwm (parte baja)
 7cc:	82 ea       	ldi	r24, 0xA2	; 162
 7ce:	80 83       	st	Z, r24
	TCCR1B = 0;																	// LIMPIAR TCCRB
 7d0:	e1 e8       	ldi	r30, 0x81	; 129
 7d2:	f0 e0       	ldi	r31, 0x00	; 0
 7d4:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM13) | (1 << WGM12);										// MODO FAST PWM (parte alta)
 7d6:	88 e1       	ldi	r24, 0x18	; 24
 7d8:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS11);														// PRESCALER PWM 8
 7da:	90 81       	ld	r25, Z
 7dc:	92 60       	ori	r25, 0x02	; 2
 7de:	90 83       	st	Z, r25
	//TCCR1B |= (1 << ICNC1);														// noise canceler
	ICR1 = TOP;																	// valor maximo para ICR1 "19999"
 7e0:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 7e4:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 7e8:	08 95       	ret

000007ea <pulso_PWM1>:
}

// El registro OCR1A revisa cuanto dura el pulso en PB1 (servo) en cada ciclo PWM, el servo lee el pulso y se mueve segun la posicion que le diga
void pulso_PWM1(uint16_t pulso){
	//OCR1A = 1000 + ((uint32_t)pulso * 4000 / 180);
	OCR1A = 20.05 * (float)pulso + 1200.0;												// base
 7ea:	bc 01       	movw	r22, r24
 7ec:	80 e0       	ldi	r24, 0x00	; 0
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	0e 94 38 05 	call	0xa70	; 0xa70 <__floatunsisf>
 7f4:	26 e6       	ldi	r18, 0x66	; 102
 7f6:	36 e6       	ldi	r19, 0x66	; 102
 7f8:	40 ea       	ldi	r20, 0xA0	; 160
 7fa:	51 e4       	ldi	r21, 0x41	; 65
 7fc:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__mulsf3>
 800:	20 e0       	ldi	r18, 0x00	; 0
 802:	30 e0       	ldi	r19, 0x00	; 0
 804:	46 e9       	ldi	r20, 0x96	; 150
 806:	54 e4       	ldi	r21, 0x44	; 68
 808:	0e 94 9d 04 	call	0x93a	; 0x93a <__addsf3>
 80c:	0e 94 09 05 	call	0xa12	; 0xa12 <__fixunssfsi>
 810:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 814:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 818:	08 95       	ret

0000081a <pulso2_PWM1>:
}

void pulso2_PWM1(uint16_t angle)
{
	//OCR1B = 1000 + ((uint32_t)angle * 4000 / 180);
	OCR1B = 19.05 * (float)angle + 1200.0;
 81a:	bc 01       	movw	r22, r24
 81c:	80 e0       	ldi	r24, 0x00	; 0
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	0e 94 38 05 	call	0xa70	; 0xa70 <__floatunsisf>
 824:	26 e6       	ldi	r18, 0x66	; 102
 826:	36 e6       	ldi	r19, 0x66	; 102
 828:	48 e9       	ldi	r20, 0x98	; 152
 82a:	51 e4       	ldi	r21, 0x41	; 65
 82c:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__mulsf3>
 830:	20 e0       	ldi	r18, 0x00	; 0
 832:	30 e0       	ldi	r19, 0x00	; 0
 834:	46 e9       	ldi	r20, 0x96	; 150
 836:	54 e4       	ldi	r21, 0x44	; 68
 838:	0e 94 9d 04 	call	0x93a	; 0x93a <__addsf3>
 83c:	0e 94 09 05 	call	0xa12	; 0xa12 <__fixunssfsi>
 840:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 844:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 848:	08 95       	ret

0000084a <init_PWM2>:
uint8_t servo3;
uint8_t servo4;

// NON-Interrupt subroutines
void init_PWM2(void){
	DDRB |= (1 << PORTB3);																// Salida servo3
 84a:	84 b1       	in	r24, 0x04	; 4
 84c:	88 60       	ori	r24, 0x08	; 8
 84e:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << PORTD3);																// salida servo4
 850:	8a b1       	in	r24, 0x0a	; 10
 852:	88 60       	ori	r24, 0x08	; 8
 854:	8a b9       	out	0x0a, r24	; 10
	TCCR2A = 0;																			// LIMPIAR TCCR2A
 856:	e0 eb       	ldi	r30, 0xB0	; 176
 858:	f0 e0       	ldi	r31, 0x00	; 0
 85a:	10 82       	st	Z, r1
	TCCR2A |= (1 << COM2A1) | (1 << COM2B1);											// non inverting fast pwm (COM2A1 para servo3 y COM2B1 para servo4)
 85c:	80 81       	ld	r24, Z
 85e:	80 6a       	ori	r24, 0xA0	; 160
 860:	80 83       	st	Z, r24
	TCCR2A |= (1 << WGM20) | (1 << WGM21);												// fast pwm
 862:	80 81       	ld	r24, Z
 864:	83 60       	ori	r24, 0x03	; 3
 866:	80 83       	st	Z, r24
	TCCR2B = 0;																			// LIMPIAR TCCR2B
 868:	e1 eb       	ldi	r30, 0xB1	; 177
 86a:	f0 e0       	ldi	r31, 0x00	; 0
 86c:	10 82       	st	Z, r1
	TCCR2B |= (1 << CS22) | (1 << CS21)	|(1 << CS20);									// PRESCALER 1024
 86e:	80 81       	ld	r24, Z
 870:	87 60       	ori	r24, 0x07	; 7
 872:	80 83       	st	Z, r24
 874:	08 95       	ret

00000876 <pulse_PWM2>:
	
}

void pulse_PWM2(uint8_t angle3)
{
	OCR2A = 0.19 * (float)angle3 + 5.0;												// 0.19 - 180
 876:	68 2f       	mov	r22, r24
 878:	70 e0       	ldi	r23, 0x00	; 0
 87a:	80 e0       	ldi	r24, 0x00	; 0
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	0e 94 38 05 	call	0xa70	; 0xa70 <__floatunsisf>
 882:	2c e5       	ldi	r18, 0x5C	; 92
 884:	3f e8       	ldi	r19, 0x8F	; 143
 886:	42 e4       	ldi	r20, 0x42	; 66
 888:	5e e3       	ldi	r21, 0x3E	; 62
 88a:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__mulsf3>
 88e:	20 e0       	ldi	r18, 0x00	; 0
 890:	30 e0       	ldi	r19, 0x00	; 0
 892:	40 ea       	ldi	r20, 0xA0	; 160
 894:	50 e4       	ldi	r21, 0x40	; 64
 896:	0e 94 9d 04 	call	0x93a	; 0x93a <__addsf3>
 89a:	0e 94 09 05 	call	0xa12	; 0xa12 <__fixunssfsi>
 89e:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 8a2:	08 95       	ret

000008a4 <pulse2_PWM2>:
}

void pulse2_PWM2(uint8_t angle4)
{
	OCR2B = 0.19 * (float)angle4 + 5.0;
 8a4:	68 2f       	mov	r22, r24
 8a6:	70 e0       	ldi	r23, 0x00	; 0
 8a8:	80 e0       	ldi	r24, 0x00	; 0
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	0e 94 38 05 	call	0xa70	; 0xa70 <__floatunsisf>
 8b0:	2c e5       	ldi	r18, 0x5C	; 92
 8b2:	3f e8       	ldi	r19, 0x8F	; 143
 8b4:	42 e4       	ldi	r20, 0x42	; 66
 8b6:	5e e3       	ldi	r21, 0x3E	; 62
 8b8:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__mulsf3>
 8bc:	20 e0       	ldi	r18, 0x00	; 0
 8be:	30 e0       	ldi	r19, 0x00	; 0
 8c0:	40 ea       	ldi	r20, 0xA0	; 160
 8c2:	50 e4       	ldi	r21, 0x40	; 64
 8c4:	0e 94 9d 04 	call	0x93a	; 0x93a <__addsf3>
 8c8:	0e 94 09 05 	call	0xa12	; 0xa12 <__fixunssfsi>
 8cc:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 8d0:	08 95       	ret

000008d2 <init_USART>:
//char signal;
// NON-Interrupt subroutines

void init_USART()
{
	DDRD |= (1 << DDD1);															// Tx como salida
 8d2:	8a b1       	in	r24, 0x0a	; 10
 8d4:	82 60       	ori	r24, 0x02	; 2
 8d6:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << DDD0);															// Rx como entrada
 8d8:	8a b1       	in	r24, 0x0a	; 10
 8da:	8e 7f       	andi	r24, 0xFE	; 254
 8dc:	8a b9       	out	0x0a, r24	; 10
	
	UCSR0A = 0;																		// Configurar UCSR0A
 8de:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	
	UCSR0B |=  (1 << TXEN0) | (1 << RXEN0 ) | (1 << RXCIE0);						// habilitar bit para recibir, transmitir y habilitar interrupción
 8e2:	e1 ec       	ldi	r30, 0xC1	; 193
 8e4:	f0 e0       	ldi	r31, 0x00	; 0
 8e6:	80 81       	ld	r24, Z
 8e8:	88 69       	ori	r24, 0x98	; 152
 8ea:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);										// CHARACTER SIZE 8 BITS Y 1 STOP BIT
 8ec:	e2 ec       	ldi	r30, 0xC2	; 194
 8ee:	f0 e0       	ldi	r31, 0x00	; 0
 8f0:	80 81       	ld	r24, Z
 8f2:	86 60       	ori	r24, 0x06	; 6
 8f4:	80 83       	st	Z, r24
	UBRR0 = 103;																		// BAUD RATE 9600 0.2% DE ERROR
 8f6:	87 e6       	ldi	r24, 0x67	; 103
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 8fe:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 902:	08 95       	ret

00000904 <WriteChar>:
}

void WriteChar(char j)
{
	//while((UCSR0A & (1 << UDRE0)) == 0);
	while(!(UCSR0A &(1 << UDRE0)));							// esperar a que se vacie el buffer (!= es no sea)
 904:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 908:	95 ff       	sbrs	r25, 5
 90a:	fc cf       	rjmp	.-8      	; 0x904 <WriteChar>
	UDR0 = j;												// meter valor
 90c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 910:	08 95       	ret

00000912 <writeString>:
}

void writeString(char* txt)												// el char* sirve para representar cadenas de texto
{
 912:	0f 93       	push	r16
 914:	1f 93       	push	r17
 916:	cf 93       	push	r28
 918:	8c 01       	movw	r16, r24
	for (uint8_t i = 0; txt[i] != '\0'; i++)
 91a:	c0 e0       	ldi	r28, 0x00	; 0
 91c:	03 c0       	rjmp	.+6      	; 0x924 <writeString+0x12>
	{
		WriteChar(txt[i]);									// es como leer cada letra
 91e:	0e 94 82 04 	call	0x904	; 0x904 <WriteChar>
	UDR0 = j;												// meter valor
}

void writeString(char* txt)												// el char* sirve para representar cadenas de texto
{
	for (uint8_t i = 0; txt[i] != '\0'; i++)
 922:	cf 5f       	subi	r28, 0xFF	; 255
 924:	f8 01       	movw	r30, r16
 926:	ec 0f       	add	r30, r28
 928:	f1 1d       	adc	r31, r1
 92a:	80 81       	ld	r24, Z
 92c:	81 11       	cpse	r24, r1
 92e:	f7 cf       	rjmp	.-18     	; 0x91e <writeString+0xc>
	{
		WriteChar(txt[i]);									// es como leer cada letra
	}
}
 930:	cf 91       	pop	r28
 932:	1f 91       	pop	r17
 934:	0f 91       	pop	r16
 936:	08 95       	ret

00000938 <__subsf3>:
 938:	50 58       	subi	r21, 0x80	; 128

0000093a <__addsf3>:
 93a:	bb 27       	eor	r27, r27
 93c:	aa 27       	eor	r26, r26
 93e:	0e 94 b4 04 	call	0x968	; 0x968 <__addsf3x>
 942:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__fp_round>
 946:	0e 94 7e 05 	call	0xafc	; 0xafc <__fp_pscA>
 94a:	38 f0       	brcs	.+14     	; 0x95a <__addsf3+0x20>
 94c:	0e 94 85 05 	call	0xb0a	; 0xb0a <__fp_pscB>
 950:	20 f0       	brcs	.+8      	; 0x95a <__addsf3+0x20>
 952:	39 f4       	brne	.+14     	; 0x962 <__addsf3+0x28>
 954:	9f 3f       	cpi	r25, 0xFF	; 255
 956:	19 f4       	brne	.+6      	; 0x95e <__addsf3+0x24>
 958:	26 f4       	brtc	.+8      	; 0x962 <__addsf3+0x28>
 95a:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__fp_nan>
 95e:	0e f4       	brtc	.+2      	; 0x962 <__addsf3+0x28>
 960:	e0 95       	com	r30
 962:	e7 fb       	bst	r30, 7
 964:	0c 94 75 05 	jmp	0xaea	; 0xaea <__fp_inf>

00000968 <__addsf3x>:
 968:	e9 2f       	mov	r30, r25
 96a:	0e 94 9d 05 	call	0xb3a	; 0xb3a <__fp_split3>
 96e:	58 f3       	brcs	.-42     	; 0x946 <__addsf3+0xc>
 970:	ba 17       	cp	r27, r26
 972:	62 07       	cpc	r22, r18
 974:	73 07       	cpc	r23, r19
 976:	84 07       	cpc	r24, r20
 978:	95 07       	cpc	r25, r21
 97a:	20 f0       	brcs	.+8      	; 0x984 <__addsf3x+0x1c>
 97c:	79 f4       	brne	.+30     	; 0x99c <__addsf3x+0x34>
 97e:	a6 f5       	brtc	.+104    	; 0x9e8 <__addsf3x+0x80>
 980:	0c 94 bf 05 	jmp	0xb7e	; 0xb7e <__fp_zero>
 984:	0e f4       	brtc	.+2      	; 0x988 <__addsf3x+0x20>
 986:	e0 95       	com	r30
 988:	0b 2e       	mov	r0, r27
 98a:	ba 2f       	mov	r27, r26
 98c:	a0 2d       	mov	r26, r0
 98e:	0b 01       	movw	r0, r22
 990:	b9 01       	movw	r22, r18
 992:	90 01       	movw	r18, r0
 994:	0c 01       	movw	r0, r24
 996:	ca 01       	movw	r24, r20
 998:	a0 01       	movw	r20, r0
 99a:	11 24       	eor	r1, r1
 99c:	ff 27       	eor	r31, r31
 99e:	59 1b       	sub	r21, r25
 9a0:	99 f0       	breq	.+38     	; 0x9c8 <__addsf3x+0x60>
 9a2:	59 3f       	cpi	r21, 0xF9	; 249
 9a4:	50 f4       	brcc	.+20     	; 0x9ba <__addsf3x+0x52>
 9a6:	50 3e       	cpi	r21, 0xE0	; 224
 9a8:	68 f1       	brcs	.+90     	; 0xa04 <__addsf3x+0x9c>
 9aa:	1a 16       	cp	r1, r26
 9ac:	f0 40       	sbci	r31, 0x00	; 0
 9ae:	a2 2f       	mov	r26, r18
 9b0:	23 2f       	mov	r18, r19
 9b2:	34 2f       	mov	r19, r20
 9b4:	44 27       	eor	r20, r20
 9b6:	58 5f       	subi	r21, 0xF8	; 248
 9b8:	f3 cf       	rjmp	.-26     	; 0x9a0 <__addsf3x+0x38>
 9ba:	46 95       	lsr	r20
 9bc:	37 95       	ror	r19
 9be:	27 95       	ror	r18
 9c0:	a7 95       	ror	r26
 9c2:	f0 40       	sbci	r31, 0x00	; 0
 9c4:	53 95       	inc	r21
 9c6:	c9 f7       	brne	.-14     	; 0x9ba <__addsf3x+0x52>
 9c8:	7e f4       	brtc	.+30     	; 0x9e8 <__addsf3x+0x80>
 9ca:	1f 16       	cp	r1, r31
 9cc:	ba 0b       	sbc	r27, r26
 9ce:	62 0b       	sbc	r22, r18
 9d0:	73 0b       	sbc	r23, r19
 9d2:	84 0b       	sbc	r24, r20
 9d4:	ba f0       	brmi	.+46     	; 0xa04 <__addsf3x+0x9c>
 9d6:	91 50       	subi	r25, 0x01	; 1
 9d8:	a1 f0       	breq	.+40     	; 0xa02 <__addsf3x+0x9a>
 9da:	ff 0f       	add	r31, r31
 9dc:	bb 1f       	adc	r27, r27
 9de:	66 1f       	adc	r22, r22
 9e0:	77 1f       	adc	r23, r23
 9e2:	88 1f       	adc	r24, r24
 9e4:	c2 f7       	brpl	.-16     	; 0x9d6 <__addsf3x+0x6e>
 9e6:	0e c0       	rjmp	.+28     	; 0xa04 <__addsf3x+0x9c>
 9e8:	ba 0f       	add	r27, r26
 9ea:	62 1f       	adc	r22, r18
 9ec:	73 1f       	adc	r23, r19
 9ee:	84 1f       	adc	r24, r20
 9f0:	48 f4       	brcc	.+18     	; 0xa04 <__addsf3x+0x9c>
 9f2:	87 95       	ror	r24
 9f4:	77 95       	ror	r23
 9f6:	67 95       	ror	r22
 9f8:	b7 95       	ror	r27
 9fa:	f7 95       	ror	r31
 9fc:	9e 3f       	cpi	r25, 0xFE	; 254
 9fe:	08 f0       	brcs	.+2      	; 0xa02 <__addsf3x+0x9a>
 a00:	b0 cf       	rjmp	.-160    	; 0x962 <__addsf3+0x28>
 a02:	93 95       	inc	r25
 a04:	88 0f       	add	r24, r24
 a06:	08 f0       	brcs	.+2      	; 0xa0a <__addsf3x+0xa2>
 a08:	99 27       	eor	r25, r25
 a0a:	ee 0f       	add	r30, r30
 a0c:	97 95       	ror	r25
 a0e:	87 95       	ror	r24
 a10:	08 95       	ret

00000a12 <__fixunssfsi>:
 a12:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__fp_splitA>
 a16:	88 f0       	brcs	.+34     	; 0xa3a <__fixunssfsi+0x28>
 a18:	9f 57       	subi	r25, 0x7F	; 127
 a1a:	98 f0       	brcs	.+38     	; 0xa42 <__fixunssfsi+0x30>
 a1c:	b9 2f       	mov	r27, r25
 a1e:	99 27       	eor	r25, r25
 a20:	b7 51       	subi	r27, 0x17	; 23
 a22:	b0 f0       	brcs	.+44     	; 0xa50 <__fixunssfsi+0x3e>
 a24:	e1 f0       	breq	.+56     	; 0xa5e <__fixunssfsi+0x4c>
 a26:	66 0f       	add	r22, r22
 a28:	77 1f       	adc	r23, r23
 a2a:	88 1f       	adc	r24, r24
 a2c:	99 1f       	adc	r25, r25
 a2e:	1a f0       	brmi	.+6      	; 0xa36 <__fixunssfsi+0x24>
 a30:	ba 95       	dec	r27
 a32:	c9 f7       	brne	.-14     	; 0xa26 <__fixunssfsi+0x14>
 a34:	14 c0       	rjmp	.+40     	; 0xa5e <__fixunssfsi+0x4c>
 a36:	b1 30       	cpi	r27, 0x01	; 1
 a38:	91 f0       	breq	.+36     	; 0xa5e <__fixunssfsi+0x4c>
 a3a:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__fp_zero>
 a3e:	b1 e0       	ldi	r27, 0x01	; 1
 a40:	08 95       	ret
 a42:	0c 94 bf 05 	jmp	0xb7e	; 0xb7e <__fp_zero>
 a46:	67 2f       	mov	r22, r23
 a48:	78 2f       	mov	r23, r24
 a4a:	88 27       	eor	r24, r24
 a4c:	b8 5f       	subi	r27, 0xF8	; 248
 a4e:	39 f0       	breq	.+14     	; 0xa5e <__fixunssfsi+0x4c>
 a50:	b9 3f       	cpi	r27, 0xF9	; 249
 a52:	cc f3       	brlt	.-14     	; 0xa46 <__fixunssfsi+0x34>
 a54:	86 95       	lsr	r24
 a56:	77 95       	ror	r23
 a58:	67 95       	ror	r22
 a5a:	b3 95       	inc	r27
 a5c:	d9 f7       	brne	.-10     	; 0xa54 <__fixunssfsi+0x42>
 a5e:	3e f4       	brtc	.+14     	; 0xa6e <__fixunssfsi+0x5c>
 a60:	90 95       	com	r25
 a62:	80 95       	com	r24
 a64:	70 95       	com	r23
 a66:	61 95       	neg	r22
 a68:	7f 4f       	sbci	r23, 0xFF	; 255
 a6a:	8f 4f       	sbci	r24, 0xFF	; 255
 a6c:	9f 4f       	sbci	r25, 0xFF	; 255
 a6e:	08 95       	ret

00000a70 <__floatunsisf>:
 a70:	e8 94       	clt
 a72:	09 c0       	rjmp	.+18     	; 0xa86 <__floatsisf+0x12>

00000a74 <__floatsisf>:
 a74:	97 fb       	bst	r25, 7
 a76:	3e f4       	brtc	.+14     	; 0xa86 <__floatsisf+0x12>
 a78:	90 95       	com	r25
 a7a:	80 95       	com	r24
 a7c:	70 95       	com	r23
 a7e:	61 95       	neg	r22
 a80:	7f 4f       	sbci	r23, 0xFF	; 255
 a82:	8f 4f       	sbci	r24, 0xFF	; 255
 a84:	9f 4f       	sbci	r25, 0xFF	; 255
 a86:	99 23       	and	r25, r25
 a88:	a9 f0       	breq	.+42     	; 0xab4 <__floatsisf+0x40>
 a8a:	f9 2f       	mov	r31, r25
 a8c:	96 e9       	ldi	r25, 0x96	; 150
 a8e:	bb 27       	eor	r27, r27
 a90:	93 95       	inc	r25
 a92:	f6 95       	lsr	r31
 a94:	87 95       	ror	r24
 a96:	77 95       	ror	r23
 a98:	67 95       	ror	r22
 a9a:	b7 95       	ror	r27
 a9c:	f1 11       	cpse	r31, r1
 a9e:	f8 cf       	rjmp	.-16     	; 0xa90 <__floatsisf+0x1c>
 aa0:	fa f4       	brpl	.+62     	; 0xae0 <__floatsisf+0x6c>
 aa2:	bb 0f       	add	r27, r27
 aa4:	11 f4       	brne	.+4      	; 0xaaa <__floatsisf+0x36>
 aa6:	60 ff       	sbrs	r22, 0
 aa8:	1b c0       	rjmp	.+54     	; 0xae0 <__floatsisf+0x6c>
 aaa:	6f 5f       	subi	r22, 0xFF	; 255
 aac:	7f 4f       	sbci	r23, 0xFF	; 255
 aae:	8f 4f       	sbci	r24, 0xFF	; 255
 ab0:	9f 4f       	sbci	r25, 0xFF	; 255
 ab2:	16 c0       	rjmp	.+44     	; 0xae0 <__floatsisf+0x6c>
 ab4:	88 23       	and	r24, r24
 ab6:	11 f0       	breq	.+4      	; 0xabc <__floatsisf+0x48>
 ab8:	96 e9       	ldi	r25, 0x96	; 150
 aba:	11 c0       	rjmp	.+34     	; 0xade <__floatsisf+0x6a>
 abc:	77 23       	and	r23, r23
 abe:	21 f0       	breq	.+8      	; 0xac8 <__floatsisf+0x54>
 ac0:	9e e8       	ldi	r25, 0x8E	; 142
 ac2:	87 2f       	mov	r24, r23
 ac4:	76 2f       	mov	r23, r22
 ac6:	05 c0       	rjmp	.+10     	; 0xad2 <__floatsisf+0x5e>
 ac8:	66 23       	and	r22, r22
 aca:	71 f0       	breq	.+28     	; 0xae8 <__floatsisf+0x74>
 acc:	96 e8       	ldi	r25, 0x86	; 134
 ace:	86 2f       	mov	r24, r22
 ad0:	70 e0       	ldi	r23, 0x00	; 0
 ad2:	60 e0       	ldi	r22, 0x00	; 0
 ad4:	2a f0       	brmi	.+10     	; 0xae0 <__floatsisf+0x6c>
 ad6:	9a 95       	dec	r25
 ad8:	66 0f       	add	r22, r22
 ada:	77 1f       	adc	r23, r23
 adc:	88 1f       	adc	r24, r24
 ade:	da f7       	brpl	.-10     	; 0xad6 <__floatsisf+0x62>
 ae0:	88 0f       	add	r24, r24
 ae2:	96 95       	lsr	r25
 ae4:	87 95       	ror	r24
 ae6:	97 f9       	bld	r25, 7
 ae8:	08 95       	ret

00000aea <__fp_inf>:
 aea:	97 f9       	bld	r25, 7
 aec:	9f 67       	ori	r25, 0x7F	; 127
 aee:	80 e8       	ldi	r24, 0x80	; 128
 af0:	70 e0       	ldi	r23, 0x00	; 0
 af2:	60 e0       	ldi	r22, 0x00	; 0
 af4:	08 95       	ret

00000af6 <__fp_nan>:
 af6:	9f ef       	ldi	r25, 0xFF	; 255
 af8:	80 ec       	ldi	r24, 0xC0	; 192
 afa:	08 95       	ret

00000afc <__fp_pscA>:
 afc:	00 24       	eor	r0, r0
 afe:	0a 94       	dec	r0
 b00:	16 16       	cp	r1, r22
 b02:	17 06       	cpc	r1, r23
 b04:	18 06       	cpc	r1, r24
 b06:	09 06       	cpc	r0, r25
 b08:	08 95       	ret

00000b0a <__fp_pscB>:
 b0a:	00 24       	eor	r0, r0
 b0c:	0a 94       	dec	r0
 b0e:	12 16       	cp	r1, r18
 b10:	13 06       	cpc	r1, r19
 b12:	14 06       	cpc	r1, r20
 b14:	05 06       	cpc	r0, r21
 b16:	08 95       	ret

00000b18 <__fp_round>:
 b18:	09 2e       	mov	r0, r25
 b1a:	03 94       	inc	r0
 b1c:	00 0c       	add	r0, r0
 b1e:	11 f4       	brne	.+4      	; 0xb24 <__fp_round+0xc>
 b20:	88 23       	and	r24, r24
 b22:	52 f0       	brmi	.+20     	; 0xb38 <__fp_round+0x20>
 b24:	bb 0f       	add	r27, r27
 b26:	40 f4       	brcc	.+16     	; 0xb38 <__fp_round+0x20>
 b28:	bf 2b       	or	r27, r31
 b2a:	11 f4       	brne	.+4      	; 0xb30 <__fp_round+0x18>
 b2c:	60 ff       	sbrs	r22, 0
 b2e:	04 c0       	rjmp	.+8      	; 0xb38 <__fp_round+0x20>
 b30:	6f 5f       	subi	r22, 0xFF	; 255
 b32:	7f 4f       	sbci	r23, 0xFF	; 255
 b34:	8f 4f       	sbci	r24, 0xFF	; 255
 b36:	9f 4f       	sbci	r25, 0xFF	; 255
 b38:	08 95       	ret

00000b3a <__fp_split3>:
 b3a:	57 fd       	sbrc	r21, 7
 b3c:	90 58       	subi	r25, 0x80	; 128
 b3e:	44 0f       	add	r20, r20
 b40:	55 1f       	adc	r21, r21
 b42:	59 f0       	breq	.+22     	; 0xb5a <__fp_splitA+0x10>
 b44:	5f 3f       	cpi	r21, 0xFF	; 255
 b46:	71 f0       	breq	.+28     	; 0xb64 <__fp_splitA+0x1a>
 b48:	47 95       	ror	r20

00000b4a <__fp_splitA>:
 b4a:	88 0f       	add	r24, r24
 b4c:	97 fb       	bst	r25, 7
 b4e:	99 1f       	adc	r25, r25
 b50:	61 f0       	breq	.+24     	; 0xb6a <__fp_splitA+0x20>
 b52:	9f 3f       	cpi	r25, 0xFF	; 255
 b54:	79 f0       	breq	.+30     	; 0xb74 <__fp_splitA+0x2a>
 b56:	87 95       	ror	r24
 b58:	08 95       	ret
 b5a:	12 16       	cp	r1, r18
 b5c:	13 06       	cpc	r1, r19
 b5e:	14 06       	cpc	r1, r20
 b60:	55 1f       	adc	r21, r21
 b62:	f2 cf       	rjmp	.-28     	; 0xb48 <__fp_split3+0xe>
 b64:	46 95       	lsr	r20
 b66:	f1 df       	rcall	.-30     	; 0xb4a <__fp_splitA>
 b68:	08 c0       	rjmp	.+16     	; 0xb7a <__fp_splitA+0x30>
 b6a:	16 16       	cp	r1, r22
 b6c:	17 06       	cpc	r1, r23
 b6e:	18 06       	cpc	r1, r24
 b70:	99 1f       	adc	r25, r25
 b72:	f1 cf       	rjmp	.-30     	; 0xb56 <__fp_splitA+0xc>
 b74:	86 95       	lsr	r24
 b76:	71 05       	cpc	r23, r1
 b78:	61 05       	cpc	r22, r1
 b7a:	08 94       	sec
 b7c:	08 95       	ret

00000b7e <__fp_zero>:
 b7e:	e8 94       	clt

00000b80 <__fp_szero>:
 b80:	bb 27       	eor	r27, r27
 b82:	66 27       	eor	r22, r22
 b84:	77 27       	eor	r23, r23
 b86:	cb 01       	movw	r24, r22
 b88:	97 f9       	bld	r25, 7
 b8a:	08 95       	ret

00000b8c <__mulsf3>:
 b8c:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <__mulsf3x>
 b90:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__fp_round>
 b94:	0e 94 7e 05 	call	0xafc	; 0xafc <__fp_pscA>
 b98:	38 f0       	brcs	.+14     	; 0xba8 <__mulsf3+0x1c>
 b9a:	0e 94 85 05 	call	0xb0a	; 0xb0a <__fp_pscB>
 b9e:	20 f0       	brcs	.+8      	; 0xba8 <__mulsf3+0x1c>
 ba0:	95 23       	and	r25, r21
 ba2:	11 f0       	breq	.+4      	; 0xba8 <__mulsf3+0x1c>
 ba4:	0c 94 75 05 	jmp	0xaea	; 0xaea <__fp_inf>
 ba8:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__fp_nan>
 bac:	11 24       	eor	r1, r1
 bae:	0c 94 c0 05 	jmp	0xb80	; 0xb80 <__fp_szero>

00000bb2 <__mulsf3x>:
 bb2:	0e 94 9d 05 	call	0xb3a	; 0xb3a <__fp_split3>
 bb6:	70 f3       	brcs	.-36     	; 0xb94 <__mulsf3+0x8>

00000bb8 <__mulsf3_pse>:
 bb8:	95 9f       	mul	r25, r21
 bba:	c1 f3       	breq	.-16     	; 0xbac <__mulsf3+0x20>
 bbc:	95 0f       	add	r25, r21
 bbe:	50 e0       	ldi	r21, 0x00	; 0
 bc0:	55 1f       	adc	r21, r21
 bc2:	62 9f       	mul	r22, r18
 bc4:	f0 01       	movw	r30, r0
 bc6:	72 9f       	mul	r23, r18
 bc8:	bb 27       	eor	r27, r27
 bca:	f0 0d       	add	r31, r0
 bcc:	b1 1d       	adc	r27, r1
 bce:	63 9f       	mul	r22, r19
 bd0:	aa 27       	eor	r26, r26
 bd2:	f0 0d       	add	r31, r0
 bd4:	b1 1d       	adc	r27, r1
 bd6:	aa 1f       	adc	r26, r26
 bd8:	64 9f       	mul	r22, r20
 bda:	66 27       	eor	r22, r22
 bdc:	b0 0d       	add	r27, r0
 bde:	a1 1d       	adc	r26, r1
 be0:	66 1f       	adc	r22, r22
 be2:	82 9f       	mul	r24, r18
 be4:	22 27       	eor	r18, r18
 be6:	b0 0d       	add	r27, r0
 be8:	a1 1d       	adc	r26, r1
 bea:	62 1f       	adc	r22, r18
 bec:	73 9f       	mul	r23, r19
 bee:	b0 0d       	add	r27, r0
 bf0:	a1 1d       	adc	r26, r1
 bf2:	62 1f       	adc	r22, r18
 bf4:	83 9f       	mul	r24, r19
 bf6:	a0 0d       	add	r26, r0
 bf8:	61 1d       	adc	r22, r1
 bfa:	22 1f       	adc	r18, r18
 bfc:	74 9f       	mul	r23, r20
 bfe:	33 27       	eor	r19, r19
 c00:	a0 0d       	add	r26, r0
 c02:	61 1d       	adc	r22, r1
 c04:	23 1f       	adc	r18, r19
 c06:	84 9f       	mul	r24, r20
 c08:	60 0d       	add	r22, r0
 c0a:	21 1d       	adc	r18, r1
 c0c:	82 2f       	mov	r24, r18
 c0e:	76 2f       	mov	r23, r22
 c10:	6a 2f       	mov	r22, r26
 c12:	11 24       	eor	r1, r1
 c14:	9f 57       	subi	r25, 0x7F	; 127
 c16:	50 40       	sbci	r21, 0x00	; 0
 c18:	9a f0       	brmi	.+38     	; 0xc40 <__mulsf3_pse+0x88>
 c1a:	f1 f0       	breq	.+60     	; 0xc58 <__mulsf3_pse+0xa0>
 c1c:	88 23       	and	r24, r24
 c1e:	4a f0       	brmi	.+18     	; 0xc32 <__mulsf3_pse+0x7a>
 c20:	ee 0f       	add	r30, r30
 c22:	ff 1f       	adc	r31, r31
 c24:	bb 1f       	adc	r27, r27
 c26:	66 1f       	adc	r22, r22
 c28:	77 1f       	adc	r23, r23
 c2a:	88 1f       	adc	r24, r24
 c2c:	91 50       	subi	r25, 0x01	; 1
 c2e:	50 40       	sbci	r21, 0x00	; 0
 c30:	a9 f7       	brne	.-22     	; 0xc1c <__mulsf3_pse+0x64>
 c32:	9e 3f       	cpi	r25, 0xFE	; 254
 c34:	51 05       	cpc	r21, r1
 c36:	80 f0       	brcs	.+32     	; 0xc58 <__mulsf3_pse+0xa0>
 c38:	0c 94 75 05 	jmp	0xaea	; 0xaea <__fp_inf>
 c3c:	0c 94 c0 05 	jmp	0xb80	; 0xb80 <__fp_szero>
 c40:	5f 3f       	cpi	r21, 0xFF	; 255
 c42:	e4 f3       	brlt	.-8      	; 0xc3c <__mulsf3_pse+0x84>
 c44:	98 3e       	cpi	r25, 0xE8	; 232
 c46:	d4 f3       	brlt	.-12     	; 0xc3c <__mulsf3_pse+0x84>
 c48:	86 95       	lsr	r24
 c4a:	77 95       	ror	r23
 c4c:	67 95       	ror	r22
 c4e:	b7 95       	ror	r27
 c50:	f7 95       	ror	r31
 c52:	e7 95       	ror	r30
 c54:	9f 5f       	subi	r25, 0xFF	; 255
 c56:	c1 f7       	brne	.-16     	; 0xc48 <__mulsf3_pse+0x90>
 c58:	fe 2b       	or	r31, r30
 c5a:	88 0f       	add	r24, r24
 c5c:	91 1d       	adc	r25, r1
 c5e:	96 95       	lsr	r25
 c60:	87 95       	ror	r24
 c62:	97 f9       	bld	r25, 7
 c64:	08 95       	ret

00000c66 <__divmodhi4>:
 c66:	97 fb       	bst	r25, 7
 c68:	07 2e       	mov	r0, r23
 c6a:	16 f4       	brtc	.+4      	; 0xc70 <__divmodhi4+0xa>
 c6c:	00 94       	com	r0
 c6e:	07 d0       	rcall	.+14     	; 0xc7e <__divmodhi4_neg1>
 c70:	77 fd       	sbrc	r23, 7
 c72:	09 d0       	rcall	.+18     	; 0xc86 <__divmodhi4_neg2>
 c74:	0e 94 47 06 	call	0xc8e	; 0xc8e <__udivmodhi4>
 c78:	07 fc       	sbrc	r0, 7
 c7a:	05 d0       	rcall	.+10     	; 0xc86 <__divmodhi4_neg2>
 c7c:	3e f4       	brtc	.+14     	; 0xc8c <__divmodhi4_exit>

00000c7e <__divmodhi4_neg1>:
 c7e:	90 95       	com	r25
 c80:	81 95       	neg	r24
 c82:	9f 4f       	sbci	r25, 0xFF	; 255
 c84:	08 95       	ret

00000c86 <__divmodhi4_neg2>:
 c86:	70 95       	com	r23
 c88:	61 95       	neg	r22
 c8a:	7f 4f       	sbci	r23, 0xFF	; 255

00000c8c <__divmodhi4_exit>:
 c8c:	08 95       	ret

00000c8e <__udivmodhi4>:
 c8e:	aa 1b       	sub	r26, r26
 c90:	bb 1b       	sub	r27, r27
 c92:	51 e1       	ldi	r21, 0x11	; 17
 c94:	07 c0       	rjmp	.+14     	; 0xca4 <__udivmodhi4_ep>

00000c96 <__udivmodhi4_loop>:
 c96:	aa 1f       	adc	r26, r26
 c98:	bb 1f       	adc	r27, r27
 c9a:	a6 17       	cp	r26, r22
 c9c:	b7 07       	cpc	r27, r23
 c9e:	10 f0       	brcs	.+4      	; 0xca4 <__udivmodhi4_ep>
 ca0:	a6 1b       	sub	r26, r22
 ca2:	b7 0b       	sbc	r27, r23

00000ca4 <__udivmodhi4_ep>:
 ca4:	88 1f       	adc	r24, r24
 ca6:	99 1f       	adc	r25, r25
 ca8:	5a 95       	dec	r21
 caa:	a9 f7       	brne	.-22     	; 0xc96 <__udivmodhi4_loop>
 cac:	80 95       	com	r24
 cae:	90 95       	com	r25
 cb0:	bc 01       	movw	r22, r24
 cb2:	cd 01       	movw	r24, r26
 cb4:	08 95       	ret

00000cb6 <strchr>:
 cb6:	fc 01       	movw	r30, r24
 cb8:	81 91       	ld	r24, Z+
 cba:	86 17       	cp	r24, r22
 cbc:	21 f0       	breq	.+8      	; 0xcc6 <strchr+0x10>
 cbe:	88 23       	and	r24, r24
 cc0:	d9 f7       	brne	.-10     	; 0xcb8 <strchr+0x2>
 cc2:	99 27       	eor	r25, r25
 cc4:	08 95       	ret
 cc6:	31 97       	sbiw	r30, 0x01	; 1
 cc8:	cf 01       	movw	r24, r30
 cca:	08 95       	ret

00000ccc <_exit>:
 ccc:	f8 94       	cli

00000cce <__stop_program>:
 cce:	ff cf       	rjmp	.-2      	; 0xcce <__stop_program>
